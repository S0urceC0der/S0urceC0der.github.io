{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/s0.png","path":"img/s0.png","modified":0,"renderable":0},{"_id":"source/img/vmware-lock.png","path":"img/vmware-lock.png","modified":0,"renderable":0},{"_id":"source/img/vmware-list.png","path":"img/vmware-list.png","modified":0,"renderable":0},{"_id":"source/img/vs_b.png","path":"img/vs_b.png","modified":0,"renderable":0},{"_id":"source/img/vs_a.png","path":"img/vs_a.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"source/img/cmder.png","path":"img/cmder.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5e62f5e02a155eac2980600c4c5a55c32e797c7d","modified":1445782542000},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1445781491000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1445781491000},{"_id":"themes/jacman/README.md","hash":"79be8a49927c8666f1804d7ccd08af8d3268062a","modified":1445781491000},{"_id":"themes/jacman/README_zh.md","hash":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1445781491000},{"_id":"themes/jacman/_config.yml","hash":"2645041da644e6c76598e44fe0a4675bc5a78723","modified":1450801432000},{"_id":"source/_posts/Cmder.md","hash":"e09ccdab469217f465930af5e2c8ae0adf6cb45c","modified":1438498175000},{"_id":"source/_posts/Common.md","hash":"f7c1f2974c1a218a5983841656ad8fab3f256fe2","modified":1438498175000},{"_id":"source/_posts/Hello-World.md","hash":"6654746ea13ca4f363455a0c8d72cd02e3036250","modified":1438498175000},{"_id":"source/_posts/Cuckoo-1.md","hash":"4d5036f1f9f95c4893b3e1549aa9d7d9d4cbc114","modified":1438498175000},{"_id":"source/_posts/Install-Arch-Linux.md","hash":"ea2d248fdb30a37e68f859f9f2f9f09f1e176ec3","modified":1438498175000},{"_id":"source/_posts/Node-Development.md","hash":"2ed05a15d8e8af16ee01a15ae4bc7e22e3d14c60","modified":1438498175000},{"_id":"source/_posts/KaliLinux.md","hash":"2c67d51a6b5cc39ec1e965aecab5972114b621c5","modified":1438498175000},{"_id":"source/_posts/Mac.md","hash":"d063f2f882ce2c0e3c980e3aaff73f1b1f1cb241","modified":1438498175000},{"_id":"source/_posts/Mactype.md","hash":"6b42f3c8075daae81633b42d43b872cd66a3a557","modified":1438498175000},{"_id":"source/_posts/Sandbox.md","hash":"82e4f753a42bb6482d688d00a3da11a74fb94b40","modified":1438498175000},{"_id":"source/_posts/Node-Start.md","hash":"e15d5cb84b56dbc65fd195d03ec62d6e46a02198","modified":1438498175000},{"_id":"source/_posts/Scrapy.md","hash":"4077b4de0692e79aca40b83c07438fc58ac18b29","modified":1438498175000},{"_id":"source/_posts/Target.md","hash":"d5a5cc36082602478bd2e4be33c80f961fa43651","modified":1438498175000},{"_id":"source/_posts/Url-Leak.md","hash":"f5cd6338862604fda83c0711927a4aa1af9fe1ed","modified":1438498175000},{"_id":"source/_posts/mirror.md","hash":"6b2c2c28473663b0a57afa98618a636399262dba","modified":1452440863000},{"_id":"source/img/s0.png","hash":"4ae37d411642a1f21ce875280873cb35a4aff966","modified":1445782479000},{"_id":"source/img/.DS_Store","hash":"2aae1d3d8ae63abe99ecf7cf1af8698aaaee7c8d","modified":1445782574000},{"_id":"source/img/vmware-lock.png","hash":"2c42a00c7b5311138e03f3fc58a1109c2e31678a","modified":1438498175000},{"_id":"source/img/vmware-list.png","hash":"bd4e2db3f79faa01b355aa305b571a72edb17ccb","modified":1438498175000},{"_id":"source/img/vs_b.png","hash":"9577c1139e613daf1644a1cbe4be82aa66a78980","modified":1438498175000},{"_id":"themes/jacman/.git/FETCH_HEAD","hash":"92a0acd6c1dd6e881199a56c96b1ac61b1632c3b","modified":1450799724000},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1445781491000},{"_id":"themes/jacman/.git/config","hash":"2d3ae691d19a816889480acb832a3813f5ad7605","modified":1445781491000},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1445781434000},{"_id":"themes/jacman/.git/ORIG_HEAD","hash":"4335def04e583fa81e91fcf5064f91a1f59342a7","modified":1450799724000},{"_id":"themes/jacman/.git/packed-refs","hash":"02cc269ca230b0bb2dc9e921dfc975cf60343958","modified":1445781491000},{"_id":"themes/jacman/.git/index","hash":"5273291ed2c1d496e16e48c0b28b39c5a870c4ec","modified":1450799725000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1445781491000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1445781491000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1445781491000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1445781491000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1445781491000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1445781491000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1445781491000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1445781491000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1445781491000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1445781491000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1445781491000},{"_id":"source/img/vs_a.png","hash":"126a13162f2db9976281ec8bb9157686abeecba5","modified":1438498175000},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1445781434000},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1445781434000},{"_id":"themes/jacman/.git/logs/HEAD","hash":"b9e718b7265c4f85b243e279534589ab6a7f5ddb","modified":1450799725000},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1445781434000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"806dc4349387eec9179000ad7c9fef4023a72aab","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1450799724000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"32db7e7c8171530d29c3878f387c4438d6057508","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1445781491000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1445781491000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1445781491000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1445781491000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1445781491000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1445781491000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1445781491000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1445781491000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1445781491000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1445781491000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1445781491000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1445781491000},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1445781491000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1445781491000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1445781491000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1445781491000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1445781491000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1445781491000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1445781491000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1445781491000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1445781491000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1445781491000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1445781491000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1445781491000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1445781491000},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1445781491000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1445781491000},{"_id":"source/img/cmder.png","hash":"5280ec1941a17feeafe522fa0726338469000e51","modified":1438498175000},{"_id":"themes/jacman/.git/refs/heads/master","hash":"1271ee2d93b2b2daa0484f4eb6ba07325b6f5428","modified":1450799724000},{"_id":"themes/jacman/.git/objects/08/77d0d3c933510408bd1921c350f5c5cb34a44a","hash":"a329afc13a6dfa2015aa35d83e38d182b9c615e5","modified":1450799724000},{"_id":"themes/jacman/.git/objects/2a/dc24c90eddf11430c400fad4120afd8cedb0b7","hash":"46184245526068627df672fb7ccea8b898579a22","modified":1450799724000},{"_id":"themes/jacman/.git/objects/27/f220910ed0b9ed884e3f70a0ff4eafd5eb7a5b","hash":"5cfc4aa3e7ad87b9db1a367989168920e5019a0a","modified":1450799724000},{"_id":"themes/jacman/.git/objects/03/38429040273adacc9a59d6d034b2ac69c95a51","hash":"a9602b81ff939702c6501b7028141521b2f4f6d4","modified":1450799724000},{"_id":"themes/jacman/.git/objects/49/f524fddea8d9498596393b08d4678839cb6cc9","hash":"a367805da5fcf4ef898583e439e2d5c0fa384d0f","modified":1450799724000},{"_id":"themes/jacman/.git/objects/54/da64a6e42b88326429a838d72b8eb8cd03a8ba","hash":"8153682e38e62eb3eb873dd174cf14718647cb62","modified":1450799724000},{"_id":"themes/jacman/.git/objects/57/d9f841a2afacb16a4c7a1bc200ce4403cc47d7","hash":"c9be5b6725d9b15569b1207a0fdedf665aedfa6d","modified":1450799724000},{"_id":"themes/jacman/.git/objects/64/368defac23f8d36593ce153cf58405c97e100b","hash":"28a85fd422d2857d48d5a5e0e1d3ff50d6e5c24d","modified":1450799724000},{"_id":"themes/jacman/.git/objects/82/5c8e8b89caf698197bbad0f5d87e6dca01e191","hash":"80595dd1fcec47f68d3adbba31f6a49c17501800","modified":1450799724000},{"_id":"themes/jacman/.git/objects/76/60919c1ed7d4836ee4cbf48ff3c3d2c007c409","hash":"20b23ca537781cd26b576c6240449dd81a496625","modified":1450799724000},{"_id":"themes/jacman/.git/objects/8c/c361747a1e20fcc12b411fa7783d2fcb0d43f2","hash":"f012a1c2f411383cb424a315531d87c1915adce8","modified":1450799724000},{"_id":"themes/jacman/.git/objects/99/d97323d7e17a9218af4ab6000555cca880c15b","hash":"f8b939ba176274207ee8baafa0becb61ba337c45","modified":1450799724000},{"_id":"themes/jacman/.git/objects/a5/c5c75cdd5627d9ce75e8423c20a3d769fcc75a","hash":"df2d32da608211a2100cd243ed231ca74efce52d","modified":1450799724000},{"_id":"themes/jacman/.git/objects/b4/a0f0f2340e79346ef42b0aeda1abcefe157b7c","hash":"6e918a934446f6c66cf6122708cf9ae06209e289","modified":1450799724000},{"_id":"themes/jacman/.git/objects/c2/25f03e174a57a1c3fa0a053259b5400c7f61f6","hash":"db9b1c142e2979fdbceef7403047512e38299eea","modified":1450799724000},{"_id":"themes/jacman/.git/objects/2d/1d52c17fe33eb704c6e49f631c16050d0f5c9c","hash":"42ee79a04e4bdb1af32c42f7bd5e9ffdcc004b90","modified":1450799724000},{"_id":"themes/jacman/.git/objects/c9/87bd28fdf20657f864cdc5927902ed42691cc9","hash":"f56226ea1417f91a57181db25950ef89ac1529e4","modified":1450799724000},{"_id":"themes/jacman/.git/objects/43/b209f0b30c9530a107de35a420685ea8edf141","hash":"eaa72a2aab8fadb0df237d01db9d5462a545f174","modified":1450799724000},{"_id":"themes/jacman/.git/objects/e2/c0019723ec3eb1f9a37a26e8de2572bdb817b7","hash":"f565077d4e7732c7fa768f4ff48fcc94ba2df17c","modified":1450799724000},{"_id":"themes/jacman/.git/objects/e9/b440fa6b85805551809d12556a3771e0cc79f0","hash":"b7e05493f91646a29e30db613ebc90ecfb1cd1d0","modified":1450799724000},{"_id":"themes/jacman/.git/objects/pack/pack-9badea224c9744ecbf2971a4f38ff669956a05d4.idx","hash":"fc6a6d9229a3cd36e9d022d91e7e03b7dc66c842","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1445781491000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1445781491000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1445781491000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1450799724000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1450799724000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1445781491000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1445781491000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1445781491000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1445781491000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1445781491000},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1445781491000},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"b9e718b7265c4f85b243e279534589ab6a7f5ddb","modified":1450799725000},{"_id":"themes/jacman/.git/refs/remotes/origin/master","hash":"1271ee2d93b2b2daa0484f4eb6ba07325b6f5428","modified":1450799724000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1445781491000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1445781491000},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"367968bae28f60ed83c6872ebbaeacb2d086a693","modified":1445781491000},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/master","hash":"4e8f2deec3aba5041b67aaf7268918a8f46b85cf","modified":1450799724000},{"_id":"themes/jacman/.git/objects/pack/pack-9badea224c9744ecbf2971a4f38ff669956a05d4.pack","hash":"da620a3acf0a1eefdeb4164491ac10c99e924091","modified":1445781491000},{"_id":"source/_posts/React-Native-with-Android-on-Mac.md","hash":"821b4f1e0d73bd599b94ab3b9d48fed1b906d095","modified":1484999934000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Cmder","date":"2015-03-21T07:34:12.000Z","_content":"\n## Cmder简介\n\nCmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！\n\n![Cmder](/img/cmder.png)\n\n### 特点\n\n个人很简单的使用了下，觉得有以下优点：\n\n1. 可自定义字体，配色非常好看。\n\n2. 路径补全有所提高。\n\n## 使用配置\n\n### 乱码\n\nls的乱码主要是参数问题，修改文件cmder/config/aliases：\n\n```\nl=ls --show-control-chars\nla=ls -aF --show-control-chars\nll=ls -alF --show-control-chars\nls=ls --show-control-chars -F\n```\n\n### 中文重叠\n\n在设置中，取消`Main console font`下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。\n\n### 右键打开Cmder\n\n以管理员权限运行，输入命令`.\\cmder.exe /REGISTER ALL`，在任意目录下右击就会出现`Cmder Here`，可以打开并默认切换到该目录。\n\n### 退格后错位\n\n> [lgh](https://www.v2ex.com/member/lgh):\n> cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。\n> 现在干脆直接用 ConEmu 了。\n> 来源：https://www.v2ex.com/t/155058\n\nlgh针对问题1提出解决方法是修改提示符为$。修改方法是\n\n打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$\n\n## 不足\n\n当然，可能这些问题只是因为我没有找到对应的解决方法。\n\n1. <del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del>\n\n2. 路径补全还是没有达到zsh的效果。\n\n3. 没有快速进入某个目录的功能。\n\n4. Cmder1.2开始需要VS**2015**运行库支持（丧心病狂！）\n\n## 最后\n\n现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。\n","source":"_posts/Cmder.md","raw":"title: \"Cmder\"\ndate: 2015-03-21 15:34:12\ntags:\n---\n\n## Cmder简介\n\nCmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！\n\n![Cmder](/img/cmder.png)\n\n### 特点\n\n个人很简单的使用了下，觉得有以下优点：\n\n1. 可自定义字体，配色非常好看。\n\n2. 路径补全有所提高。\n\n## 使用配置\n\n### 乱码\n\nls的乱码主要是参数问题，修改文件cmder/config/aliases：\n\n```\nl=ls --show-control-chars\nla=ls -aF --show-control-chars\nll=ls -alF --show-control-chars\nls=ls --show-control-chars -F\n```\n\n### 中文重叠\n\n在设置中，取消`Main console font`下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。\n\n### 右键打开Cmder\n\n以管理员权限运行，输入命令`.\\cmder.exe /REGISTER ALL`，在任意目录下右击就会出现`Cmder Here`，可以打开并默认切换到该目录。\n\n### 退格后错位\n\n> [lgh](https://www.v2ex.com/member/lgh):\n> cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。\n> 现在干脆直接用 ConEmu 了。\n> 来源：https://www.v2ex.com/t/155058\n\nlgh针对问题1提出解决方法是修改提示符为$。修改方法是\n\n打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$\n\n## 不足\n\n当然，可能这些问题只是因为我没有找到对应的解决方法。\n\n1. <del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del>\n\n2. 路径补全还是没有达到zsh的效果。\n\n3. 没有快速进入某个目录的功能。\n\n4. Cmder1.2开始需要VS**2015**运行库支持（丧心病狂！）\n\n## 最后\n\n现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。\n","slug":"Cmder","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xnge0000qhfy25ijgff3","content":"<h2 id=\"Cmder简介\"><a href=\"#Cmder简介\" class=\"headerlink\" title=\"Cmder简介\"></a>Cmder简介</h2><p>Cmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！</p>\n<p><img src=\"/img/cmder.png\" alt=\"Cmder\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>个人很简单的使用了下，觉得有以下优点：</p>\n<ol>\n<li><p>可自定义字体，配色非常好看。</p>\n</li>\n<li><p>路径补全有所提高。</p>\n</li>\n</ol>\n<h2 id=\"使用配置\"><a href=\"#使用配置\" class=\"headerlink\" title=\"使用配置\"></a>使用配置</h2><h3 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h3><p>ls的乱码主要是参数问题，修改文件cmder/config/aliases：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">l=ls --show-control-chars</div><div class=\"line\">la=ls -aF --show-control-chars</div><div class=\"line\">ll=ls -alF --show-control-chars</div><div class=\"line\">ls=ls --show-control-chars -F</div></pre></td></tr></table></figure>\n<h3 id=\"中文重叠\"><a href=\"#中文重叠\" class=\"headerlink\" title=\"中文重叠\"></a>中文重叠</h3><p>在设置中，取消<code>Main console font</code>下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。</p>\n<h3 id=\"右键打开Cmder\"><a href=\"#右键打开Cmder\" class=\"headerlink\" title=\"右键打开Cmder\"></a>右键打开Cmder</h3><p>以管理员权限运行，输入命令<code>.\\cmder.exe /REGISTER ALL</code>，在任意目录下右击就会出现<code>Cmder Here</code>，可以打开并默认切换到该目录。</p>\n<h3 id=\"退格后错位\"><a href=\"#退格后错位\" class=\"headerlink\" title=\"退格后错位\"></a>退格后错位</h3><blockquote>\n<p><a href=\"https://www.v2ex.com/member/lgh\" target=\"_blank\" rel=\"external\">lgh</a>:<br>cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。<br>现在干脆直接用 ConEmu 了。<br>来源：<a href=\"https://www.v2ex.com/t/155058\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/155058</a></p>\n</blockquote>\n<p>lgh针对问题1提出解决方法是修改提示符为$。修改方法是</p>\n<p>打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>当然，可能这些问题只是因为我没有找到对应的解决方法。</p>\n<ol>\n<li><p><del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del></p>\n</li>\n<li><p>路径补全还是没有达到zsh的效果。</p>\n</li>\n<li><p>没有快速进入某个目录的功能。</p>\n</li>\n<li><p>Cmder1.2开始需要VS<strong>2015</strong>运行库支持（丧心病狂！）</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。</p>\n","excerpt":"","more":"<h2 id=\"Cmder简介\"><a href=\"#Cmder简介\" class=\"headerlink\" title=\"Cmder简介\"></a>Cmder简介</h2><p>Cmder是一款Windows下面的终端模拟器，有了它终于能够抛弃默认的垃圾cmd界面了！</p>\n<p><img src=\"/img/cmder.png\" alt=\"Cmder\"></p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>个人很简单的使用了下，觉得有以下优点：</p>\n<ol>\n<li><p>可自定义字体，配色非常好看。</p>\n</li>\n<li><p>路径补全有所提高。</p>\n</li>\n</ol>\n<h2 id=\"使用配置\"><a href=\"#使用配置\" class=\"headerlink\" title=\"使用配置\"></a>使用配置</h2><h3 id=\"乱码\"><a href=\"#乱码\" class=\"headerlink\" title=\"乱码\"></a>乱码</h3><p>ls的乱码主要是参数问题，修改文件cmder/config/aliases：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">l=ls --show-control-chars</div><div class=\"line\">la=ls -aF --show-control-chars</div><div class=\"line\">ll=ls -alF --show-control-chars</div><div class=\"line\">ls=ls --show-control-chars -F</div></pre></td></tr></table></figure>\n<h3 id=\"中文重叠\"><a href=\"#中文重叠\" class=\"headerlink\" title=\"中文重叠\"></a>中文重叠</h3><p>在设置中，取消<code>Main console font</code>下的Monospace勾，这样中文字符（占用两个英文字符空间）就得到的了足够的空间了。</p>\n<h3 id=\"右键打开Cmder\"><a href=\"#右键打开Cmder\" class=\"headerlink\" title=\"右键打开Cmder\"></a>右键打开Cmder</h3><p>以管理员权限运行，输入命令<code>.\\cmder.exe /REGISTER ALL</code>，在任意目录下右击就会出现<code>Cmder Here</code>，可以打开并默认切换到该目录。</p>\n<h3 id=\"退格后错位\"><a href=\"#退格后错位\" class=\"headerlink\" title=\"退格后错位\"></a>退格后错位</h3><blockquote>\n<p><a href=\"https://www.v2ex.com/member/lgh\">lgh</a>:<br>cmder 功能强大，但是反应较慢，经常卡住半天才反应；默认的命令提示符 λ 还会导致在用 TAB 还是 BACKSPACE 之后字符错位（自己改配置换成 $ 后就不会）。<br>现在干脆直接用 ConEmu 了。<br>来源：<a href=\"https://www.v2ex.com/t/155058\">https://www.v2ex.com/t/155058</a></p>\n</blockquote>\n<p>lgh针对问题1提出解决方法是修改提示符为$。修改方法是</p>\n<p>打开文件config/prompt.lua，将第二行中的λ修改为Linux下常用的$</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>当然，可能这些问题只是因为我没有找到对应的解决方法。</p>\n<ol>\n<li><p><del>有时候会出现无法删除第一个字符的情况（实际已经删除了）。</del></p>\n</li>\n<li><p>路径补全还是没有达到zsh的效果。</p>\n</li>\n<li><p>没有快速进入某个目录的功能。</p>\n</li>\n<li><p>Cmder1.2开始需要VS<strong>2015</strong>运行库支持（丧心病狂！）</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在只是刚开始使用，很多功能还是在摸索中，如果有更多的体会，会继续更新。</p>\n"},{"title":"个人通用设置","date":"2015-05-24T10:17:25.000Z","_content":"\n## 系统基础设置\n\n### 字体\n\n利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是[雅黑-Consolas混合字体，2008年5月22日更新~](http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html)，貌似很少有贴作者信息的。\n\n## 常用软件\n\n### Total Commander\n\n文件夹命名使用\"数字+中文拼音首字母+中文描述\"，Ctrl+Q快速预览文件\n\n### CCleaner\n\n### Altrun/ALMRun\n\n快速启动软件，前者好长时间没有更新了，可以使用后者替代\n\n### Everything\n\n不解释\n\n### KeyTweak\n\n用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。\n\n## 编辑工具\n\n### Vim\n\n使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。\n\n### Notepad++\n\n用于替代记事本的轻量级编辑器\n\n### Sublime Text\n\n有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim\n\n## 编程工具\n\n### Visual Studio 2013\n\n基本设置：选择深色主题，开启多处理器编译，开启行号\n\n常用插件：\n\n* Visual Assist X: 不解释\n\n注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe`指定实际路径。这有可能是绿色版导致的。\n\n参考http://tunps.com/newest-vax-support-on-vc-6\n\n* VsVim: 我是VIM党\n\n* Disable Mouse Wheel Zoom: 禁用滚轮缩放代码\n\n* TroutZoom: 固定代码缩放比率\n\n### Eclipse设置\n\n基本设置：开启行号\n\n常用插件：\n\n* Eclipse Color Theme: 配色很重要\n\n* viPlugin: 我是Vim党\n\n","source":"_posts/Common.md","raw":"title: \"个人通用设置\"\ndate: 2015-05-24 18:17:25\ntags:\n---\n\n## 系统基础设置\n\n### 字体\n\n利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是[雅黑-Consolas混合字体，2008年5月22日更新~](http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html)，貌似很少有贴作者信息的。\n\n## 常用软件\n\n### Total Commander\n\n文件夹命名使用\"数字+中文拼音首字母+中文描述\"，Ctrl+Q快速预览文件\n\n### CCleaner\n\n### Altrun/ALMRun\n\n快速启动软件，前者好长时间没有更新了，可以使用后者替代\n\n### Everything\n\n不解释\n\n### KeyTweak\n\n用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。\n\n## 编辑工具\n\n### Vim\n\n使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。\n\n### Notepad++\n\n用于替代记事本的轻量级编辑器\n\n### Sublime Text\n\n有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim\n\n## 编程工具\n\n### Visual Studio 2013\n\n基本设置：选择深色主题，开启多处理器编译，开启行号\n\n常用插件：\n\n* Visual Assist X: 不解释\n\n注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe`指定实际路径。这有可能是绿色版导致的。\n\n参考http://tunps.com/newest-vax-support-on-vc-6\n\n* VsVim: 我是VIM党\n\n* Disable Mouse Wheel Zoom: 禁用滚轮缩放代码\n\n* TroutZoom: 固定代码缩放比率\n\n### Eclipse设置\n\n基本设置：开启行号\n\n常用插件：\n\n* Eclipse Color Theme: 配色很重要\n\n* viPlugin: 我是Vim党\n\n","slug":"Common","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngj0001qhfygf6oe20w","content":"<h2 id=\"系统基础设置\"><a href=\"#系统基础设置\" class=\"headerlink\" title=\"系统基础设置\"></a>系统基础设置</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是<a href=\"http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html\" target=\"_blank\" rel=\"external\">雅黑-Consolas混合字体，2008年5月22日更新~</a>，貌似很少有贴作者信息的。</p>\n<h2 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h2><h3 id=\"Total-Commander\"><a href=\"#Total-Commander\" class=\"headerlink\" title=\"Total Commander\"></a>Total Commander</h3><p>文件夹命名使用”数字+中文拼音首字母+中文描述”，Ctrl+Q快速预览文件</p>\n<h3 id=\"CCleaner\"><a href=\"#CCleaner\" class=\"headerlink\" title=\"CCleaner\"></a>CCleaner</h3><h3 id=\"Altrun-ALMRun\"><a href=\"#Altrun-ALMRun\" class=\"headerlink\" title=\"Altrun/ALMRun\"></a>Altrun/ALMRun</h3><p>快速启动软件，前者好长时间没有更新了，可以使用后者替代</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>不解释</p>\n<h3 id=\"KeyTweak\"><a href=\"#KeyTweak\" class=\"headerlink\" title=\"KeyTweak\"></a>KeyTweak</h3><p>用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。</p>\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><h3 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h3><p>使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。</p>\n<h3 id=\"Notepad\"><a href=\"#Notepad\" class=\"headerlink\" title=\"Notepad++\"></a>Notepad++</h3><p>用于替代记事本的轻量级编辑器</p>\n<h3 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h3><p>有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim</p>\n<h2 id=\"编程工具\"><a href=\"#编程工具\" class=\"headerlink\" title=\"编程工具\"></a>编程工具</h2><h3 id=\"Visual-Studio-2013\"><a href=\"#Visual-Studio-2013\" class=\"headerlink\" title=\"Visual Studio 2013\"></a>Visual Studio 2013</h3><p>基本设置：选择深色主题，开启多处理器编译，开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li>Visual Assist X: 不解释</li>\n</ul>\n<p>注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe</code>指定实际路径。这有可能是绿色版导致的。</p>\n<p>参考<a href=\"http://tunps.com/newest-vax-support-on-vc-6\" target=\"_blank\" rel=\"external\">http://tunps.com/newest-vax-support-on-vc-6</a></p>\n<ul>\n<li><p>VsVim: 我是VIM党</p>\n</li>\n<li><p>Disable Mouse Wheel Zoom: 禁用滚轮缩放代码</p>\n</li>\n<li><p>TroutZoom: 固定代码缩放比率</p>\n</li>\n</ul>\n<h3 id=\"Eclipse设置\"><a href=\"#Eclipse设置\" class=\"headerlink\" title=\"Eclipse设置\"></a>Eclipse设置</h3><p>基本设置：开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li><p>Eclipse Color Theme: 配色很重要</p>\n</li>\n<li><p>viPlugin: 我是Vim党</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"系统基础设置\"><a href=\"#系统基础设置\" class=\"headerlink\" title=\"系统基础设置\"></a>系统基础设置</h2><h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>利用MacType渲染字体，一直比较喜欢使用系统默认的雅黑字体，有人对雅黑字体进行了修改，将其和Consolas结合优化。作者时RobertLee，原文链接是<a href=\"http://www.cnblogs.com/RobertLee/archive/2006/12/25/602646.html\">雅黑-Consolas混合字体，2008年5月22日更新~</a>，貌似很少有贴作者信息的。</p>\n<h2 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h2><h3 id=\"Total-Commander\"><a href=\"#Total-Commander\" class=\"headerlink\" title=\"Total Commander\"></a>Total Commander</h3><p>文件夹命名使用”数字+中文拼音首字母+中文描述”，Ctrl+Q快速预览文件</p>\n<h3 id=\"CCleaner\"><a href=\"#CCleaner\" class=\"headerlink\" title=\"CCleaner\"></a>CCleaner</h3><h3 id=\"Altrun-ALMRun\"><a href=\"#Altrun-ALMRun\" class=\"headerlink\" title=\"Altrun/ALMRun\"></a>Altrun/ALMRun</h3><p>快速启动软件，前者好长时间没有更新了，可以使用后者替代</p>\n<h3 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a>Everything</h3><p>不解释</p>\n<h3 id=\"KeyTweak\"><a href=\"#KeyTweak\" class=\"headerlink\" title=\"KeyTweak\"></a>KeyTweak</h3><p>用于将CapsLock键和右Ctrl键交换，将Ctrl键放到更加容易接触到的位置。</p>\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><h3 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h3><p>使用spf-13配置，比较方便，虽然同时也会有很多坑，需要自己慢慢修改。但是插件无法后台运行，因此速度比较慢。</p>\n<h3 id=\"Notepad\"><a href=\"#Notepad\" class=\"headerlink\" title=\"Notepad++\"></a>Notepad++</h3><p>用于替代记事本的轻量级编辑器</p>\n<h3 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h3><p>有Vim模式，运行速度相对VIM快，但是编码比较头疼，在Windows下面我会用来替代Vim</p>\n<h2 id=\"编程工具\"><a href=\"#编程工具\" class=\"headerlink\" title=\"编程工具\"></a>编程工具</h2><h3 id=\"Visual-Studio-2013\"><a href=\"#Visual-Studio-2013\" class=\"headerlink\" title=\"Visual Studio 2013\"></a>Visual Studio 2013</h3><p>基本设置：选择深色主题，开启多处理器编译，开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li>Visual Assist X: 不解释</li>\n</ul>\n<p>注：Visual Assist X最新版无法直接搜索到VC6的安装路径，需要在注册表中<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msdev.exe</code>指定实际路径。这有可能是绿色版导致的。</p>\n<p>参考<a href=\"http://tunps.com/newest-vax-support-on-vc-6\">http://tunps.com/newest-vax-support-on-vc-6</a></p>\n<ul>\n<li><p>VsVim: 我是VIM党</p>\n</li>\n<li><p>Disable Mouse Wheel Zoom: 禁用滚轮缩放代码</p>\n</li>\n<li><p>TroutZoom: 固定代码缩放比率</p>\n</li>\n</ul>\n<h3 id=\"Eclipse设置\"><a href=\"#Eclipse设置\" class=\"headerlink\" title=\"Eclipse设置\"></a>Eclipse设置</h3><p>基本设置：开启行号</p>\n<p>常用插件：</p>\n<ul>\n<li><p>Eclipse Color Theme: 配色很重要</p>\n</li>\n<li><p>viPlugin: 我是Vim党</p>\n</li>\n</ul>\n"},{"title":"Hello World","date":"2014-11-20T14:19:23.000Z","_content":"\n这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。\n\n## 为什么使用Github发表博客\n\n原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。\n\n之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。\n\n写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。\n\n我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。\n\n## 搭建Hexo\n\n### Github设置\n\n[Github Page](https://pages.github.com/)支持两种格式的静态页面:\n\n1. User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是http://username.github.io\n\n2. Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是http://username.github.io/repository\n\n当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。\n\n因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。\n\n注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：\n\n> public/       #Hexo生成的静态页面目录\n> node_modules/ #node模块安装目录\n\n### Git命令\n\n以下是创建仓库时的一些命令：\n\n`git config --global user.name 用户名`：设置用户名\n\n`git config --global user.email 邮箱`：设置邮箱\n\n`git branche source`：创建source分支\n\n`git checkout source`： 检出source分支\n\n`git checkout [file]`：回滚某个文件\n\n`git fetch origin`：升级仓库\n\n`git push origin source`或者`git push origin source:source`：将本地source分支推送到origin仓库的source分支中\n\n## 写作\n\n用Markdown语法写作，非常轻松\n\n### 添加照片\n\n将照片放到source/img文件夹内，然后使用 `![图片标题](/img/图片名称)`来显示\n\n### 额外功能\n\n除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。\n\n## 博客发表\n\n`hexo n <title>`：发布博客\n\n`hexo g`：生成博客\n\n`hexo p`： 推送到github上\n\n## 2015-03-16更新\n\n昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由`hexo`变成了`hexo-cli`，估计应该是版本升级有所变动。\n\n在重新安装完毕后，却又发现没有了之前的`clean deploy`等指令，重新新建了一个空的工程，对比了下package.json，才发现`hexo`的各种`generator`、`render`都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行`cnpm install`之后，再次敲入`hexo`帮助，发现已经有了各种额外的指令。\n\n当一切都搞定后，才回过神来要去看下官网的[3.0 Changelog](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0)，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的[迁移指南](http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?)，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。\n\n最后思考了下，认为这种做法的优点是：\n\n1. 框架与实现分离：剥离全局共用的指令（`-cli`库），`-cli`只提供最基本的功能，安装额外功能后，才具备额外功能。\n\n2. 实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。\n\n3. 减少了全局需要安装的内容\n\n## Todo\n\n<del>最好利用Github的教育优惠注册一个me域名</del>\n\n修改主题风格，添加一些插件等等\n","source":"_posts/Hello-World.md","raw":"title: Hello World\ndate: 2014-11-20 22:19:23\ntags:\n---\n\n这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。\n\n## 为什么使用Github发表博客\n\n原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。\n\n之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。\n\n写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。\n\n我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。\n\n## 搭建Hexo\n\n### Github设置\n\n[Github Page](https://pages.github.com/)支持两种格式的静态页面:\n\n1. User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是http://username.github.io\n\n2. Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是http://username.github.io/repository\n\n当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。\n\n因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。\n\n注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：\n\n> public/       #Hexo生成的静态页面目录\n> node_modules/ #node模块安装目录\n\n### Git命令\n\n以下是创建仓库时的一些命令：\n\n`git config --global user.name 用户名`：设置用户名\n\n`git config --global user.email 邮箱`：设置邮箱\n\n`git branche source`：创建source分支\n\n`git checkout source`： 检出source分支\n\n`git checkout [file]`：回滚某个文件\n\n`git fetch origin`：升级仓库\n\n`git push origin source`或者`git push origin source:source`：将本地source分支推送到origin仓库的source分支中\n\n## 写作\n\n用Markdown语法写作，非常轻松\n\n### 添加照片\n\n将照片放到source/img文件夹内，然后使用 `![图片标题](/img/图片名称)`来显示\n\n### 额外功能\n\n除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。\n\n## 博客发表\n\n`hexo n <title>`：发布博客\n\n`hexo g`：生成博客\n\n`hexo p`： 推送到github上\n\n## 2015-03-16更新\n\n昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由`hexo`变成了`hexo-cli`，估计应该是版本升级有所变动。\n\n在重新安装完毕后，却又发现没有了之前的`clean deploy`等指令，重新新建了一个空的工程，对比了下package.json，才发现`hexo`的各种`generator`、`render`都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行`cnpm install`之后，再次敲入`hexo`帮助，发现已经有了各种额外的指令。\n\n当一切都搞定后，才回过神来要去看下官网的[3.0 Changelog](https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0)，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的[迁移指南](http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?)，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。\n\n最后思考了下，认为这种做法的优点是：\n\n1. 框架与实现分离：剥离全局共用的指令（`-cli`库），`-cli`只提供最基本的功能，安装额外功能后，才具备额外功能。\n\n2. 实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。\n\n3. 减少了全局需要安装的内容\n\n## Todo\n\n<del>最好利用Github的教育优惠注册一个me域名</del>\n\n修改主题风格，添加一些插件等等\n","slug":"Hello-World","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngo0002qhfy7eu68m6d","content":"<p>这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。</p>\n<h2 id=\"为什么使用Github发表博客\"><a href=\"#为什么使用Github发表博客\" class=\"headerlink\" title=\"为什么使用Github发表博客\"></a>为什么使用Github发表博客</h2><p>原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。</p>\n<p>之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。</p>\n<p>写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。</p>\n<p>我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。</p>\n<h2 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h2><h3 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h3><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Page</a>支持两种格式的静态页面:</p>\n<ol>\n<li><p>User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是<a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a></p>\n</li>\n<li><p>Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是<a href=\"http://username.github.io/repository\" target=\"_blank\" rel=\"external\">http://username.github.io/repository</a></p>\n</li>\n</ol>\n<p>当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。</p>\n<p>因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。</p>\n<p>注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：</p>\n<blockquote>\n<p>public/       #Hexo生成的静态页面目录<br>node_modules/ #node模块安装目录</p>\n</blockquote>\n<h3 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h3><p>以下是创建仓库时的一些命令：</p>\n<p><code>git config --global user.name 用户名</code>：设置用户名</p>\n<p><code>git config --global user.email 邮箱</code>：设置邮箱</p>\n<p><code>git branche source</code>：创建source分支</p>\n<p><code>git checkout source</code>： 检出source分支</p>\n<p><code>git checkout [file]</code>：回滚某个文件</p>\n<p><code>git fetch origin</code>：升级仓库</p>\n<p><code>git push origin source</code>或者<code>git push origin source:source</code>：将本地source分支推送到origin仓库的source分支中</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>用Markdown语法写作，非常轻松</p>\n<h3 id=\"添加照片\"><a href=\"#添加照片\" class=\"headerlink\" title=\"添加照片\"></a>添加照片</h3><p>将照片放到source/img文件夹内，然后使用 <code>![图片标题](/img/图片名称)</code>来显示</p>\n<h3 id=\"额外功能\"><a href=\"#额外功能\" class=\"headerlink\" title=\"额外功能\"></a>额外功能</h3><p>除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。</p>\n<h2 id=\"博客发表\"><a href=\"#博客发表\" class=\"headerlink\" title=\"博客发表\"></a>博客发表</h2><p><code>hexo n &lt;title&gt;</code>：发布博客</p>\n<p><code>hexo g</code>：生成博客</p>\n<p><code>hexo p</code>： 推送到github上</p>\n<h2 id=\"2015-03-16更新\"><a href=\"#2015-03-16更新\" class=\"headerlink\" title=\"2015-03-16更新\"></a>2015-03-16更新</h2><p>昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由<code>hexo</code>变成了<code>hexo-cli</code>，估计应该是版本升级有所变动。</p>\n<p>在重新安装完毕后，却又发现没有了之前的<code>clean deploy</code>等指令，重新新建了一个空的工程，对比了下package.json，才发现<code>hexo</code>的各种<code>generator</code>、<code>render</code>都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行<code>cnpm install</code>之后，再次敲入<code>hexo</code>帮助，发现已经有了各种额外的指令。</p>\n<p>当一切都搞定后，才回过神来要去看下官网的<a href=\"https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\" target=\"_blank\" rel=\"external\">3.0 Changelog</a>，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的<a href=\"http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?\" target=\"_blank\" rel=\"external\">迁移指南</a>，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。</p>\n<p>最后思考了下，认为这种做法的优点是：</p>\n<ol>\n<li><p>框架与实现分离：剥离全局共用的指令（<code>-cli</code>库），<code>-cli</code>只提供最基本的功能，安装额外功能后，才具备额外功能。</p>\n</li>\n<li><p>实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。</p>\n</li>\n<li><p>减少了全局需要安装的内容</p>\n</li>\n</ol>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><p><del>最好利用Github的教育优惠注册一个me域名</del></p>\n<p>修改主题风格，添加一些插件等等</p>\n","excerpt":"","more":"<p>这是我第二次使用github来发表博客。第一次的用户名暴露了太多，因此就使用了新的用户名:S0urceC0der，比较装逼吧，呵呵。</p>\n<h2 id=\"为什么使用Github发表博客\"><a href=\"#为什么使用Github发表博客\" class=\"headerlink\" title=\"为什么使用Github发表博客\"></a>为什么使用Github发表博客</h2><p>原因其实很简单，目前还没有心思打理一个主机，一般的博客网站编辑起来也比较麻烦，而Github提供了相当不错的静态网站访问功能。</p>\n<p>之前自己曾短暂的使用jekyll在Github上搭建博客，但是因为jekyll是Ruby写的，自己心里多多少少有所抵触，最终也没有坚持下来。而现在使用的Hexo，因为是Node写得，之前曾经使用过一阵，因此也比较亲切，看着各种主题也比较多，够酷够帅，也不用太折腾，就使用上了。</p>\n<p>写博客主要使用Markdown，一直以来都写的比较顺手，语法足够简单，真的是能够让人专注于内容写作，不用操心排版（虽然有时候要选择一个比较好的渲染邀请）。加上各种完美的字体与排版，比Word好多了，让人舒心。恐怕未来很长一段时间内，都是我写作的主要工具吧。</p>\n<p>我也会把以前的几篇文章，逐步转移到现在的这个博客上的，算是增加点内容吧。</p>\n<h2 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h2><h3 id=\"Github设置\"><a href=\"#Github设置\" class=\"headerlink\" title=\"Github设置\"></a>Github设置</h3><p><a href=\"https://pages.github.com/\">Github Page</a>支持两种格式的静态页面:</p>\n<ol>\n<li><p>User Site: 仓库名称为username.github.io，其中username是你自己的用户名，主要用于个人的博客页面，页面数据存放在主干上。对应的访问页面就是<a href=\"http://username.github.io\">http://username.github.io</a></p>\n</li>\n<li><p>Project Site: 在指定的仓库下新建gh-pages分支存储页面，主要用于对某个项目的网页描述，对应的访问页面是<a href=\"http://username.github.io/repository\">http://username.github.io/repository</a></p>\n</li>\n</ol>\n<p>当然，我的目标是个人博客，因此就新建了与用户名相同的个人仓库，并在主干上存放对应的静态页面文件。</p>\n<p>因为使用了Hexo生成静态页面，所以额外新建Source分支用于存储源代码（Hexo的工程），这样便可以在不同电脑随时随地检出进行修改，也实现了远程的文件备份。</p>\n<p>注意需要在本地的gitignore添加如下内容，以便不上传无用的文件内容：</p>\n<blockquote>\n<p>public/       #Hexo生成的静态页面目录<br>node_modules/ #node模块安装目录</p>\n</blockquote>\n<h3 id=\"Git命令\"><a href=\"#Git命令\" class=\"headerlink\" title=\"Git命令\"></a>Git命令</h3><p>以下是创建仓库时的一些命令：</p>\n<p><code>git config --global user.name 用户名</code>：设置用户名</p>\n<p><code>git config --global user.email 邮箱</code>：设置邮箱</p>\n<p><code>git branche source</code>：创建source分支</p>\n<p><code>git checkout source</code>： 检出source分支</p>\n<p><code>git checkout [file]</code>：回滚某个文件</p>\n<p><code>git fetch origin</code>：升级仓库</p>\n<p><code>git push origin source</code>或者<code>git push origin source:source</code>：将本地source分支推送到origin仓库的source分支中</p>\n<h2 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h2><p>用Markdown语法写作，非常轻松</p>\n<h3 id=\"添加照片\"><a href=\"#添加照片\" class=\"headerlink\" title=\"添加照片\"></a>添加照片</h3><p>将照片放到source/img文件夹内，然后使用 <code>![图片标题](/img/图片名称)</code>来显示</p>\n<h3 id=\"额外功能\"><a href=\"#额外功能\" class=\"headerlink\" title=\"额外功能\"></a>额外功能</h3><p>除了标准的Markdown语法以外，还有新增了不少新的语法特性，这些语法特性，可以增强显示内容。</p>\n<h2 id=\"博客发表\"><a href=\"#博客发表\" class=\"headerlink\" title=\"博客发表\"></a>博客发表</h2><p><code>hexo n &lt;title&gt;</code>：发布博客</p>\n<p><code>hexo g</code>：生成博客</p>\n<p><code>hexo p</code>： 推送到github上</p>\n<h2 id=\"2015-03-16更新\"><a href=\"#2015-03-16更新\" class=\"headerlink\" title=\"2015-03-16更新\"></a>2015-03-16更新</h2><p>昨天更新了一些软件，结果发现hexo生成的index.html是没有完全渲染过的，即仅包含ejs模板代码，几经搜索不知其解，便想着重装hexo，结果跑到官网一看，已经把包由<code>hexo</code>变成了<code>hexo-cli</code>，估计应该是版本升级有所变动。</p>\n<p>在重新安装完毕后，却又发现没有了之前的<code>clean deploy</code>等指令，重新新建了一个空的工程，对比了下package.json，才发现<code>hexo</code>的各种<code>generator</code>、<code>render</code>都已经剥离了，必须重新安装到当前目录下才行。最终，覆盖了原来的package.json，运行<code>cnpm install</code>之后，再次敲入<code>hexo</code>帮助，发现已经有了各种额外的指令。</p>\n<p>当一切都搞定后，才回过神来要去看下官网的<a href=\"https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0\">3.0 Changelog</a>，的确在3.0版本中，更换了命令行，并进行了很多优化。文档中也提供了对应的<a href=\"http://hexo.io/news/2015/03/05/hexo-3-0-released/#How_to_Update?\">迁移指南</a>，自己还是过于懒惰不喜欢看文档，走了不该走的弯路。</p>\n<p>最后思考了下，认为这种做法的优点是：</p>\n<ol>\n<li><p>框架与实现分离：剥离全局共用的指令（<code>-cli</code>库），<code>-cli</code>只提供最基本的功能，安装额外功能后，才具备额外功能。</p>\n</li>\n<li><p>实现在不同版本间的共存：只需要在package.json文件中指定具体版本即可。</p>\n</li>\n<li><p>减少了全局需要安装的内容</p>\n</li>\n</ol>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><p><del>最好利用Github的教育优惠注册一个me域名</del></p>\n<p>修改主题风格，添加一些插件等等</p>\n"},{"title":"Cuckoo代码学习一","date":"2015-06-13T12:18:40.000Z","_content":"\n## 虚拟机监控部分\n\nAgent\n\n主要功能：\n\n使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。\n\ndll注入\n\n使用了远程DLL注入技术，\n\n参考文档[远程DLL注入技术](http://www.programlife.net/remote-thread-dll-injection.html)\n\n监控\n","source":"_posts/Cuckoo-1.md","raw":"title: \"Cuckoo代码学习一\"\ndate: 2015-06-13 20:18:40\ntags:\n---\n\n## 虚拟机监控部分\n\nAgent\n\n主要功能：\n\n使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。\n\ndll注入\n\n使用了远程DLL注入技术，\n\n参考文档[远程DLL注入技术](http://www.programlife.net/remote-thread-dll-injection.html)\n\n监控\n","slug":"Cuckoo-1","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngq0003qhfydb1r2gaf","content":"<h2 id=\"虚拟机监控部分\"><a href=\"#虚拟机监控部分\" class=\"headerlink\" title=\"虚拟机监控部分\"></a>虚拟机监控部分</h2><p>Agent</p>\n<p>主要功能：</p>\n<p>使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。</p>\n<p>dll注入</p>\n<p>使用了远程DLL注入技术，</p>\n<p>参考文档<a href=\"http://www.programlife.net/remote-thread-dll-injection.html\" target=\"_blank\" rel=\"external\">远程DLL注入技术</a></p>\n<p>监控</p>\n","excerpt":"","more":"<h2 id=\"虚拟机监控部分\"><a href=\"#虚拟机监控部分\" class=\"headerlink\" title=\"虚拟机监控部分\"></a>虚拟机监控部分</h2><p>Agent</p>\n<p>主要功能：</p>\n<p>使用SimpleXMLRPCServer建立一个服务器监听Cuckoo发送的数据。</p>\n<p>dll注入</p>\n<p>使用了远程DLL注入技术，</p>\n<p>参考文档<a href=\"http://www.programlife.net/remote-thread-dll-injection.html\">远程DLL注入技术</a></p>\n<p>监控</p>\n"},{"title":"Node开发","date":"2014-12-12T07:26:22.000Z","_content":"\n\n本文的主要内容：使用Node Coffee-script开发一个网站\n\n#### Mongoose\n\n注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考[Mongoose在创建Model时对Collection的命名策略](http://aiilive.blog.51cto.com/1925756/1405203)\n\n解决方法是在创建Model的时候传入第三个参数作为实际的表名\n\n在查询中，还发现在查询大量数据的时候会出现`Error: parseError occured`的错误提示，相关的错误可以参看[MongoDB parseError when using limit and sort](https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort)，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下\n\n","source":"_posts/Node-Development.md","raw":"title: Node开发\ndate: 2014-12-12 15:26:22\ntags:\n---\n\n\n本文的主要内容：使用Node Coffee-script开发一个网站\n\n#### Mongoose\n\n注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考[Mongoose在创建Model时对Collection的命名策略](http://aiilive.blog.51cto.com/1925756/1405203)\n\n解决方法是在创建Model的时候传入第三个参数作为实际的表名\n\n在查询中，还发现在查询大量数据的时候会出现`Error: parseError occured`的错误提示，相关的错误可以参看[MongoDB parseError when using limit and sort](https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort)，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下\n\n","slug":"Node-Development","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngs0004qhfyseos9mxl","content":"<p>本文的主要内容：使用Node Coffee-script开发一个网站</p>\n<h4 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h4><p>注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考<a href=\"http://aiilive.blog.51cto.com/1925756/1405203\" target=\"_blank\" rel=\"external\">Mongoose在创建Model时对Collection的命名策略</a></p>\n<p>解决方法是在创建Model的时候传入第三个参数作为实际的表名</p>\n<p>在查询中，还发现在查询大量数据的时候会出现<code>Error: parseError occured</code>的错误提示，相关的错误可以参看<a href=\"https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort\" target=\"_blank\" rel=\"external\">MongoDB parseError when using limit and sort</a>，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下</p>\n","excerpt":"","more":"<p>本文的主要内容：使用Node Coffee-script开发一个网站</p>\n<h4 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose\"></a>Mongoose</h4><p>注意，Mongoose会对输入的Collection名字自动添加复数形式命名后存入到Mongodb中，例如user重命名为表users，具体的命名方法可以参考<a href=\"http://aiilive.blog.51cto.com/1925756/1405203\">Mongoose在创建Model时对Collection的命名策略</a></p>\n<p>解决方法是在创建Model的时候传入第三个参数作为实际的表名</p>\n<p>在查询中，还发现在查询大量数据的时候会出现<code>Error: parseError occured</code>的错误提示，相关的错误可以参看<a href=\"https://stackoverflow.com/questions/21767673/mongodb-parseerror-when-using-limit-and-sort\">MongoDB parseError when using limit and sort</a>，大意是缺少索引，但是我明明已经添加了相关的索引的，不知道如何去解决，故改用Mongodb试下</p>\n"},{"title":"Arch Linux安装教程","date":"2014-11-22T14:29:33.000Z","_content":"\n## 缘起\n\n最早接触Arch Linux是在[@layerssss](https://github.com/layerssss/)推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：\n\n- 软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。\n\n- 软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。\n\n- 软件非常丰富：加上aur库，基本能够包含各种的软件了。\n\n这些优点也对应了一些缺点\n\n- 经常会出现最新软件依赖问题导致无法更新\n\n- 各种配置特别容易出错。\n\n## 安装过程\n\n之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。\n\n### 安装基本环境\n\n刻录一个Arch Linux启动U盘，然后引导进入后，主要参考[Wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))来进行安装，安装步骤基本一致，需要注意的地方如下\n\n0. 通用恢复方案\n\n貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。\n\n1. Wifi连接\n\n安装过程中全程使用Wifi进行连接，直接使用`wifi-menu`进行每次的连接，但是安装完新系统后，还需要额外安装`dialog`和`wpa_supplicant`\n\n### 显卡驱动问题\n\n这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经[不再被官方支持](https://www.archlinux.org/news/nvidia-340xx-and-nvidia/)，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。\n\n安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何[切换Nouveau和Nvidia](https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers)，但是实际切换的时候没有成功。\n\n安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。\n\n### 分区挂载\n\nLive CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载\n\n需要安装[ntfs-3g](https://wiki.archlinux.org/index.php/NTFS-3G)，并利用其进行挂载，并手工修改对应的fstab文件\n\n### 字体渲染\n\nArch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。\n\n为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。\n\n我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的[字体配置Wiki](https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29)，生成一个默认的配置文件。然后进入[在线字体配置](http://wenq.org/cloud/fcdesigner_local.html)选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，\n\n## 总结\n\n以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。\n\n## 其他问题\n\n1. Arch Linux Wiki最近访问不稳定，时不时的无法访问。\n\n2. Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。\n\n3. 字体渲染仍然要进一步优化。\n\n发现有一个网页[一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 ](http://www.lulinux.com/archives/278)可以参考一下。\n\n## 更新\n\n#### [2015-01-03]\n\n更新系统时，遇到错误\n\n> 错误：无法准备事务处理 (无法满足依赖关系)\n> :: package-query: 要求 pacman<4.2\n\n后来参照文章[Archlinux 升级 pacman 时遇到的问题及其解决](http://www.cnblogs.com/ccpaging/p/4191592.html)解决\n","source":"_posts/Install-Arch-Linux.md","raw":"title: Arch Linux安装教程\ndate: 2014-11-22 22:29:33\ntags:\n---\n\n## 缘起\n\n最早接触Arch Linux是在[@layerssss](https://github.com/layerssss/)推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：\n\n- 软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。\n\n- 软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。\n\n- 软件非常丰富：加上aur库，基本能够包含各种的软件了。\n\n这些优点也对应了一些缺点\n\n- 经常会出现最新软件依赖问题导致无法更新\n\n- 各种配置特别容易出错。\n\n## 安装过程\n\n之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。\n\n### 安装基本环境\n\n刻录一个Arch Linux启动U盘，然后引导进入后，主要参考[Wiki](https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))来进行安装，安装步骤基本一致，需要注意的地方如下\n\n0. 通用恢复方案\n\n貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。\n\n1. Wifi连接\n\n安装过程中全程使用Wifi进行连接，直接使用`wifi-menu`进行每次的连接，但是安装完新系统后，还需要额外安装`dialog`和`wpa_supplicant`\n\n### 显卡驱动问题\n\n这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经[不再被官方支持](https://www.archlinux.org/news/nvidia-340xx-and-nvidia/)，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。\n\n安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何[切换Nouveau和Nvidia](https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers)，但是实际切换的时候没有成功。\n\n安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。\n\n### 分区挂载\n\nLive CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载\n\n需要安装[ntfs-3g](https://wiki.archlinux.org/index.php/NTFS-3G)，并利用其进行挂载，并手工修改对应的fstab文件\n\n### 字体渲染\n\nArch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。\n\n为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。\n\n我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的[字体配置Wiki](https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29)，生成一个默认的配置文件。然后进入[在线字体配置](http://wenq.org/cloud/fcdesigner_local.html)选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，\n\n## 总结\n\n以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。\n\n## 其他问题\n\n1. Arch Linux Wiki最近访问不稳定，时不时的无法访问。\n\n2. Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。\n\n3. 字体渲染仍然要进一步优化。\n\n发现有一个网页[一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 ](http://www.lulinux.com/archives/278)可以参考一下。\n\n## 更新\n\n#### [2015-01-03]\n\n更新系统时，遇到错误\n\n> 错误：无法准备事务处理 (无法满足依赖关系)\n> :: package-query: 要求 pacman<4.2\n\n后来参照文章[Archlinux 升级 pacman 时遇到的问题及其解决](http://www.cnblogs.com/ccpaging/p/4191592.html)解决\n","slug":"Install-Arch-Linux","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngx0005qhfyzafz4yor","content":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最早接触Arch Linux是在<a href=\"https://github.com/layerssss/\" target=\"_blank\" rel=\"external\">@layerssss</a>推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：</p>\n<ul>\n<li><p>软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。</p>\n</li>\n<li><p>软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。</p>\n</li>\n<li><p>软件非常丰富：加上aur库，基本能够包含各种的软件了。</p>\n</li>\n</ul>\n<p>这些优点也对应了一些缺点</p>\n<ul>\n<li><p>经常会出现最新软件依赖问题导致无法更新</p>\n</li>\n<li><p>各种配置特别容易出错。</p>\n</li>\n</ul>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。</p>\n<h3 id=\"安装基本环境\"><a href=\"#安装基本环境\" class=\"headerlink\" title=\"安装基本环境\"></a>安装基本环境</h3><p>刻录一个Arch Linux启动U盘，然后引导进入后，主要参考<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"external\">Wiki</a>)来进行安装，安装步骤基本一致，需要注意的地方如下</p>\n<ol>\n<li>通用恢复方案</li>\n</ol>\n<p>貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。</p>\n<ol>\n<li>Wifi连接</li>\n</ol>\n<p>安装过程中全程使用Wifi进行连接，直接使用<code>wifi-menu</code>进行每次的连接，但是安装完新系统后，还需要额外安装<code>dialog</code>和<code>wpa_supplicant</code></p>\n<h3 id=\"显卡驱动问题\"><a href=\"#显卡驱动问题\" class=\"headerlink\" title=\"显卡驱动问题\"></a>显卡驱动问题</h3><p>这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经<a href=\"https://www.archlinux.org/news/nvidia-340xx-and-nvidia/\" target=\"_blank\" rel=\"external\">不再被官方支持</a>，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。</p>\n<p>安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何<a href=\"https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers\" target=\"_blank\" rel=\"external\">切换Nouveau和Nvidia</a>，但是实际切换的时候没有成功。</p>\n<p>安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。</p>\n<h3 id=\"分区挂载\"><a href=\"#分区挂载\" class=\"headerlink\" title=\"分区挂载\"></a>分区挂载</h3><p>Live CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载</p>\n<p>需要安装<a href=\"https://wiki.archlinux.org/index.php/NTFS-3G\" target=\"_blank\" rel=\"external\">ntfs-3g</a>，并利用其进行挂载，并手工修改对应的fstab文件</p>\n<h3 id=\"字体渲染\"><a href=\"#字体渲染\" class=\"headerlink\" title=\"字体渲染\"></a>字体渲染</h3><p>Arch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。</p>\n<p>为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。</p>\n<p>我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的<a href=\"https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\" target=\"_blank\" rel=\"external\">字体配置Wiki</a>，生成一个默认的配置文件。然后进入<a href=\"http://wenq.org/cloud/fcdesigner_local.html\" target=\"_blank\" rel=\"external\">在线字体配置</a>选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ol>\n<li><p>Arch Linux Wiki最近访问不稳定，时不时的无法访问。</p>\n</li>\n<li><p>Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。</p>\n</li>\n<li><p>字体渲染仍然要进一步优化。</p>\n</li>\n</ol>\n<p>发现有一个网页<a href=\"http://www.lulinux.com/archives/278\" target=\"_blank\" rel=\"external\">一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 </a>可以参考一下。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><h4 id=\"2015-01-03\"><a href=\"#2015-01-03\" class=\"headerlink\" title=\"[2015-01-03]\"></a>[2015-01-03]</h4><p>更新系统时，遇到错误</p>\n<blockquote>\n<p>错误：无法准备事务处理 (无法满足依赖关系)<br>:: package-query: 要求 pacman&lt;4.2</p>\n</blockquote>\n<p>后来参照文章<a href=\"http://www.cnblogs.com/ccpaging/p/4191592.html\" target=\"_blank\" rel=\"external\">Archlinux 升级 pacman 时遇到的问题及其解决</a>解决</p>\n","excerpt":"","more":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>最早接触Arch Linux是在<a href=\"https://github.com/layerssss/\">@layerssss</a>推荐下使用的。相比于其他的Linux系统（之前曾经用Ubuntu、Backtrack/Kali Linux）而言，有以下的特点：</p>\n<ul>\n<li><p>软件版本较新：所有的软件都进行滚动更新，基本是最新版软件，而且有很多都直接是Git包。</p>\n</li>\n<li><p>软件自定义安装：默认的系统是最精简的配置，不会有额外的东西。</p>\n</li>\n<li><p>软件非常丰富：加上aur库，基本能够包含各种的软件了。</p>\n</li>\n</ul>\n<p>这些优点也对应了一些缺点</p>\n<ul>\n<li><p>经常会出现最新软件依赖问题导致无法更新</p>\n</li>\n<li><p>各种配置特别容易出错。</p>\n</li>\n</ul>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>之前安装过Kali Linux，但是因为添加了SSD硬盘，因此电脑的分区有所变化，需要将Windows安装到SSD上。之前的Kali Linux安装在机械硬盘上，分区分的也比较小，也就想趁此机会把分区调大一点，结果在调整/分区的时候直接出错，不得不重装。</p>\n<h3 id=\"安装基本环境\"><a href=\"#安装基本环境\" class=\"headerlink\" title=\"安装基本环境\"></a>安装基本环境</h3><p>刻录一个Arch Linux启动U盘，然后引导进入后，主要参考<a href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\">Wiki</a>)来进行安装，安装步骤基本一致，需要注意的地方如下</p>\n<ol>\n<li>通用恢复方案</li>\n</ol>\n<p>貌似Arch Linux的Grub2引导菜单中没有恢复模式（抱歉不知道另外一个是什么功能），一般情况下如果有问题可以通过Live CD/USB来启动，我一开始比较笨的方法就是启动Live CD后，然后arch-chroot到对应的路径，进行系统修改操作。也可以直接进恢复模式。</p>\n<ol>\n<li>Wifi连接</li>\n</ol>\n<p>安装过程中全程使用Wifi进行连接，直接使用<code>wifi-menu</code>进行每次的连接，但是安装完新系统后，还需要额外安装<code>dialog</code>和<code>wpa_supplicant</code></p>\n<h3 id=\"显卡驱动问题\"><a href=\"#显卡驱动问题\" class=\"headerlink\" title=\"显卡驱动问题\"></a>显卡驱动问题</h3><p>这是第一个大坑，因为我的笔记本显卡是9300M GS，目前已经<a href=\"https://www.archlinux.org/news/nvidia-340xx-and-nvidia/\">不再被官方支持</a>，需要安装nvidia-340xx包。这个修改是在10月份的才发生的，因此在对应的中文Wiki并没有修改过来，直接导致多次安装仍然出问题。</p>\n<p>安装的时候最好一开始就选择安装Nvidia的私有显卡驱动，而不安装Nouveau，虽然Wiki上有如何<a href=\"https://wiki.archlinux.org/index.php/NVIDIA#Switching_between_NVIDIA_and_nouveau_drivers\">切换Nouveau和Nvidia</a>，但是实际切换的时候没有成功。</p>\n<p>安装完毕后Xorg可以安装XTerm以测试Xorg和显卡驱动是否正常。</p>\n<h3 id=\"分区挂载\"><a href=\"#分区挂载\" class=\"headerlink\" title=\"分区挂载\"></a>分区挂载</h3><p>Live CD能够正常进行挂载NTFS分区，但是如果直接在Live CD中挂载后生成为fstab，则无法直接启动挂载</p>\n<p>需要安装<a href=\"https://wiki.archlinux.org/index.php/NTFS-3G\">ntfs-3g</a>，并利用其进行挂载，并手工修改对应的fstab文件</p>\n<h3 id=\"字体渲染\"><a href=\"#字体渲染\" class=\"headerlink\" title=\"字体渲染\"></a>字体渲染</h3><p>Arch Linux的默认字体渲染极差，据说Linux上的字体渲染效果会好于Windows（显然不会好于MacType），但是需要相对复杂的调整，目前我也没有达到非常好的字体渲染效果。</p>\n<p>为了提升字体配置效果，首先要安装一些软件包，包括fontconfig-infinality。也有利用Ubuntu配置文件的一些包例如fontconfig-ubuntu-zh-cn（安装的时候密钥更新失败）。</p>\n<p>我的配置如下，Arch Linux默认没有生成字体配置文件，首先参考官方的<a href=\"https://wiki.archlinux.org/index.php/Font_Configuration_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">字体配置Wiki</a>，生成一个默认的配置文件。然后进入<a href=\"http://wenq.org/cloud/fcdesigner_local.html\">在线字体配置</a>选择一个合适的配置，我选择了DejaVu作为英文字体，文泉驿微米黑作为中文字体，</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上是安装Archlinux的安装过程，记录了遇到的主要问题，希望再次安装Arch Linux时可以依靠这个来减少搜索的花费。当然，同时也仍然有很多问题没有解决。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ol>\n<li><p>Arch Linux Wiki最近访问不稳定，时不时的无法访问。</p>\n</li>\n<li><p>Arch Linux在时间较长后进入睡眠（或者休眠？）后会出现无法进入系统的情况。</p>\n</li>\n<li><p>字体渲染仍然要进一步优化。</p>\n</li>\n</ol>\n<p>发现有一个网页<a href=\"http://www.lulinux.com/archives/278\">一条命令搞定Linux字体渲染——Ubuntu系发行版微软雅黑+宋体终极解决方案【原创推荐】 </a>可以参考一下。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><h4 id=\"2015-01-03\"><a href=\"#2015-01-03\" class=\"headerlink\" title=\"[2015-01-03]\"></a>[2015-01-03]</h4><p>更新系统时，遇到错误</p>\n<blockquote>\n<p>错误：无法准备事务处理 (无法满足依赖关系)<br>:: package-query: 要求 pacman&lt;4.2</p>\n</blockquote>\n<p>后来参照文章<a href=\"http://www.cnblogs.com/ccpaging/p/4191592.html\">Archlinux 升级 pacman 时遇到的问题及其解决</a>解决</p>\n"},{"title":"KaliLinux使用心得","date":"2015-04-12T11:33:10.000Z","_content":"\n## Kali Linux\n\nKali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。\n\n## 基本配置\n\n### 安装Linux Brew\n\n### 允许使用PPA库\n\n参考网页[Kali Linux add PPA repository add-apt-repository](http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/)\n\n## 一些常用软件\n\n### 安装Zsh、Terminator\n\n用于替换原有的bash、Gnome Terminal。\n\n### 安装VMware\n\nVmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。\n","source":"_posts/KaliLinux.md","raw":"title: \"KaliLinux使用心得\"\ndate: 2015-04-12 19:33:10\ntags: [Linux]\n---\n\n## Kali Linux\n\nKali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。\n\n## 基本配置\n\n### 安装Linux Brew\n\n### 允许使用PPA库\n\n参考网页[Kali Linux add PPA repository add-apt-repository](http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/)\n\n## 一些常用软件\n\n### 安装Zsh、Terminator\n\n用于替换原有的bash、Gnome Terminal。\n\n### 安装VMware\n\nVmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。\n","slug":"KaliLinux","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xngz0006qhfyt8abgg4x","content":"<h2 id=\"Kali-Linux\"><a href=\"#Kali-Linux\" class=\"headerlink\" title=\"Kali Linux\"></a>Kali Linux</h2><p>Kali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"安装Linux-Brew\"><a href=\"#安装Linux-Brew\" class=\"headerlink\" title=\"安装Linux Brew\"></a>安装Linux Brew</h3><h3 id=\"允许使用PPA库\"><a href=\"#允许使用PPA库\" class=\"headerlink\" title=\"允许使用PPA库\"></a>允许使用PPA库</h3><p>参考网页<a href=\"http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/\" target=\"_blank\" rel=\"external\">Kali Linux add PPA repository add-apt-repository</a></p>\n<h2 id=\"一些常用软件\"><a href=\"#一些常用软件\" class=\"headerlink\" title=\"一些常用软件\"></a>一些常用软件</h2><h3 id=\"安装Zsh、Terminator\"><a href=\"#安装Zsh、Terminator\" class=\"headerlink\" title=\"安装Zsh、Terminator\"></a>安装Zsh、Terminator</h3><p>用于替换原有的bash、Gnome Terminal。</p>\n<h3 id=\"安装VMware\"><a href=\"#安装VMware\" class=\"headerlink\" title=\"安装VMware\"></a>安装VMware</h3><p>Vmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。</p>\n","excerpt":"","more":"<h2 id=\"Kali-Linux\"><a href=\"#Kali-Linux\" class=\"headerlink\" title=\"Kali Linux\"></a>Kali Linux</h2><p>Kali是一个专门用来进行安全审计（渗透测试）的操作系统，是著名的Backtrack的后继者，由同一组开发人员开发的。Kali基于Debian系统，加入了大量的安全工具。</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"安装Linux-Brew\"><a href=\"#安装Linux-Brew\" class=\"headerlink\" title=\"安装Linux Brew\"></a>安装Linux Brew</h3><h3 id=\"允许使用PPA库\"><a href=\"#允许使用PPA库\" class=\"headerlink\" title=\"允许使用PPA库\"></a>允许使用PPA库</h3><p>参考网页<a href=\"http://www.blackmoreops.com/2014/02/21/kali-linux-add-ppa-repository-add-apt-repository/\">Kali Linux add PPA repository add-apt-repository</a></p>\n<h2 id=\"一些常用软件\"><a href=\"#一些常用软件\" class=\"headerlink\" title=\"一些常用软件\"></a>一些常用软件</h2><h3 id=\"安装Zsh、Terminator\"><a href=\"#安装Zsh、Terminator\" class=\"headerlink\" title=\"安装Zsh、Terminator\"></a>安装Zsh、Terminator</h3><p>用于替换原有的bash、Gnome Terminal。</p>\n<h3 id=\"安装VMware\"><a href=\"#安装VMware\" class=\"headerlink\" title=\"安装VMware\"></a>安装VMware</h3><p>Vmware Workstation的驱动对于不同的Linux内核版本都要进行一定的patch才能正常编译。基本上通过搜索能够获取最新需要修改的地方，然后重新打包后编译即可。</p>\n"},{"title":"Mac","date":"2015-02-15T05:03:43.000Z","_content":"\n### 起\n\n人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。\n\n是从苹果团买的，感觉顺丰陆运速度还算快。\n\n装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。\n\n### 用\n\n首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）\n\n键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。\n\n字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。\n\n### 软件\n一大堆软件都不会用。\n\n#### 常用软件\n\n登陆AppStore，进免费排行榜，下载了QQ、搜狗输入**板**，其中搜狗输入**板**的功能是通过里面的入口安装搜狗输入法。\n安装Xcode，虽然目前一次都没有打开过。\n首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的\n\n对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下\n\n`\nTo have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf\n`\n\n#### zsh\n\n具体参考Mactalk的这篇文章[终极shell](http://macshuo.com/?p=676)\n\n另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。\n","source":"_posts/Mac.md","raw":"title: Mac\ndate: 2015-02-15 13:03:43\ntags:\n---\n\n### 起\n\n人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。\n\n是从苹果团买的，感觉顺丰陆运速度还算快。\n\n装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。\n\n### 用\n\n首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）\n\n键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。\n\n字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。\n\n### 软件\n一大堆软件都不会用。\n\n#### 常用软件\n\n登陆AppStore，进免费排行榜，下载了QQ、搜狗输入**板**，其中搜狗输入**板**的功能是通过里面的入口安装搜狗输入法。\n安装Xcode，虽然目前一次都没有打开过。\n首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的\n\n对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下\n\n`\nTo have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf\n`\n\n#### zsh\n\n具体参考Mactalk的这篇文章[终极shell](http://macshuo.com/?p=676)\n\n另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。\n","slug":"Mac","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xnh00007qhfy1qgd625r","content":"<h3 id=\"起\"><a href=\"#起\" class=\"headerlink\" title=\"起\"></a>起</h3><p>人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。</p>\n<p>是从苹果团买的，感觉顺丰陆运速度还算快。</p>\n<p>装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。</p>\n<h3 id=\"用\"><a href=\"#用\" class=\"headerlink\" title=\"用\"></a>用</h3><p>首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）</p>\n<p>键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。</p>\n<p>字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>一大堆软件都不会用。</p>\n<h4 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h4><p>登陆AppStore，进免费排行榜，下载了QQ、搜狗输入<strong>板</strong>，其中搜狗输入<strong>板</strong>的功能是通过里面的入口安装搜狗输入法。<br>安装Xcode，虽然目前一次都没有打开过。<br>首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的</p>\n<p>对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下</p>\n<p><code>To have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf</code></p>\n<h4 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h4><p>具体参考Mactalk的这篇文章<a href=\"http://macshuo.com/?p=676\" target=\"_blank\" rel=\"external\">终极shell</a></p>\n<p>另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。</p>\n","excerpt":"","more":"<h3 id=\"起\"><a href=\"#起\" class=\"headerlink\" title=\"起\"></a>起</h3><p>人生中第一台Macbook pro，终于在发完年终奖后、回家过年前到手了。</p>\n<p>是从苹果团买的，感觉顺丰陆运速度还算快。</p>\n<p>装在之前的电脑包里面，就显得电脑包得空间太大，需要买个内胆包才行。</p>\n<h3 id=\"用\"><a href=\"#用\" class=\"headerlink\" title=\"用\"></a>用</h3><p>首先要学习的是触摸板手势，有了这个真心不想用鼠标了，总算能够完全使用键盘（且算触摸板为键盘的一部分吧）</p>\n<p>键盘使用起来按键声音还好，比较清脆舒服，虽然键程不长，但是感觉还行吧。的确有必要换个外置键盘。</p>\n<p>字体看的真是舒服，终于不用在Win/Linux下面费尽心思的调整字体了。</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>一大堆软件都不会用。</p>\n<h4 id=\"常用软件\"><a href=\"#常用软件\" class=\"headerlink\" title=\"常用软件\"></a>常用软件</h4><p>登陆AppStore，进免费排行榜，下载了QQ、搜狗输入<strong>板</strong>，其中搜狗输入<strong>板</strong>的功能是通过里面的入口安装搜狗输入法。<br>安装Xcode，虽然目前一次都没有打开过。<br>首先安装Homebrew，幸好最近在折腾Linuxbrew，很多操作都是一样的</p>\n<p>对于使用Homebrew安装的系统软件，如数据库等，根据提示，相关启动方法如下</p>\n<p><code>To have launchd start mongodb at login:\n    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\n    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\nOr, if you don’t want/need launchctl, you can just run:\n    mongod --config /usr/local/etc/mongod.conf\n    redis-server /usr/local/etc/redis.conf</code></p>\n<h4 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h4><p>具体参考Mactalk的这篇文章<a href=\"http://macshuo.com/?p=676\">终极shell</a></p>\n<p>另外，在使用zsh的agnoster主题时，需要额外下载增强的字体，并在终端选择使用。</p>\n"},{"title":"使用Mactype渲染字体","date":"2015-03-15T05:27:48.000Z","_content":"\nMactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。\n\n但是，\n\n\n## 字体\n\nWindows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去[极限社区](http://bbs.themex.net/forumdisplay.php?f=90)下载。该论坛也是重要的讨论字体修改和Mactype的网站。\n\n之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。\n\n## 程序优化\n\n### Firefox\n\nFirefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档[MacType.Source](https://github.com/renkun-ken/MacType.Source)\n\n打开`about:config`，修改设置如下\n\n| Key                                                      | Value |\n|----------------------------------------------------------|-------|\n| gfx.direct2d.disabled                                    | true  |\n| gfx.font_loader.delay                                    | -1    |\n| gfx.font_rendering.cleartype.always_use_for_content;true | true  |\n| gfx.font_rendering.cleartype_params.cleartype_level      | 100   |\n| gfx.font_rendering.cleartype_params.enhanced_contrast    | 100   |\n| gfx.font_rendering.cleartype_params.gamma                | 1400  |\n| gfx.font_rendering.cleartype_params.pixel_structure      | 1     |\n| gfx.font_rendering.cleartype_params.rendering_mode       | 5     |\n| gfx.font_rendering.fallback.always_use_cmaps             | true  |\n| gfx.use_text_smoothing_setting                           | true  |\n\n### VisualStudio\n\n与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。\n\n在[VS 怎么使用 MacType 的字体渲染？](http://www.zhihu.com/question/24251313)中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。\n\n所以需要使用这样特别制作的字体，从[自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype](http://tieba.baidu.com/p/3366845989)下载特别制作过的字体FantasqueSansMono字体。\n\n但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子[Visual Studio 2010 default zoom level](https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level)，固定了显示比例之后，防止不小心按了`Ctrl+滚轮`而改变了缩放，可以安装插件[Disable Mouse Wheel Zoom](https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8)，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。\n","source":"_posts/Mactype.md","raw":"title: 使用Mactype渲染字体\ndate: 2015-03-15 13:27:48\ntags:\n---\n\nMactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。\n\n但是，\n\n\n## 字体\n\nWindows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去[极限社区](http://bbs.themex.net/forumdisplay.php?f=90)下载。该论坛也是重要的讨论字体修改和Mactype的网站。\n\n之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。\n\n## 程序优化\n\n### Firefox\n\nFirefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档[MacType.Source](https://github.com/renkun-ken/MacType.Source)\n\n打开`about:config`，修改设置如下\n\n| Key                                                      | Value |\n|----------------------------------------------------------|-------|\n| gfx.direct2d.disabled                                    | true  |\n| gfx.font_loader.delay                                    | -1    |\n| gfx.font_rendering.cleartype.always_use_for_content;true | true  |\n| gfx.font_rendering.cleartype_params.cleartype_level      | 100   |\n| gfx.font_rendering.cleartype_params.enhanced_contrast    | 100   |\n| gfx.font_rendering.cleartype_params.gamma                | 1400  |\n| gfx.font_rendering.cleartype_params.pixel_structure      | 1     |\n| gfx.font_rendering.cleartype_params.rendering_mode       | 5     |\n| gfx.font_rendering.fallback.always_use_cmaps             | true  |\n| gfx.use_text_smoothing_setting                           | true  |\n\n### VisualStudio\n\n与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。\n\n在[VS 怎么使用 MacType 的字体渲染？](http://www.zhihu.com/question/24251313)中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。\n\n所以需要使用这样特别制作的字体，从[自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype](http://tieba.baidu.com/p/3366845989)下载特别制作过的字体FantasqueSansMono字体。\n\n但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子[Visual Studio 2010 default zoom level](https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level)，固定了显示比例之后，防止不小心按了`Ctrl+滚轮`而改变了缩放，可以安装插件[Disable Mouse Wheel Zoom](https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8)，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。\n","slug":"Mactype","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xnhw0009qhfy8urpc5so","content":"<p>Mactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。</p>\n<p>但是，</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Windows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去<a href=\"http://bbs.themex.net/forumdisplay.php?f=90\" target=\"_blank\" rel=\"external\">极限社区</a>下载。该论坛也是重要的讨论字体修改和Mactype的网站。</p>\n<p>之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。</p>\n<h2 id=\"程序优化\"><a href=\"#程序优化\" class=\"headerlink\" title=\"程序优化\"></a>程序优化</h2><h3 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h3><p>Firefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档<a href=\"https://github.com/renkun-ken/MacType.Source\" target=\"_blank\" rel=\"external\">MacType.Source</a></p>\n<p>打开<code>about:config</code>，修改设置如下</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gfx.direct2d.disabled</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_loader.delay</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype.always_use_for_content;true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.cleartype_level</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.enhanced_contrast</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.gamma</td>\n<td>1400</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.pixel_structure</td>\n<td>1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.rendering_mode</td>\n<td>5</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.fallback.always_use_cmaps</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.use_text_smoothing_setting</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"VisualStudio\"><a href=\"#VisualStudio\" class=\"headerlink\" title=\"VisualStudio\"></a>VisualStudio</h3><p>与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。</p>\n<p>在<a href=\"http://www.zhihu.com/question/24251313\" target=\"_blank\" rel=\"external\">VS 怎么使用 MacType 的字体渲染？</a>中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。</p>\n<p>所以需要使用这样特别制作的字体，从<a href=\"http://tieba.baidu.com/p/3366845989\" target=\"_blank\" rel=\"external\">自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype</a>下载特别制作过的字体FantasqueSansMono字体。</p>\n<p>但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子<a href=\"https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level\" target=\"_blank\" rel=\"external\">Visual Studio 2010 default zoom level</a>，固定了显示比例之后，防止不小心按了<code>Ctrl+滚轮</code>而改变了缩放，可以安装插件<a href=\"https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8\" target=\"_blank\" rel=\"external\">Disable Mouse Wheel Zoom</a>，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。</p>\n","excerpt":"","more":"<p>Mactype是在Windows下实现类似Mac下字体渲染效果的程序。长期以来，我一直都使用这个软件替代系统自带的ClearType渲染功能。渲染得到的字体相当不错。</p>\n<p>但是，</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Windows下面自带的雅黑字体效果还是挺不错的，但是还是建议使用其他修改过的字体。字体可以去<a href=\"http://bbs.themex.net/forumdisplay.php?f=90\">极限社区</a>下载。该论坛也是重要的讨论字体修改和Mactype的网站。</p>\n<p>之前用的比较多的是XHei，貌似现在出了新的字体，以后下载看下效果。</p>\n<h2 id=\"程序优化\"><a href=\"#程序优化\" class=\"headerlink\" title=\"程序优化\"></a>程序优化</h2><h3 id=\"Firefox\"><a href=\"#Firefox\" class=\"headerlink\" title=\"Firefox\"></a>Firefox</h3><p>Firefox默认开启的硬件加速，因此无法直接使用Mactype字体渲染。关于具体的设置，参考文档<a href=\"https://github.com/renkun-ken/MacType.Source\">MacType.Source</a></p>\n<p>打开<code>about:config</code>，修改设置如下</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gfx.direct2d.disabled</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_loader.delay</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype.always_use_for_content;true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.cleartype_level</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.enhanced_contrast</td>\n<td>100</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.gamma</td>\n<td>1400</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.pixel_structure</td>\n<td>1</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.cleartype_params.rendering_mode</td>\n<td>5</td>\n</tr>\n<tr>\n<td>gfx.font_rendering.fallback.always_use_cmaps</td>\n<td>true</td>\n</tr>\n<tr>\n<td>gfx.use_text_smoothing_setting</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"VisualStudio\"><a href=\"#VisualStudio\" class=\"headerlink\" title=\"VisualStudio\"></a>VisualStudio</h3><p>与Firefox一样，同样使用了硬件加速，而且偏偏没有任何设置。</p>\n<p>在<a href=\"http://www.zhihu.com/question/24251313\">VS 怎么使用 MacType 的字体渲染？</a>中提出了解决方案：对于ClearType设置为Smoothing的字体，且Visualstudio在显示比例不为100%时可以直接通过Mactype进行渲染。</p>\n<p>所以需要使用这样特别制作的字体，从<a href=\"http://tieba.baidu.com/p/3366845989\">自制FantasqueSansMono字体+VS缩放插件,完美解决VS2013+Mactype</a>下载特别制作过的字体FantasqueSansMono字体。</p>\n<p>但是默认VS都会在新开一个窗口的时候重置缩放比例，因此需要使用插件让VS保持显示比较为99%。插件可以参考帖子<a href=\"https://stackoverflow.com/questions/4771750/visual-studio-2010-default-zoom-level\">Visual Studio 2010 default zoom level</a>，固定了显示比例之后，防止不小心按了<code>Ctrl+滚轮</code>而改变了缩放，可以安装插件<a href=\"https://visualstudiogallery.msdn.microsoft.com/d088791c-150a-4834-8f28-462696a82bb8\">Disable Mouse Wheel Zoom</a>，装上了这几个插件，基本可以欣赏漂亮的字体渲染了。</p>\n"},{"title":"搭建Cuckoo沙盒测试环境","date":"2015-04-25T08:34:13.000Z","_content":"\nCuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。\n\n网站https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\n\n本文的主要内容是在Linux系统上安装Cuckoo。\n\n## 安装过程\n\n### 1. 基本运行环境\n\n* Python\n\n安装Python并根据requirements.txt中的列表直接安装所需要的python模块。\n\n* MongoDB\n\n如果想使用基于Django的网页接口，则需要安装MongoDB\n\n* 各个虚拟机的接口库\n\nKVM、XenServer的API接口\n\n### 2. 功能软件\n\n#### 安装Yara\n\nYara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。\n\nYara默认没有编译对cuckoo和magic的支持，在编译时需要加上`./configure --enable-cuckoo --enable-magic`选项。\n\n安装yara-python库，使得cuckoo能够调用yara。\n\n#### 安装ssdeep\n\nssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。\n\n#### Tcpdump\n\n用于截获数据。\n\n#### 安装cuckoo\n\ncuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。\n\n`git clone git@github.com:cuckoobox/cuckoo.git`\n\n### 3. 可选软件\n\n### Volatility\n\n这是一款分析内存dumps的工具。\n\n### 4. 安装虚拟机\n\nCuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。\n\n虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。\n\n## 配置\n\n#### cuckoo.conf\n\n[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等\n\n[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）\n\n[database]connection: 数据库连接，不填可以直接使用SQLite数据库\n\n#### auxiliary.conf\n\n主要用于监控网卡数据相关配置\n\n[sniffer]interface: 改为和虚拟机共用的网卡\n\n#### vmware.conf\n\n具体的虚拟机设置，本例中使用vmware.conf\n\nmachines: 具体的虚拟机配置，必须与下面的字段名称一致\n\nvmx_path: 表示虚拟机vmx文件的路径\n\nsnapshot: 快照名称\n\nip: 虚拟机IP地址\n\n#### processing.conf\n\n处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用\n\n#### memory.conf\n\n用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。\n\n#### reporting.conf\n\n配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中\n\n## 运行\n\n### 启动cuckoo\n\n`python2 cuckoo.py`\n\n如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。\n\n### 提交文件分析\n\n`python2 utils/submit.py [文件路径] --url [网址]`\n\n\n","source":"_posts/Sandbox.md","raw":"title: \"搭建Cuckoo沙盒测试环境\"\ndate: 2015-04-25 16:34:13\ntags:\n---\n\nCuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。\n\n网站https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\n\n本文的主要内容是在Linux系统上安装Cuckoo。\n\n## 安装过程\n\n### 1. 基本运行环境\n\n* Python\n\n安装Python并根据requirements.txt中的列表直接安装所需要的python模块。\n\n* MongoDB\n\n如果想使用基于Django的网页接口，则需要安装MongoDB\n\n* 各个虚拟机的接口库\n\nKVM、XenServer的API接口\n\n### 2. 功能软件\n\n#### 安装Yara\n\nYara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。\n\nYara默认没有编译对cuckoo和magic的支持，在编译时需要加上`./configure --enable-cuckoo --enable-magic`选项。\n\n安装yara-python库，使得cuckoo能够调用yara。\n\n#### 安装ssdeep\n\nssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。\n\n#### Tcpdump\n\n用于截获数据。\n\n#### 安装cuckoo\n\ncuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。\n\n`git clone git@github.com:cuckoobox/cuckoo.git`\n\n### 3. 可选软件\n\n### Volatility\n\n这是一款分析内存dumps的工具。\n\n### 4. 安装虚拟机\n\nCuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。\n\n虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。\n\n## 配置\n\n#### cuckoo.conf\n\n[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等\n\n[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）\n\n[database]connection: 数据库连接，不填可以直接使用SQLite数据库\n\n#### auxiliary.conf\n\n主要用于监控网卡数据相关配置\n\n[sniffer]interface: 改为和虚拟机共用的网卡\n\n#### vmware.conf\n\n具体的虚拟机设置，本例中使用vmware.conf\n\nmachines: 具体的虚拟机配置，必须与下面的字段名称一致\n\nvmx_path: 表示虚拟机vmx文件的路径\n\nsnapshot: 快照名称\n\nip: 虚拟机IP地址\n\n#### processing.conf\n\n处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用\n\n#### memory.conf\n\n用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。\n\n#### reporting.conf\n\n配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中\n\n## 运行\n\n### 启动cuckoo\n\n`python2 cuckoo.py`\n\n如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。\n\n### 提交文件分析\n\n`python2 utils/submit.py [文件路径] --url [网址]`\n\n\n","slug":"Sandbox","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xnhy000aqhfyoxz1snfu","content":"<p>Cuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。</p>\n<p>网站<a href=\"https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\" target=\"_blank\" rel=\"external\">https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。</a></p>\n<p>本文的主要内容是在Linux系统上安装Cuckoo。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"1-基本运行环境\"><a href=\"#1-基本运行环境\" class=\"headerlink\" title=\"1. 基本运行环境\"></a>1. 基本运行环境</h3><ul>\n<li>Python</li>\n</ul>\n<p>安装Python并根据requirements.txt中的列表直接安装所需要的python模块。</p>\n<ul>\n<li>MongoDB</li>\n</ul>\n<p>如果想使用基于Django的网页接口，则需要安装MongoDB</p>\n<ul>\n<li>各个虚拟机的接口库</li>\n</ul>\n<p>KVM、XenServer的API接口</p>\n<h3 id=\"2-功能软件\"><a href=\"#2-功能软件\" class=\"headerlink\" title=\"2. 功能软件\"></a>2. 功能软件</h3><h4 id=\"安装Yara\"><a href=\"#安装Yara\" class=\"headerlink\" title=\"安装Yara\"></a>安装Yara</h4><p>Yara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。</p>\n<p>Yara默认没有编译对cuckoo和magic的支持，在编译时需要加上<code>./configure --enable-cuckoo --enable-magic</code>选项。</p>\n<p>安装yara-python库，使得cuckoo能够调用yara。</p>\n<h4 id=\"安装ssdeep\"><a href=\"#安装ssdeep\" class=\"headerlink\" title=\"安装ssdeep\"></a>安装ssdeep</h4><p>ssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。</p>\n<h4 id=\"Tcpdump\"><a href=\"#Tcpdump\" class=\"headerlink\" title=\"Tcpdump\"></a>Tcpdump</h4><p>用于截获数据。</p>\n<h4 id=\"安装cuckoo\"><a href=\"#安装cuckoo\" class=\"headerlink\" title=\"安装cuckoo\"></a>安装cuckoo</h4><p>cuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。</p>\n<p><code>git clone git@github.com:cuckoobox/cuckoo.git</code></p>\n<h3 id=\"3-可选软件\"><a href=\"#3-可选软件\" class=\"headerlink\" title=\"3. 可选软件\"></a>3. 可选软件</h3><h3 id=\"Volatility\"><a href=\"#Volatility\" class=\"headerlink\" title=\"Volatility\"></a>Volatility</h3><p>这是一款分析内存dumps的工具。</p>\n<h3 id=\"4-安装虚拟机\"><a href=\"#4-安装虚拟机\" class=\"headerlink\" title=\"4. 安装虚拟机\"></a>4. 安装虚拟机</h3><p>Cuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。</p>\n<p>虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"cuckoo-conf\"><a href=\"#cuckoo-conf\" class=\"headerlink\" title=\"cuckoo.conf\"></a>cuckoo.conf</h4><p>[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等</p>\n<p>[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）</p>\n<p>[database]connection: 数据库连接，不填可以直接使用SQLite数据库</p>\n<h4 id=\"auxiliary-conf\"><a href=\"#auxiliary-conf\" class=\"headerlink\" title=\"auxiliary.conf\"></a>auxiliary.conf</h4><p>主要用于监控网卡数据相关配置</p>\n<p>[sniffer]interface: 改为和虚拟机共用的网卡</p>\n<h4 id=\"vmware-conf\"><a href=\"#vmware-conf\" class=\"headerlink\" title=\"vmware.conf\"></a>vmware.conf</h4><p>具体的虚拟机设置，本例中使用vmware.conf</p>\n<p>machines: 具体的虚拟机配置，必须与下面的字段名称一致</p>\n<p>vmx_path: 表示虚拟机vmx文件的路径</p>\n<p>snapshot: 快照名称</p>\n<p>ip: 虚拟机IP地址</p>\n<h4 id=\"processing-conf\"><a href=\"#processing-conf\" class=\"headerlink\" title=\"processing.conf\"></a>processing.conf</h4><p>处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用</p>\n<h4 id=\"memory-conf\"><a href=\"#memory-conf\" class=\"headerlink\" title=\"memory.conf\"></a>memory.conf</h4><p>用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。</p>\n<h4 id=\"reporting-conf\"><a href=\"#reporting-conf\" class=\"headerlink\" title=\"reporting.conf\"></a>reporting.conf</h4><p>配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动cuckoo\"><a href=\"#启动cuckoo\" class=\"headerlink\" title=\"启动cuckoo\"></a>启动cuckoo</h3><p><code>python2 cuckoo.py</code></p>\n<p>如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。</p>\n<h3 id=\"提交文件分析\"><a href=\"#提交文件分析\" class=\"headerlink\" title=\"提交文件分析\"></a>提交文件分析</h3><p><code>python2 utils/submit.py [文件路径] --url [网址]</code></p>\n","excerpt":"","more":"<p>Cuckoo是一款用于自动化分析恶意样本的沙箱软件。相比其他沙箱软件，Cuckoo具备强大的监控功能，能够自动将程序提交到指定的虚拟机中，并依据格式运行，同时会Hook相关的函数接口，记录下的重要的函数调用、网络访问。Cuckoo基于Python编写，通过在此基础上进行修改，可以避免重复开发，增加所需要的特殊功能。</p>\n<p>网站<a href=\"https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。\">https://malwr.com/可以认为是一个在线版的Cuckoo，国内也样相关的在线样本行为分析网站[火眼](https://fireeye.ijinshan.com/)和[文件B超](https://www.b-chao.com)，个人怀疑他们也是在Cuckoo的基础上进行修改的。</a></p>\n<p>本文的主要内容是在Linux系统上安装Cuckoo。</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"1-基本运行环境\"><a href=\"#1-基本运行环境\" class=\"headerlink\" title=\"1. 基本运行环境\"></a>1. 基本运行环境</h3><ul>\n<li>Python</li>\n</ul>\n<p>安装Python并根据requirements.txt中的列表直接安装所需要的python模块。</p>\n<ul>\n<li>MongoDB</li>\n</ul>\n<p>如果想使用基于Django的网页接口，则需要安装MongoDB</p>\n<ul>\n<li>各个虚拟机的接口库</li>\n</ul>\n<p>KVM、XenServer的API接口</p>\n<h3 id=\"2-功能软件\"><a href=\"#2-功能软件\" class=\"headerlink\" title=\"2. 功能软件\"></a>2. 功能软件</h3><h4 id=\"安装Yara\"><a href=\"#安装Yara\" class=\"headerlink\" title=\"安装Yara\"></a>安装Yara</h4><p>Yara是一款用于识别和分类恶意样本的开源工具，可以理解为是一款特征匹配工具。</p>\n<p>Yara默认没有编译对cuckoo和magic的支持，在编译时需要加上<code>./configure --enable-cuckoo --enable-magic</code>选项。</p>\n<p>安装yara-python库，使得cuckoo能够调用yara。</p>\n<h4 id=\"安装ssdeep\"><a href=\"#安装ssdeep\" class=\"headerlink\" title=\"安装ssdeep\"></a>安装ssdeep</h4><p>ssdeep能够计算一个文件的模糊哈希代码，通过计算不同样本之间的ssdeep差值，可以判断两个样本是否相近。</p>\n<h4 id=\"Tcpdump\"><a href=\"#Tcpdump\" class=\"headerlink\" title=\"Tcpdump\"></a>Tcpdump</h4><p>用于截获数据。</p>\n<h4 id=\"安装cuckoo\"><a href=\"#安装cuckoo\" class=\"headerlink\" title=\"安装cuckoo\"></a>安装cuckoo</h4><p>cuckoo居然没有在ArchLinux的软件包中，这是很神奇的一件事，所以必须手动Github下载，并且手动更新。</p>\n<p><code>git clone git@github.com:cuckoobox/cuckoo.git</code></p>\n<h3 id=\"3-可选软件\"><a href=\"#3-可选软件\" class=\"headerlink\" title=\"3. 可选软件\"></a>3. 可选软件</h3><h3 id=\"Volatility\"><a href=\"#Volatility\" class=\"headerlink\" title=\"Volatility\"></a>Volatility</h3><p>这是一款分析内存dumps的工具。</p>\n<h3 id=\"4-安装虚拟机\"><a href=\"#4-安装虚拟机\" class=\"headerlink\" title=\"4. 安装虚拟机\"></a>4. 安装虚拟机</h3><p>Cuckoo支持多种虚拟机，官方推荐使用的是VirutalBox虚拟机（应该是因为开源的缘故），其他的还支持VMware、XenServer、ESX、KVM等虚拟机（参考modules/machinery目录），个人处于使用惯性，选择了使用VMware。</p>\n<p>虚拟机内安装基本操作系统，取消防火墙，并安装Python运行环境，然后运行agent/agent.py，使得虚拟机处于等待接收参数和处理任务状态，并对此状态保存快照。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"cuckoo-conf\"><a href=\"#cuckoo-conf\" class=\"headerlink\" title=\"cuckoo.conf\"></a>cuckoo.conf</h4><p>[cuckoo]machinery: 虚拟机类型，可以填virutalbox，vmware等</p>\n<p>[resultserver]ip port: 存储结果的服务器IP，可以直接填写本机（物理机）</p>\n<p>[database]connection: 数据库连接，不填可以直接使用SQLite数据库</p>\n<h4 id=\"auxiliary-conf\"><a href=\"#auxiliary-conf\" class=\"headerlink\" title=\"auxiliary.conf\"></a>auxiliary.conf</h4><p>主要用于监控网卡数据相关配置</p>\n<p>[sniffer]interface: 改为和虚拟机共用的网卡</p>\n<h4 id=\"vmware-conf\"><a href=\"#vmware-conf\" class=\"headerlink\" title=\"vmware.conf\"></a>vmware.conf</h4><p>具体的虚拟机设置，本例中使用vmware.conf</p>\n<p>machines: 具体的虚拟机配置，必须与下面的字段名称一致</p>\n<p>vmx_path: 表示虚拟机vmx文件的路径</p>\n<p>snapshot: 快照名称</p>\n<p>ip: 虚拟机IP地址</p>\n<h4 id=\"processing-conf\"><a href=\"#processing-conf\" class=\"headerlink\" title=\"processing.conf\"></a>processing.conf</h4><p>处理样本时需要使用各种附加模块，我禁用了Virustotal。此外，如果自己添加了模块，则需要在这个文件中启用</p>\n<h4 id=\"memory-conf\"><a href=\"#memory-conf\" class=\"headerlink\" title=\"memory.conf\"></a>memory.conf</h4><p>用于Volatility处理模块，需要首先在processing.conf启用memory模块才行。</p>\n<h4 id=\"reporting-conf\"><a href=\"#reporting-conf\" class=\"headerlink\" title=\"reporting.conf\"></a>reporting.conf</h4><p>配置报告服务器，我修改了mongodb字段，使其将数据存储到了MongoDB中</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动cuckoo\"><a href=\"#启动cuckoo\" class=\"headerlink\" title=\"启动cuckoo\"></a>启动cuckoo</h3><p><code>python2 cuckoo.py</code></p>\n<p>如果失败，可以使用-d参数，输出更多的内容用于调试确认错误信息。</p>\n<h3 id=\"提交文件分析\"><a href=\"#提交文件分析\" class=\"headerlink\" title=\"提交文件分析\"></a>提交文件分析</h3><p><code>python2 utils/submit.py [文件路径] --url [网址]</code></p>\n"},{"title":"Node使用心得","date":"2014-12-07T08:49:58.000Z","_content":"\n## Node使用心得\n\n#### 更换NPM源\n\n使用[淘宝NPM源](http://npm.taobao.org/)，在使用过程中发现目录`~/.npm/.cache_cnpm/_locks/`是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。\n\n#### Bower使用\n\n#### Grunt使用\n\n#### bootstrap3-jade-node\n\n基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置\n\n安装命令：\n\n`npm install -g grunt-express-bootstrap`\n\n初始化库\n\n`grunt-express-bootstrap init`\n\n生成库\n\n```\nnpm install\nbower install\n```\n\n本地运行\n\n``\n\n\n","source":"_posts/Node-Start.md","raw":"title: Node使用心得\ndate: 2014-12-07 16:49:58\ntags:\n---\n\n## Node使用心得\n\n#### 更换NPM源\n\n使用[淘宝NPM源](http://npm.taobao.org/)，在使用过程中发现目录`~/.npm/.cache_cnpm/_locks/`是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。\n\n#### Bower使用\n\n#### Grunt使用\n\n#### bootstrap3-jade-node\n\n基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置\n\n安装命令：\n\n`npm install -g grunt-express-bootstrap`\n\n初始化库\n\n`grunt-express-bootstrap init`\n\n生成库\n\n```\nnpm install\nbower install\n```\n\n本地运行\n\n``\n\n\n","slug":"Node-Start","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xni0000bqhfys3aa8fyj","content":"<h2 id=\"Node使用心得\"><a href=\"#Node使用心得\" class=\"headerlink\" title=\"Node使用心得\"></a>Node使用心得</h2><h4 id=\"更换NPM源\"><a href=\"#更换NPM源\" class=\"headerlink\" title=\"更换NPM源\"></a>更换NPM源</h4><p>使用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM源</a>，在使用过程中发现目录<code>~/.npm/.cache_cnpm/_locks/</code>是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。</p>\n<h4 id=\"Bower使用\"><a href=\"#Bower使用\" class=\"headerlink\" title=\"Bower使用\"></a>Bower使用</h4><h4 id=\"Grunt使用\"><a href=\"#Grunt使用\" class=\"headerlink\" title=\"Grunt使用\"></a>Grunt使用</h4><h4 id=\"bootstrap3-jade-node\"><a href=\"#bootstrap3-jade-node\" class=\"headerlink\" title=\"bootstrap3-jade-node\"></a>bootstrap3-jade-node</h4><p>基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置</p>\n<p>安装命令：</p>\n<p><code>npm install -g grunt-express-bootstrap</code></p>\n<p>初始化库</p>\n<p><code>grunt-express-bootstrap init</code></p>\n<p>生成库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">bower install</div></pre></td></tr></table></figure>\n<p>本地运行</p>\n<p>``</p>\n","excerpt":"","more":"<h2 id=\"Node使用心得\"><a href=\"#Node使用心得\" class=\"headerlink\" title=\"Node使用心得\"></a>Node使用心得</h2><h4 id=\"更换NPM源\"><a href=\"#更换NPM源\" class=\"headerlink\" title=\"更换NPM源\"></a>更换NPM源</h4><p>使用<a href=\"http://npm.taobao.org/\">淘宝NPM源</a>，在使用过程中发现目录<code>~/.npm/.cache_cnpm/_locks/</code>是root权限创建的（估计是因为第一次是以root权限运行），在普通权限下使用cnpm时会报错，需要手动修改下。</p>\n<h4 id=\"Bower使用\"><a href=\"#Bower使用\" class=\"headerlink\" title=\"Bower使用\"></a>Bower使用</h4><h4 id=\"Grunt使用\"><a href=\"#Grunt使用\" class=\"headerlink\" title=\"Grunt使用\"></a>Grunt使用</h4><h4 id=\"bootstrap3-jade-node\"><a href=\"#bootstrap3-jade-node\" class=\"headerlink\" title=\"bootstrap3-jade-node\"></a>bootstrap3-jade-node</h4><p>基于Grunt基础上，加上了Bootstrap3、Jade、Node模板配置</p>\n<p>安装命令：</p>\n<p><code>npm install -g grunt-express-bootstrap</code></p>\n<p>初始化库</p>\n<p><code>grunt-express-bootstrap init</code></p>\n<p>生成库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">bower install</div></pre></td></tr></table></figure>\n<p>本地运行</p>\n<p>``</p>\n"},{"title":"Scrapy","date":"2015-01-25T09:16:25.000Z","_content":"\n### Scrapy简介\n\nScrapy是使用Python编写的一个通用的爬虫框架。\n\n基于Twisted的异步编程框架，大幅提高了爬取效率。\n\nScrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。\n\n代码看起来挺简洁的，因此。\n\nScrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。\n\n#### Scrapy框架\n\nScrapy的框架比较难以理解，这跟\n\n### Scrapy改进\n\n#### Html解析\n\nScrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。\n\n#### 使用Bloom过滤器\n\n默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景\n\n#### 利用redis构建分布式爬虫\n\n目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！\n\n","source":"_posts/Scrapy.md","raw":"title: Scrapy\ndate: 2015-01-25 17:16:25\ntags:\n---\n\n### Scrapy简介\n\nScrapy是使用Python编写的一个通用的爬虫框架。\n\n基于Twisted的异步编程框架，大幅提高了爬取效率。\n\nScrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。\n\n代码看起来挺简洁的，因此。\n\nScrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。\n\n#### Scrapy框架\n\nScrapy的框架比较难以理解，这跟\n\n### Scrapy改进\n\n#### Html解析\n\nScrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。\n\n#### 使用Bloom过滤器\n\n默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景\n\n#### 利用redis构建分布式爬虫\n\n目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！\n\n","slug":"Scrapy","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xni2000dqhfyme55w5qi","content":"<h3 id=\"Scrapy简介\"><a href=\"#Scrapy简介\" class=\"headerlink\" title=\"Scrapy简介\"></a>Scrapy简介</h3><p>Scrapy是使用Python编写的一个通用的爬虫框架。</p>\n<p>基于Twisted的异步编程框架，大幅提高了爬取效率。</p>\n<p>Scrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。</p>\n<p>代码看起来挺简洁的，因此。</p>\n<p>Scrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。</p>\n<h4 id=\"Scrapy框架\"><a href=\"#Scrapy框架\" class=\"headerlink\" title=\"Scrapy框架\"></a>Scrapy框架</h4><p>Scrapy的框架比较难以理解，这跟</p>\n<h3 id=\"Scrapy改进\"><a href=\"#Scrapy改进\" class=\"headerlink\" title=\"Scrapy改进\"></a>Scrapy改进</h3><h4 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h4><p>Scrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。</p>\n<h4 id=\"使用Bloom过滤器\"><a href=\"#使用Bloom过滤器\" class=\"headerlink\" title=\"使用Bloom过滤器\"></a>使用Bloom过滤器</h4><p>默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景</p>\n<h4 id=\"利用redis构建分布式爬虫\"><a href=\"#利用redis构建分布式爬虫\" class=\"headerlink\" title=\"利用redis构建分布式爬虫\"></a>利用redis构建分布式爬虫</h4><p>目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！</p>\n","excerpt":"","more":"<h3 id=\"Scrapy简介\"><a href=\"#Scrapy简介\" class=\"headerlink\" title=\"Scrapy简介\"></a>Scrapy简介</h3><p>Scrapy是使用Python编写的一个通用的爬虫框架。</p>\n<p>基于Twisted的异步编程框架，大幅提高了爬取效率。</p>\n<p>Scrapy想来目前应该是我阅读源代码最多的开源项目了。在这个项目上，我学习到了yeild关键词，各种类的应用，接触到了一直想学习的Twisted框架。</p>\n<p>代码看起来挺简洁的，因此。</p>\n<p>Scrapy 0.24.0版本的包结构有大幅改变，与之前的旧版本完全不兼容。</p>\n<h4 id=\"Scrapy框架\"><a href=\"#Scrapy框架\" class=\"headerlink\" title=\"Scrapy框架\"></a>Scrapy框架</h4><p>Scrapy的框架比较难以理解，这跟</p>\n<h3 id=\"Scrapy改进\"><a href=\"#Scrapy改进\" class=\"headerlink\" title=\"Scrapy改进\"></a>Scrapy改进</h3><h4 id=\"Html解析\"><a href=\"#Html解析\" class=\"headerlink\" title=\"Html解析\"></a>Html解析</h4><p>Scrapy提供了lxml的相关解析器。但是使用更好的是BeautifulSoup，虽然解析速度会便慢。</p>\n<h4 id=\"使用Bloom过滤器\"><a href=\"#使用Bloom过滤器\" class=\"headerlink\" title=\"使用Bloom过滤器\"></a>使用Bloom过滤器</h4><p>默认的网址过滤器(爬虫中的Visited表)是将一个url映射到MD5实现的。使用场景</p>\n<h4 id=\"利用redis构建分布式爬虫\"><a href=\"#利用redis构建分布式爬虫\" class=\"headerlink\" title=\"利用redis构建分布式爬虫\"></a>利用redis构建分布式爬虫</h4><p>目前还没有使用过这个技术，但是其实原理非常简单，把爬虫队列存储到Redis的列表中，利用Redis的分布式数据存储功能来实现分布式队列，这样就能够在不大动Scrapy的情况下进行分布式爬取。说句实话这个思路真得很赞！</p>\n"},{"title":"个人学习目标","date":"2015-04-19T16:00:37.000Z","_content":"\n部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。\n\n## SMART原则\n\nSMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。\n\n1. Specific明确性\n\n目标是具体无歧义，对于团队而言则是一致的。\n\n2. Measuable可衡量性\n\n有简单明显的指标衡量完成进度及效果\n\n3. Attainable可达到的\n\n目标不宜过于难，以免位居不前。\n\n4. Relevant相关性\n\n目标之间有相关性，这条对于此次目标制定用处不大。\n\n5. Time-bound时间截至期限\n\n有明确的截至日期，其实这和原则2有部分重复\n\n## 个人年度目标\n\n鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。\n\n### 总目标\n\n1. 技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。\n\n2. 一周一篇博客。\n\n3. 每天利用Evernote记录自己做的事情，并尝试总结改进。\n\n### 4月份目标\n\n1. 即日起（19日）至月底月度完毕《Effictive C++》前两个章节。\n\n2. 整理现有的博客内容，写博客一篇。\n\n","source":"_posts/Target.md","raw":"title: \"个人学习目标\"\ndate: 2015-04-20 00:00:37\ntags:\n---\n\n部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。\n\n## SMART原则\n\nSMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。\n\n1. Specific明确性\n\n目标是具体无歧义，对于团队而言则是一致的。\n\n2. Measuable可衡量性\n\n有简单明显的指标衡量完成进度及效果\n\n3. Attainable可达到的\n\n目标不宜过于难，以免位居不前。\n\n4. Relevant相关性\n\n目标之间有相关性，这条对于此次目标制定用处不大。\n\n5. Time-bound时间截至期限\n\n有明确的截至日期，其实这和原则2有部分重复\n\n## 个人年度目标\n\n鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。\n\n### 总目标\n\n1. 技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。\n\n2. 一周一篇博客。\n\n3. 每天利用Evernote记录自己做的事情，并尝试总结改进。\n\n### 4月份目标\n\n1. 即日起（19日）至月底月度完毕《Effictive C++》前两个章节。\n\n2. 整理现有的博客内容，写博客一篇。\n\n","slug":"Target","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xni3000eqhfyjh2mrbsw","content":"<p>部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。</p>\n<h2 id=\"SMART原则\"><a href=\"#SMART原则\" class=\"headerlink\" title=\"SMART原则\"></a>SMART原则</h2><p>SMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。</p>\n<ol>\n<li>Specific明确性</li>\n</ol>\n<p>目标是具体无歧义，对于团队而言则是一致的。</p>\n<ol>\n<li>Measuable可衡量性</li>\n</ol>\n<p>有简单明显的指标衡量完成进度及效果</p>\n<ol>\n<li>Attainable可达到的</li>\n</ol>\n<p>目标不宜过于难，以免位居不前。</p>\n<ol>\n<li>Relevant相关性</li>\n</ol>\n<p>目标之间有相关性，这条对于此次目标制定用处不大。</p>\n<ol>\n<li>Time-bound时间截至期限</li>\n</ol>\n<p>有明确的截至日期，其实这和原则2有部分重复</p>\n<h2 id=\"个人年度目标\"><a href=\"#个人年度目标\" class=\"headerlink\" title=\"个人年度目标\"></a>个人年度目标</h2><p>鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。</p>\n<h3 id=\"总目标\"><a href=\"#总目标\" class=\"headerlink\" title=\"总目标\"></a>总目标</h3><ol>\n<li><p>技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。</p>\n</li>\n<li><p>一周一篇博客。</p>\n</li>\n<li><p>每天利用Evernote记录自己做的事情，并尝试总结改进。</p>\n</li>\n</ol>\n<h3 id=\"4月份目标\"><a href=\"#4月份目标\" class=\"headerlink\" title=\"4月份目标\"></a>4月份目标</h3><ol>\n<li><p>即日起（19日）至月底月度完毕《Effictive C++》前两个章节。</p>\n</li>\n<li><p>整理现有的博客内容，写博客一篇。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>部门老大让我们定下自己的年度目标，以此使大家在一段时间都能够有所收获而不至于碌碌无为。作为新人，我的年度目标自然时是以学习为主，主要是读书、写博客，提高个人时间管理。</p>\n<h2 id=\"SMART原则\"><a href=\"#SMART原则\" class=\"headerlink\" title=\"SMART原则\"></a>SMART原则</h2><p>SMART原则是制定（考核）目标时常用的黄金原则，老大在会议上也提到了。</p>\n<ol>\n<li>Specific明确性</li>\n</ol>\n<p>目标是具体无歧义，对于团队而言则是一致的。</p>\n<ol>\n<li>Measuable可衡量性</li>\n</ol>\n<p>有简单明显的指标衡量完成进度及效果</p>\n<ol>\n<li>Attainable可达到的</li>\n</ol>\n<p>目标不宜过于难，以免位居不前。</p>\n<ol>\n<li>Relevant相关性</li>\n</ol>\n<p>目标之间有相关性，这条对于此次目标制定用处不大。</p>\n<ol>\n<li>Time-bound时间截至期限</li>\n</ol>\n<p>有明确的截至日期，其实这和原则2有部分重复</p>\n<h2 id=\"个人年度目标\"><a href=\"#个人年度目标\" class=\"headerlink\" title=\"个人年度目标\"></a>个人年度目标</h2><p>鉴于自己的严重拖延症及极差的执行力，尽量把目标定低一些，以便达到。</p>\n<h3 id=\"总目标\"><a href=\"#总目标\" class=\"headerlink\" title=\"总目标\"></a>总目标</h3><ol>\n<li><p>技术类书籍平均每天3页，一周20页，两个月写一篇读书笔记。</p>\n</li>\n<li><p>一周一篇博客。</p>\n</li>\n<li><p>每天利用Evernote记录自己做的事情，并尝试总结改进。</p>\n</li>\n</ol>\n<h3 id=\"4月份目标\"><a href=\"#4月份目标\" class=\"headerlink\" title=\"4月份目标\"></a>4月份目标</h3><ol>\n<li><p>即日起（19日）至月底月度完毕《Effictive C++》前两个章节。</p>\n</li>\n<li><p>整理现有的博客内容，写博客一篇。</p>\n</li>\n</ol>\n"},{"title":"网址泄漏","date":"2015-01-03T06:37:26.000Z","_content":"\n这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的[下载地址](http://www.cnblogs.com/zc520/p/3302629.html)（10.0.0），里面提供了10.0.0的官网下载链接：\n\n![Vmware Account Locked](/img/vmware-lock.png)\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle)\n\n虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。\n\n仔细观察[官网下载页面内容](https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv)，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle)\n\n![Vmware List](/img/vmware-list.png)\n\n## 其他的话\n\n这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。\n\n这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。\n\n## 安装Vmware Workstation中的其他问题\n\n参考了很多[Wiki](https://wiki.archlinux.org/index.php/Vmware)上的内容\n\n#### 无/etc/init.d目录\n\nArchlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。\n\n#### 编译模块时出错\n\n1. 缺少header.h\n\n查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接\n\n`sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h`\n\n2. 打补丁\n\n解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件[vmware-patch](https://aur.archlinux.org/packages/vmware-patch/)就行了，一看这个软件，就已经为10.0.4更新过了，**又让我对Arch产生了进一步的好感，无所不能啊！**\n\n总结就是，有问题，搜**Arch Linux英文Wiki！**\n","source":"_posts/Url-Leak.md","raw":"title: 网址泄漏\ndate: 2015-01-03 14:37:26\ntags:\n---\n\n这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的[下载地址](http://www.cnblogs.com/zc520/p/3302629.html)（10.0.0），里面提供了10.0.0的官网下载链接：\n\n![Vmware Account Locked](/img/vmware-lock.png)\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle)\n\n虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。\n\n仔细观察[官网下载页面内容](https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&productId=362&rPId=7049#errorCheckDiv)，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：\n\n[http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910](http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle)\n\n![Vmware List](/img/vmware-list.png)\n\n## 其他的话\n\n这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。\n\n这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。\n\n## 安装Vmware Workstation中的其他问题\n\n参考了很多[Wiki](https://wiki.archlinux.org/index.php/Vmware)上的内容\n\n#### 无/etc/init.d目录\n\nArchlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。\n\n#### 编译模块时出错\n\n1. 缺少header.h\n\n查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接\n\n`sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h`\n\n2. 打补丁\n\n解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件[vmware-patch](https://aur.archlinux.org/packages/vmware-patch/)就行了，一看这个软件，就已经为10.0.4更新过了，**又让我对Arch产生了进一步的好感，无所不能啊！**\n\n总结就是，有问题，搜**Arch Linux英文Wiki！**\n","slug":"Url-Leak","published":1,"updated":"2015-08-02T06:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xni4000fqhfyb6bc1m56","content":"<p>这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的<a href=\"http://www.cnblogs.com/zc520/p/3302629.html\" target=\"_blank\" rel=\"external\">下载地址</a>（10.0.0），里面提供了10.0.0的官网下载链接：</p>\n<p><img src=\"/img/vmware-lock.png\" alt=\"Vmware Account Locked\"></p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle\" target=\"_blank\" rel=\"external\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle</a></p>\n<p>虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。</p>\n<p>仔细观察<a href=\"https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&amp;productId=362&amp;rPId=7049#errorCheckDiv\" target=\"_blank\" rel=\"external\">官网下载页面内容</a>，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：</p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle\" target=\"_blank\" rel=\"external\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910</a></p>\n<p><img src=\"/img/vmware-list.png\" alt=\"Vmware List\"></p>\n<h2 id=\"其他的话\"><a href=\"#其他的话\" class=\"headerlink\" title=\"其他的话\"></a>其他的话</h2><p>这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。</p>\n<p>这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。</p>\n<h2 id=\"安装Vmware-Workstation中的其他问题\"><a href=\"#安装Vmware-Workstation中的其他问题\" class=\"headerlink\" title=\"安装Vmware Workstation中的其他问题\"></a>安装Vmware Workstation中的其他问题</h2><p>参考了很多<a href=\"https://wiki.archlinux.org/index.php/Vmware\" target=\"_blank\" rel=\"external\">Wiki</a>上的内容</p>\n<h4 id=\"无-etc-init-d目录\"><a href=\"#无-etc-init-d目录\" class=\"headerlink\" title=\"无/etc/init.d目录\"></a>无/etc/init.d目录</h4><p>Archlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。</p>\n<h4 id=\"编译模块时出错\"><a href=\"#编译模块时出错\" class=\"headerlink\" title=\"编译模块时出错\"></a>编译模块时出错</h4><ol>\n<li>缺少header.h</li>\n</ol>\n<p>查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接</p>\n<p><code>sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h</code></p>\n<ol>\n<li>打补丁</li>\n</ol>\n<p>解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件<a href=\"https://aur.archlinux.org/packages/vmware-patch/\" target=\"_blank\" rel=\"external\">vmware-patch</a>就行了，一看这个软件，就已经为10.0.4更新过了，<strong>又让我对Arch产生了进一步的好感，无所不能啊！</strong></p>\n<p>总结就是，有问题，搜<strong>Arch Linux英文Wiki！</strong></p>\n","excerpt":"","more":"<p>这个题目起的有点意思。起因很简单，在元旦假期里面突然想折腾一下ArchLinux，装一个Vmware，结果去官网，发现我的Vmware帐号提示处于下载资格审核中，没法直接通过官网下载，而偏偏Vmware Workstation for Linux的下载非常少，或者版本不是最新的（最新的11没有32位版，其他的也普遍是8、9等），后来终于找到一个比较新的<a href=\"http://www.cnblogs.com/zc520/p/3302629.html\">下载地址</a>（10.0.0），里面提供了10.0.0的官网下载链接：</p>\n<p><img src=\"/img/vmware-lock.png\" alt=\"Vmware Account Locked\"></p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.0-1295980.i386.bundle</a></p>\n<p>虽然离最新可用32位版10.0.4稍微差点，但仍然是可用的。不过仔细观察这个链接，中间不包含任何随机字符串，因此怀疑可以构造出10.0.4的下载地址。在这个链接中最关键的就是bundle的文件名：VMware-Workstation-Full-10.0.0-1295980.i386.bundle，于是便想直接修改为VMware-Workstation-Full-10.0.4-1295980.i386.bundle，显然这种做法是错误的，因为文件名中含有一个内部版本号1295980，因此必须找到这个内部版本号才能够构造出实际的10.0.4下载地址。</p>\n<p>仔细观察<a href=\"https://my.vmware.com/group/vmware/details?downloadGroup=WKST-1004-LX&amp;productId=362&amp;rPId=7049#errorCheckDiv\">官网下载页面内容</a>，发现真实文件名（内部版本号）在官网上就有，据此构造出实际的10.0.4的下载地址为：</p>\n<p><a href=\"http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910.i386.bundle\">http://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-10.0.4-2249910</a></p>\n<p><img src=\"/img/vmware-list.png\" alt=\"Vmware List\"></p>\n<h2 id=\"其他的话\"><a href=\"#其他的话\" class=\"headerlink\" title=\"其他的话\"></a>其他的话</h2><p>这也不是我第一次干这种事了，基本情况就是下载网址A被大家所知道，但是下载网址B需要通过一定权限才能获取的，然后最关键的是，网址A能够推理出网址B，通常情况下网址里面包含了固定的信息，例如日期，可以直接修改得到。当然，如果有一点随机字符串，就没法获得了。</p>\n<p>这个问题相信以前国内的各种下载站都会有过，不过现在应该好多了，但是很多公司自己的软件或者付费下载可能仍然存在这样的问题。如果能够获得一个网址，例如试用版软件或者免费资源，就能够进一步推导出其他资源的网址，当然前提是文件名能够直接从网页上获取到。</p>\n<h2 id=\"安装Vmware-Workstation中的其他问题\"><a href=\"#安装Vmware-Workstation中的其他问题\" class=\"headerlink\" title=\"安装Vmware Workstation中的其他问题\"></a>安装Vmware Workstation中的其他问题</h2><p>参考了很多<a href=\"https://wiki.archlinux.org/index.php/Vmware\">Wiki</a>上的内容</p>\n<h4 id=\"无-etc-init-d目录\"><a href=\"#无-etc-init-d目录\" class=\"headerlink\" title=\"无/etc/init.d目录\"></a>无/etc/init.d目录</h4><p>Archlinux的启动改为systemctl，因此不再有/etc/init.d目录，解决方法是直接忽略错误，然后手工写一个service文件就行了。</p>\n<h4 id=\"编译模块时出错\"><a href=\"#编译模块时出错\" class=\"headerlink\" title=\"编译模块时出错\"></a>编译模块时出错</h4><ol>\n<li>缺少header.h</li>\n</ol>\n<p>查看日志，发现是缺少linux头文件中的header.h，利用locate命令查找到对应的version.h文件，然后创建软链接</p>\n<p><code>sudo ln /usr/include/linux/version.h /lib/modules/3.17.6-1-ARCH/build/include/linux/version.h</code></p>\n<ol>\n<li>打补丁</li>\n</ol>\n<p>解决了header.h之后，发现还是编译不通过，这下就傻眼了（本事不济搞不定啊！），不过通过搜索后，发现其实Arch Wiki上都写明了，安装软件<a href=\"https://aur.archlinux.org/packages/vmware-patch/\">vmware-patch</a>就行了，一看这个软件，就已经为10.0.4更新过了，<strong>又让我对Arch产生了进一步的好感，无所不能啊！</strong></p>\n<p>总结就是，有问题，搜<strong>Arch Linux英文Wiki！</strong></p>\n"},{"title":"常见软件包的国内镜像","date":"2016-01-10T15:45:19.000Z","_content":"\n\n在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。\n\n### 常见开源镜像站点\n\n这些站点包含常见各种的Linux软件源。\n\n[中国科技大学开源镜像](https://mirrors.ustc.edu.cn/)\n[清华大学开源镜像](http://mirrors.tuna.tsinghua.edu.cn/)\n[阿里云开源镜像](http://mirrors.aliyun.com/)\n\n其中中国科技大学使用的是https，因此在大多数情况下推荐使用\n\n### 具体一些推荐配置\n\n#### python\n\n网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。\n#### node\n\n推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。\n\n#### homebrew\n\nhomebrew自身内容是放在github上的，如果更新速度慢，可以换成[清华的镜像](http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew)：\n\n```\n$ cd /usr/local\n$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git\n```\n\nhomebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。\n\nhomebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，[有人](http://ban.ninja/)也做了份国内镜像。\n\n设置环境变量:\n\n```\nexport HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com\n```\n\n#### pyenv\n\n同样设置环境变量\n```\nexport PYTHON_BUILD_MIRROR_URL=\"http://pyenv.qiniudn.com/pythons/\"\n```\n\n#### 注意事项\n\n对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。","source":"_posts/mirror.md","raw":"title: 常见软件包的国内镜像\ndate: 2016-01-10 23:45:19\ntags: Linux\n---\n\n\n在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。\n\n### 常见开源镜像站点\n\n这些站点包含常见各种的Linux软件源。\n\n[中国科技大学开源镜像](https://mirrors.ustc.edu.cn/)\n[清华大学开源镜像](http://mirrors.tuna.tsinghua.edu.cn/)\n[阿里云开源镜像](http://mirrors.aliyun.com/)\n\n其中中国科技大学使用的是https，因此在大多数情况下推荐使用\n\n### 具体一些推荐配置\n\n#### python\n\n网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。\n#### node\n\n推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。\n\n#### homebrew\n\nhomebrew自身内容是放在github上的，如果更新速度慢，可以换成[清华的镜像](http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew)：\n\n```\n$ cd /usr/local\n$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git\n```\n\nhomebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。\n\nhomebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，[有人](http://ban.ninja/)也做了份国内镜像。\n\n设置环境变量:\n\n```\nexport HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com\n```\n\n#### pyenv\n\n同样设置环境变量\n```\nexport PYTHON_BUILD_MIRROR_URL=\"http://pyenv.qiniudn.com/pythons/\"\n```\n\n#### 注意事项\n\n对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。","slug":"mirror","published":1,"updated":"2016-01-10T15:47:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy75xni6000gqhfyej0j8ek1","content":"<p>在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。</p>\n<h3 id=\"常见开源镜像站点\"><a href=\"#常见开源镜像站点\" class=\"headerlink\" title=\"常见开源镜像站点\"></a>常见开源镜像站点</h3><p>这些站点包含常见各种的Linux软件源。</p>\n<p><a href=\"https://mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"external\">中国科技大学开源镜像</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\" target=\"_blank\" rel=\"external\">清华大学开源镜像</a><br><a href=\"http://mirrors.aliyun.com/\" target=\"_blank\" rel=\"external\">阿里云开源镜像</a></p>\n<p>其中中国科技大学使用的是https，因此在大多数情况下推荐使用</p>\n<h3 id=\"具体一些推荐配置\"><a href=\"#具体一些推荐配置\" class=\"headerlink\" title=\"具体一些推荐配置\"></a>具体一些推荐配置</h3><h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。</p>\n<h4 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h4><p>推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。</p>\n<h4 id=\"homebrew\"><a href=\"#homebrew\" class=\"headerlink\" title=\"homebrew\"></a>homebrew</h4><p>homebrew自身内容是放在github上的，如果更新速度慢，可以换成<a href=\"http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew\" target=\"_blank\" rel=\"external\">清华的镜像</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /usr/local</div><div class=\"line\">$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git</div></pre></td></tr></table></figure>\n<p>homebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。</p>\n<p>homebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，<a href=\"http://ban.ninja/\" target=\"_blank\" rel=\"external\">有人</a>也做了份国内镜像。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com</div></pre></td></tr></table></figure>\n<h4 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h4><p>同样设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PYTHON_BUILD_MIRROR_URL=&quot;http://pyenv.qiniudn.com/pythons/&quot;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。</p>\n","excerpt":"","more":"<p>在Linux/Mac上经常要使用各种软件库来下载资源，但是这些资源链接经常被墙，或者速度较慢，因此需要改用国内的镜像站点来加快速度。</p>\n<h3 id=\"常见开源镜像站点\"><a href=\"#常见开源镜像站点\" class=\"headerlink\" title=\"常见开源镜像站点\"></a>常见开源镜像站点</h3><p>这些站点包含常见各种的Linux软件源。</p>\n<p><a href=\"https://mirrors.ustc.edu.cn/\">中国科技大学开源镜像</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">清华大学开源镜像</a><br><a href=\"http://mirrors.aliyun.com/\">阿里云开源镜像</a></p>\n<p>其中中国科技大学使用的是https，因此在大多数情况下推荐使用</p>\n<h3 id=\"具体一些推荐配置\"><a href=\"#具体一些推荐配置\" class=\"headerlink\" title=\"具体一些推荐配置\"></a>具体一些推荐配置</h3><h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>网上大多推荐豆瓣的源，但是豆瓣的源仍然是http协议，新版pip会提示警告，所以还是换成科大源吧（除非是低版本Linux不支持https链接）。此外，使用阿里源还遇到过几次同步不及时的问题。</p>\n<h4 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h4><p>推荐使用阿里源，主要是提供额外的cnpm命令，可以方便的安装。</p>\n<h4 id=\"homebrew\"><a href=\"#homebrew\" class=\"headerlink\" title=\"homebrew\"></a>homebrew</h4><p>homebrew自身内容是放在github上的，如果更新速度慢，可以换成<a href=\"http://mirrors.tuna.tsinghua.edu.cn/help/#homebrew\">清华的镜像</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /usr/local</div><div class=\"line\">$ git remote set-url origin git://mirrors.tuna.tsinghua.edu.cn/homebrew.git</div></pre></td></tr></table></figure>\n<p>homebrew-science或者homebrew-python也可以参考其页面进行修改。不过如果不是处于极其艰难的情况，不建议改这个，因为无法确保各个的软件包的hash未被篡改。</p>\n<p>homebrew大多数的软件源都是在homebrew.bintray.com上的，速度同样非常慢，<a href=\"http://ban.ninja/\">有人</a>也做了份国内镜像。</p>\n<p>设置环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com</div></pre></td></tr></table></figure>\n<h4 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h4><p>同样设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PYTHON_BUILD_MIRROR_URL=&quot;http://pyenv.qiniudn.com/pythons/&quot;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>对于这些第三方源，并不能完全保重其安全性，所以会存在一定的风险下载到经过篡改的软件包。</p>\n"},{"title":"React Native with Android on Mac","date":"2017-01-21T11:42:02.000Z","_content":"\n## 在Mac上配置React Native Android\n\n默认的React Native对IOS支持比较好，但是对Android支持相对较差，需要手动配置多个环境进行。一般而言，如果安装Android Studio后，可以比较方便的允许，但是我另辟蹊径，选择使用Homebrew安装相关依赖，以便达到及时更新的目的。\n\nHomebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过`brew upgrade`进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。\n\n### 配置基本android开发环境包\n\n正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。\n\n```\nbrew install ant\nbrew install maven\nbrew install gradle\nbrew install android-sdk\nbrew install android-ndk\n```\n\n```\nexport ANT_HOME=/usr/local/opt/ant\nexport MAVEN_HOME=/usr/local/opt/maven\nexport GRADLE_HOME=/usr/local/opt/gradle\nexport ANDROID_HOME=/usr/local/opt/android-sdk\nexport ANDROID_NDK_HOME=/usr/local/opt/android-ndk\n```\n\n允许android命令来安装Android开发环境\n\n#### 安装HAXM\n\n这是唯一一步需要sudo操作的安装\n```\nbrew cask install intel-haxm\n```\n\n### 安装Android Studio\n\n```\nbrew cask install android-studio\n```\n\n允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk","source":"_posts/React-Native-with-Android-on-Mac.md","raw":"title: React Native with Android on Mac\ndate: 2017-01-21 19:42:02\ntags:\n---\n\n## 在Mac上配置React Native Android\n\n默认的React Native对IOS支持比较好，但是对Android支持相对较差，需要手动配置多个环境进行。一般而言，如果安装Android Studio后，可以比较方便的允许，但是我另辟蹊径，选择使用Homebrew安装相关依赖，以便达到及时更新的目的。\n\nHomebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过`brew upgrade`进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。\n\n### 配置基本android开发环境包\n\n正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。\n\n```\nbrew install ant\nbrew install maven\nbrew install gradle\nbrew install android-sdk\nbrew install android-ndk\n```\n\n```\nexport ANT_HOME=/usr/local/opt/ant\nexport MAVEN_HOME=/usr/local/opt/maven\nexport GRADLE_HOME=/usr/local/opt/gradle\nexport ANDROID_HOME=/usr/local/opt/android-sdk\nexport ANDROID_NDK_HOME=/usr/local/opt/android-ndk\n```\n\n允许android命令来安装Android开发环境\n\n#### 安装HAXM\n\n这是唯一一步需要sudo操作的安装\n```\nbrew cask install intel-haxm\n```\n\n### 安装Android Studio\n\n```\nbrew cask install android-studio\n```\n\n允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk","slug":"React-Native-with-Android-on-Mac","published":1,"updated":"2017-01-21T11:58:54.000Z","_id":"ciy760m7x0000yjfyveprgc9g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"在Mac上配置React-Native-Android\"><a href=\"#在Mac上配置React-Native-Android\" class=\"headerlink\" title=\"在Mac上配置React Native Android\"></a>在Mac上配置React Native Android</h2><p>默认的React Native对IOS支持比较好，但是对Android支持相对较差，需要手动配置多个环境进行。一般而言，如果安装Android Studio后，可以比较方便的允许，但是我另辟蹊径，选择使用Homebrew安装相关依赖，以便达到及时更新的目的。</p>\n<p>Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过<code>brew upgrade</code>进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。</p>\n<h3 id=\"配置基本android开发环境包\"><a href=\"#配置基本android开发环境包\" class=\"headerlink\" title=\"配置基本android开发环境包\"></a>配置基本android开发环境包</h3><p>正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ant</div><div class=\"line\">brew install maven</div><div class=\"line\">brew install gradle</div><div class=\"line\">brew install android-sdk</div><div class=\"line\">brew install android-ndk</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANT_HOME=/usr/local/opt/ant</div><div class=\"line\">export MAVEN_HOME=/usr/local/opt/maven</div><div class=\"line\">export GRADLE_HOME=/usr/local/opt/gradle</div><div class=\"line\">export ANDROID_HOME=/usr/local/opt/android-sdk</div><div class=\"line\">export ANDROID_NDK_HOME=/usr/local/opt/android-ndk</div></pre></td></tr></table></figure>\n<p>允许android命令来安装Android开发环境</p>\n<h4 id=\"安装HAXM\"><a href=\"#安装HAXM\" class=\"headerlink\" title=\"安装HAXM\"></a>安装HAXM</h4><p>这是唯一一步需要sudo操作的安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intel-haxm</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install android-studio</div></pre></td></tr></table></figure>\n<p>允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk</p>\n","excerpt":"","more":"<h2 id=\"在Mac上配置React-Native-Android\"><a href=\"#在Mac上配置React-Native-Android\" class=\"headerlink\" title=\"在Mac上配置React Native Android\"></a>在Mac上配置React Native Android</h2><p>默认的React Native对IOS支持比较好，但是对Android支持相对较差，需要手动配置多个环境进行。一般而言，如果安装Android Studio后，可以比较方便的允许，但是我另辟蹊径，选择使用Homebrew安装相关依赖，以便达到及时更新的目的。</p>\n<p>Homebrew Cask包负责安装Mac上的App应用，安装时可以直接搜索，不必去各个网站单独下载，并且可以通过<code>brew upgrade</code>进行统一更新，免去了逐一手动更新的痛苦，目前大部分开发相关的应用都可以直接安装，基本能够达到替换App Store。</p>\n<h3 id=\"配置基本android开发环境包\"><a href=\"#配置基本android开发环境包\" class=\"headerlink\" title=\"配置基本android开发环境包\"></a>配置基本android开发环境包</h3><p>正如上文所述，使用Homebrew进行软件管理的目的，所有软件均不会从官网下载，而只通过命令行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install ant</div><div class=\"line\">brew install maven</div><div class=\"line\">brew install gradle</div><div class=\"line\">brew install android-sdk</div><div class=\"line\">brew install android-ndk</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANT_HOME=/usr/local/opt/ant</div><div class=\"line\">export MAVEN_HOME=/usr/local/opt/maven</div><div class=\"line\">export GRADLE_HOME=/usr/local/opt/gradle</div><div class=\"line\">export ANDROID_HOME=/usr/local/opt/android-sdk</div><div class=\"line\">export ANDROID_NDK_HOME=/usr/local/opt/android-ndk</div></pre></td></tr></table></figure>\n<p>允许android命令来安装Android开发环境</p>\n<h4 id=\"安装HAXM\"><a href=\"#安装HAXM\" class=\"headerlink\" title=\"安装HAXM\"></a>安装HAXM</h4><p>这是唯一一步需要sudo操作的安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intel-haxm</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install android-studio</div></pre></td></tr></table></figure>\n<p>允许Android Studio后，记得配置Android SDK路径为/usr/local/opt/android-sdk</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciy75xngz0006qhfyt8abgg4x","tag_id":"ciy75xnhp0008qhfywqr9xljt","_id":"ciy75xni2000cqhfyod4uzg7s"},{"post_id":"ciy75xni6000gqhfyej0j8ek1","tag_id":"ciy75xnhp0008qhfywqr9xljt","_id":"ciy75xni8000hqhfyqtk4dusm"}],"Tag":[{"name":"Linux","_id":"ciy75xnhp0008qhfywqr9xljt"}]}}